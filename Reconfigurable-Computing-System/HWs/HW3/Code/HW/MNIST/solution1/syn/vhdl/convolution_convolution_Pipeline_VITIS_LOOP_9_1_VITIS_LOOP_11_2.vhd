-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution_convolution_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_11_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_in_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_in_ce1 : OUT STD_LOGIC;
    img_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_out_ce0 : OUT STD_LOGIC;
    img_out_we0 : OUT STD_LOGIC;
    img_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_10 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_11 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of convolution_convolution_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_11_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln9_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_272_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_reg_705 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_1_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_1_reg_710 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_fu_332_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln21_reg_721 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln21_2_fu_364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln21_2_reg_727 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_4_fu_370_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_4_reg_733 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_12_fu_391_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_12_reg_745 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln21_1_fu_434_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln21_1_reg_756 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln21_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln21_12_fu_486_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_12_reg_786 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_13_fu_491_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_13_reg_791 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_15_fu_506_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_15_reg_801 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln21_3_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_3_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_5_fu_514_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_5_reg_811 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_596_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_reg_816 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal mul_ln21_6_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal mul_ln21_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_2_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_2_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_603_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_6_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_1_fu_561_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_4_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_4_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_2_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_3_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_3_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_7_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln21_5_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln21_15_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_6_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln21_14_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_7_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln21_11_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_9_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln21_13_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_10_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_1_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_70 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln21_fu_477_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln9_2_fu_300_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_78 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln9_fu_254_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln11_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next28_mid1_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next287_fu_286_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_320_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_312_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_1_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_13_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_352_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_344_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_3_fu_360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_9_fu_374_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_1_fu_385_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_17_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_423_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_416_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_2_fu_430_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_10_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_16_fu_454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_11_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_8_fu_482_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_14_fu_496_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln21_6_fu_539_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_fu_552_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_8_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_8_fu_581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln21_8_fu_581_p2 : signal is "no";
    signal add_ln21_4_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln21_4_fu_577_p2 : signal is "no";
    signal sum_1_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_596_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_596_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_603_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_622_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_596_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component convolution_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolution_mac_muladd_5ns_5ns_5ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component convolution_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolution_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_8s_8_1_1_U1 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln21_6_fu_539_p0,
        din1 => empty_12,
        dout => mul_ln21_6_fu_539_p2);

    mul_8s_8s_8_1_1_U2 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln21_fu_552_p0,
        din1 => empty_6,
        dout => mul_ln21_fu_552_p2);

    mul_8s_8s_8_1_1_U3 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln21_2_reg_851,
        din1 => empty_7,
        dout => mul_ln21_1_fu_561_p2);

    mul_8s_8s_8_1_1_U4 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln21_4_reg_866,
        din1 => empty_9,
        dout => mul_ln21_3_fu_569_p2);

    mac_muladd_5ns_5ns_5ns_10_4_1_U5 : component convolution_mac_muladd_5ns_5ns_5ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_596_p0,
        din1 => grp_fu_596_p1,
        din2 => grp_fu_596_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_596_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U6 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_603_p0,
        din1 => empty,
        din2 => mul_ln21_6_fu_539_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_603_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U7 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln21_reg_766,
        din1 => empty_5,
        din2 => mul_ln21_fu_552_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_610_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U8 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln21_3_reg_806,
        din1 => empty_8,
        din2 => mul_ln21_1_fu_561_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U9 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_622_p0,
        din1 => empty_11,
        din2 => add_ln21_6_reg_856,
        ce => ap_const_logic_1,
        dout => grp_fu_622_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U10 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln21_5_reg_811,
        din1 => empty_10,
        din2 => mul_ln21_3_fu_569_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p3);

    flow_control_loop_pipe_sequential_init_U : component convolution_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln9_fu_248_p2 = ap_const_lv1_0))) then 
                    i_fu_74 <= select_ln9_2_fu_300_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln9_fu_248_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_78 <= add_ln9_fu_254_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_78 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_70 <= ap_const_lv5_0;
            elsif (((icmp_ln9_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                j_fu_70 <= add_ln21_fu_477_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln21_12_reg_786 <= add_ln21_12_fu_486_p2;
                add_ln21_13_reg_791 <= add_ln21_13_fu_491_p2;
                add_ln21_15_reg_801 <= add_ln21_15_fu_506_p2;
                trunc_ln21_3_reg_806 <= trunc_ln21_3_fu_510_p1;
                trunc_ln21_5_reg_811 <= trunc_ln21_5_fu_514_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln21_2_reg_871 <= grp_fu_610_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln21_3_reg_881 <= grp_fu_616_p3;
                add_ln21_7_reg_886 <= grp_fu_622_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln21_6_reg_856 <= grp_fu_603_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln24_reg_816 <= grp_fu_596_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_701 <= icmp_ln9_fu_248_p2;
                select_ln9_1_reg_710 <= select_ln9_1_fu_292_p3;
                select_ln9_reg_705 <= select_ln9_fu_272_p3;
                    sub_ln21_2_reg_727(9 downto 2) <= sub_ln21_2_fu_364_p2(9 downto 2);
                    sub_ln21_reg_721(9 downto 2) <= sub_ln21_fu_332_p2(9 downto 2);
                trunc_ln21_4_reg_866 <= trunc_ln21_4_fu_565_p1;
                    zext_ln21_12_reg_745(4 downto 0) <= zext_ln21_12_fu_391_p1(4 downto 0);
                    zext_ln21_4_reg_733(4 downto 0) <= zext_ln21_4_fu_370_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    sub_ln21_1_reg_756(9 downto 2) <= sub_ln21_1_fu_434_p2(9 downto 2);
                trunc_ln21_reg_766 <= trunc_ln21_fu_450_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                trunc_ln21_2_reg_851 <= trunc_ln21_2_fu_557_p1;
            end if;
        end if;
    end process;
    sub_ln21_reg_721(1 downto 0) <= "00";
    sub_ln21_2_reg_727(1 downto 0) <= "00";
    zext_ln21_4_reg_733(9 downto 5) <= "00000";
    zext_ln21_12_reg_745(9 downto 5) <= "00000";
    sub_ln21_1_reg_756(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln21_10_fu_440_p2 <= std_logic_vector(unsigned(sub_ln21_1_fu_434_p2) + unsigned(zext_ln21_4_reg_733));
    add_ln21_11_fu_468_p2 <= std_logic_vector(unsigned(sub_ln21_2_reg_727) + unsigned(zext_ln21_4_reg_733));
    add_ln21_12_fu_486_p2 <= std_logic_vector(unsigned(sub_ln21_reg_721) + unsigned(zext_ln21_8_fu_482_p1));
    add_ln21_13_fu_491_p2 <= std_logic_vector(unsigned(sub_ln21_1_reg_756) + unsigned(zext_ln21_8_fu_482_p1));
    add_ln21_14_fu_496_p2 <= std_logic_vector(unsigned(sub_ln21_2_reg_727) + unsigned(zext_ln21_8_fu_482_p1));
    add_ln21_15_fu_506_p2 <= std_logic_vector(unsigned(sub_ln21_reg_721) + unsigned(zext_ln21_12_reg_745));
    add_ln21_16_fu_454_p2 <= std_logic_vector(unsigned(sub_ln21_1_fu_434_p2) + unsigned(zext_ln21_12_reg_745));
    add_ln21_17_fu_395_p2 <= std_logic_vector(unsigned(sub_ln21_2_fu_364_p2) + unsigned(zext_ln21_12_fu_391_p1));
    add_ln21_1_fu_385_p2 <= std_logic_vector(unsigned(select_ln9_fu_272_p3) + unsigned(ap_const_lv5_2));
    add_ln21_4_fu_577_p2 <= std_logic_vector(signed(add_ln21_3_reg_881) + signed(add_ln21_2_reg_871));
    add_ln21_8_fu_581_p1 <= grp_fu_628_p3;
    add_ln21_8_fu_581_p2 <= std_logic_vector(signed(add_ln21_7_reg_886) + signed(add_ln21_8_fu_581_p1));
    add_ln21_9_fu_374_p2 <= std_logic_vector(unsigned(sub_ln21_fu_332_p2) + unsigned(zext_ln21_4_fu_370_p1));
    add_ln21_fu_477_p2 <= std_logic_vector(unsigned(select_ln9_reg_705) + unsigned(ap_const_lv5_1));
    add_ln9_fu_254_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln9_reg_701)
    begin
        if (((icmp_ln9_reg_701 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_70;
        end if; 
    end process;

    empty_13_fu_338_p2 <= std_logic_vector(unsigned(select_ln9_2_fu_300_p3) + unsigned(ap_const_lv5_2));
    grp_fu_596_p0 <= grp_fu_596_p00(5 - 1 downto 0);
    grp_fu_596_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln9_2_fu_300_p3),10));
    grp_fu_596_p1 <= ap_const_lv10_1A(5 - 1 downto 0);
    grp_fu_596_p2 <= zext_ln21_4_reg_733(5 - 1 downto 0);
    grp_fu_603_p0 <= img_in_q0(8 - 1 downto 0);
    grp_fu_622_p0 <= img_in_q1(8 - 1 downto 0);
    icmp_ln11_fu_266_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_1A) else "0";
    icmp_ln9_fu_248_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_2A4) else "0";

    img_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln21_15_fu_401_p1, ap_block_pp0_stage1, zext_ln21_14_fu_459_p1, ap_block_pp0_stage2, zext_ln21_11_fu_501_p1, ap_block_pp0_stage3, zext_ln21_13_fu_527_p1, zext_ln21_10_fu_544_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                img_in_address0 <= zext_ln21_10_fu_544_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                img_in_address0 <= zext_ln21_13_fu_527_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                img_in_address0 <= zext_ln21_11_fu_501_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                img_in_address0 <= zext_ln21_14_fu_459_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                img_in_address0 <= zext_ln21_15_fu_401_p1(10 - 1 downto 0);
            else 
                img_in_address0 <= "XXXXXXXXXX";
            end if;
        else 
            img_in_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    img_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, zext_ln21_5_fu_380_p1, ap_block_pp0_stage0, zext_ln21_6_fu_445_p1, ap_block_pp0_stage1, zext_ln21_7_fu_472_p1, ap_block_pp0_stage2, zext_ln21_9_fu_523_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                img_in_address1 <= zext_ln21_9_fu_523_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                img_in_address1 <= zext_ln21_7_fu_472_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                img_in_address1 <= zext_ln21_6_fu_445_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                img_in_address1 <= zext_ln21_5_fu_380_p1(10 - 1 downto 0);
            else 
                img_in_address1 <= "XXXXXXXXXX";
            end if;
        else 
            img_in_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    img_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            img_in_ce0 <= ap_const_logic_1;
        else 
            img_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            img_in_ce1 <= ap_const_logic_1;
        else 
            img_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    img_out_address0 <= zext_ln24_1_fu_573_p1(10 - 1 downto 0);

    img_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            img_out_ce0 <= ap_const_logic_1;
        else 
            img_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_out_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_fu_585_p2),32));

    img_out_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            img_out_we0 <= ap_const_logic_1;
        else 
            img_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next287_fu_286_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    indvars_iv_next28_mid1_fu_280_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_2));
    mul_ln21_6_fu_539_p0 <= img_in_q0(8 - 1 downto 0);
    mul_ln21_fu_552_p0 <= img_in_q1(8 - 1 downto 0);
    select_ln9_1_fu_292_p3 <= 
        indvars_iv_next28_mid1_fu_280_p2 when (icmp_ln11_fu_266_p2(0) = '1') else 
        indvars_iv_next287_fu_286_p2;
    select_ln9_2_fu_300_p3 <= 
        indvars_iv_next287_fu_286_p2 when (icmp_ln11_fu_266_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln9_fu_272_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_266_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sub_ln21_1_fu_434_p2 <= std_logic_vector(unsigned(tmp_2_fu_416_p3) - unsigned(zext_ln21_2_fu_430_p1));
    sub_ln21_2_fu_364_p2 <= std_logic_vector(unsigned(tmp_4_fu_344_p3) - unsigned(zext_ln21_3_fu_360_p1));
    sub_ln21_fu_332_p2 <= std_logic_vector(unsigned(tmp_fu_312_p3) - unsigned(zext_ln21_1_fu_328_p1));
    sum_1_fu_585_p2 <= std_logic_vector(unsigned(add_ln21_8_fu_581_p2) + unsigned(add_ln21_4_fu_577_p2));
    tmp_1_fu_320_p3 <= (select_ln9_2_fu_300_p3 & ap_const_lv2_0);
    tmp_2_fu_416_p3 <= (select_ln9_1_reg_710 & ap_const_lv5_0);
    tmp_3_fu_423_p3 <= (select_ln9_1_reg_710 & ap_const_lv2_0);
    tmp_4_fu_344_p3 <= (empty_13_fu_338_p2 & ap_const_lv5_0);
    tmp_5_fu_352_p3 <= (empty_13_fu_338_p2 & ap_const_lv2_0);
    tmp_fu_312_p3 <= (select_ln9_2_fu_300_p3 & ap_const_lv5_0);
    trunc_ln21_2_fu_557_p1 <= img_in_q0(8 - 1 downto 0);
    trunc_ln21_3_fu_510_p1 <= img_in_q1(8 - 1 downto 0);
    trunc_ln21_4_fu_565_p1 <= img_in_q0(8 - 1 downto 0);
    trunc_ln21_5_fu_514_p1 <= img_in_q0(8 - 1 downto 0);
    trunc_ln21_fu_450_p1 <= img_in_q1(8 - 1 downto 0);
    zext_ln21_10_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_13_reg_791),64));
    zext_ln21_11_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_14_fu_496_p2),64));
    zext_ln21_12_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_fu_385_p2),10));
    zext_ln21_13_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_15_reg_801),64));
    zext_ln21_14_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_16_fu_454_p2),64));
    zext_ln21_15_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_17_fu_395_p2),64));
    zext_ln21_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_320_p3),10));
    zext_ln21_2_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_423_p3),10));
    zext_ln21_3_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_352_p3),10));
    zext_ln21_4_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln9_fu_272_p3),10));
    zext_ln21_5_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_9_fu_374_p2),64));
    zext_ln21_6_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_10_fu_440_p2),64));
    zext_ln21_7_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_11_fu_468_p2),64));
    zext_ln21_8_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_477_p2),10));
    zext_ln21_9_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_12_reg_786),64));
    zext_ln24_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_reg_816),64));
end behav;
