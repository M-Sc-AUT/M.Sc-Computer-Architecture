-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_0_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_0_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_0_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_0_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_0_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_0_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_0_2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_1_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_1_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_1_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_1_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_1_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_1_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_1_2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_2_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_2_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_2_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_2_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_2_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_2_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_2_2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_0_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_0_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_0_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_0_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_0_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_0_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_0_2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_0_2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_0_2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_1_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_1_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_1_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_1_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_1_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_1_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_1_2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_1_2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_1_2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_2_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_2_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_2_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_2_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_2_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_2_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_2_2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_2_2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_2_2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_0_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_0_1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_0_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_2_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_0_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_2_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_0_2_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_2_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_0_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_2_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_2_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_2_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_0_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_0_2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_1_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_1_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_1_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_1_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_1_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_1_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_1_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_1_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_1_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_1_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_1_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_1_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_1_1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_1_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_1_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_1_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_1_1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_1_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_1_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_1_1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_1_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_2_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_1_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_1_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_2_WREADY : IN STD_LOGIC;
    m_axi_gmem1_1_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_1_2_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_1_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_1_2_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_1_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_1_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_1_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_1_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_RVALID : IN STD_LOGIC;
    m_axi_gmem1_1_2_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_1_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_RLAST : IN STD_LOGIC;
    m_axi_gmem1_1_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_2_BVALID : IN STD_LOGIC;
    m_axi_gmem1_1_2_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_1_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_1_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_1_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_1_2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_2_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_2_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_2_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_2_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_2_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_2_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_2_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_2_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_2_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_2_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_2_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_2_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_2_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_2_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_2_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_2_1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_2_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_2_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_2_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_2_1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_2_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_2_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_2_1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_2_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_2_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_2_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_2_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_2_WREADY : IN STD_LOGIC;
    m_axi_gmem1_2_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_2_2_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_2_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_2_2_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_2_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_2_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_2_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_2_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_RVALID : IN STD_LOGIC;
    m_axi_gmem1_2_2_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_2_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_RLAST : IN STD_LOGIC;
    m_axi_gmem1_2_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_2_BVALID : IN STD_LOGIC;
    m_axi_gmem1_2_2_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_2_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_2_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_ID_WIDTH-1 downto 0);
    m_axi_gmem1_2_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_2_2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution_convolution,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=75,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=11717,HLS_SYN_LUT=11756,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_0_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_0_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_0_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_1_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_1_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_1_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_2_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_2_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_2_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln18_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal gmem1_0_0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem1_0_0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal gmem1_0_1_blk_n_AR : STD_LOGIC;
    signal gmem1_0_1_blk_n_R : STD_LOGIC;
    signal gmem1_0_2_blk_n_AR : STD_LOGIC;
    signal gmem1_0_2_blk_n_R : STD_LOGIC;
    signal gmem1_1_0_blk_n_AR : STD_LOGIC;
    signal gmem1_1_0_blk_n_R : STD_LOGIC;
    signal gmem1_1_1_blk_n_AR : STD_LOGIC;
    signal gmem1_1_1_blk_n_R : STD_LOGIC;
    signal gmem1_1_2_blk_n_AR : STD_LOGIC;
    signal gmem1_1_2_blk_n_R : STD_LOGIC;
    signal gmem1_2_0_blk_n_AR : STD_LOGIC;
    signal gmem1_2_0_blk_n_R : STD_LOGIC;
    signal gmem1_2_1_blk_n_AR : STD_LOGIC;
    signal gmem1_2_1_blk_n_R : STD_LOGIC;
    signal gmem1_2_2_blk_n_AR : STD_LOGIC;
    signal gmem1_2_2_blk_n_R : STD_LOGIC;
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal icmp_ln18_reg_870_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_388_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_W : STD_LOGIC;
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln18_1_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_888_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal ap_block_state27_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state21_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_state25_pp0_stage13_iter0 : BOOLEAN;
    signal gmem2_AWVALID : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WVALID : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem2_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BREADY : STD_LOGIC;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_state30_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_405 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state22_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_state26_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state34_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state23_pp0_stage11_iter0 : BOOLEAN;
    signal ap_predicate_op214_writereq_state12 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state31_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state45_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_413 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state24_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state32_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal output_r_read_reg_743 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_read_reg_748 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_0_0_addr_reg_753 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_0_1_addr_reg_759 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_0_2_addr_reg_765 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_1_0_addr_reg_771 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_1_1_addr_reg_777 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_1_2_addr_reg_783 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_2_0_addr_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_2_1_addr_reg_795 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_2_2_addr_reg_801 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_0_0_addr_read_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_0_1_addr_read_reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_0_2_addr_read_reg_821 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_1_0_addr_read_reg_828 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_1_1_addr_read_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_1_2_addr_read_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_2_0_addr_read_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_2_1_addr_read_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_2_2_addr_read_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln18_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_addr_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_addr_reg_874_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_888_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_1_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln27_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln27_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_653_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_reg_912 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_1_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln27_1_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln27_1_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_659_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_8_reg_927 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_2_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_fu_579_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_16_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_1_fu_584_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_1_reg_947 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_673_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_1_reg_952 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln27_2_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln27_2_reg_957 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_679_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_9_reg_962 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_2_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_2_reg_967 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_685_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_3_reg_972 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_691_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_17_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_12_reg_982 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state33_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal mul_ln32_fu_599_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_697_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_11_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_1_fu_604_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_1_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_19_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_14_reg_1009 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state35_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal mul_ln32_2_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_2_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_0_0_AWREADY : STD_LOGIC;
    signal gmem1_0_0_WREADY : STD_LOGIC;
    signal gmem1_0_0_ARVALID : STD_LOGIC;
    signal gmem1_0_0_ARREADY : STD_LOGIC;
    signal gmem1_0_0_RVALID : STD_LOGIC;
    signal gmem1_0_0_RREADY : STD_LOGIC;
    signal gmem1_0_0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_0_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_0_0_BVALID : STD_LOGIC;
    signal gmem1_0_1_AWREADY : STD_LOGIC;
    signal gmem1_0_1_WREADY : STD_LOGIC;
    signal gmem1_0_1_ARVALID : STD_LOGIC;
    signal gmem1_0_1_ARREADY : STD_LOGIC;
    signal gmem1_0_1_RVALID : STD_LOGIC;
    signal gmem1_0_1_RREADY : STD_LOGIC;
    signal gmem1_0_1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_0_1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_0_1_BVALID : STD_LOGIC;
    signal gmem1_0_2_AWREADY : STD_LOGIC;
    signal gmem1_0_2_WREADY : STD_LOGIC;
    signal gmem1_0_2_ARVALID : STD_LOGIC;
    signal gmem1_0_2_ARREADY : STD_LOGIC;
    signal gmem1_0_2_RVALID : STD_LOGIC;
    signal gmem1_0_2_RREADY : STD_LOGIC;
    signal gmem1_0_2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_0_2_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_0_2_BVALID : STD_LOGIC;
    signal gmem1_1_0_AWREADY : STD_LOGIC;
    signal gmem1_1_0_WREADY : STD_LOGIC;
    signal gmem1_1_0_ARVALID : STD_LOGIC;
    signal gmem1_1_0_ARREADY : STD_LOGIC;
    signal gmem1_1_0_RVALID : STD_LOGIC;
    signal gmem1_1_0_RREADY : STD_LOGIC;
    signal gmem1_1_0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_1_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_1_0_BVALID : STD_LOGIC;
    signal gmem1_1_1_AWREADY : STD_LOGIC;
    signal gmem1_1_1_WREADY : STD_LOGIC;
    signal gmem1_1_1_ARVALID : STD_LOGIC;
    signal gmem1_1_1_ARREADY : STD_LOGIC;
    signal gmem1_1_1_RVALID : STD_LOGIC;
    signal gmem1_1_1_RREADY : STD_LOGIC;
    signal gmem1_1_1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_1_1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_1_1_BVALID : STD_LOGIC;
    signal gmem1_1_2_AWREADY : STD_LOGIC;
    signal gmem1_1_2_WREADY : STD_LOGIC;
    signal gmem1_1_2_ARVALID : STD_LOGIC;
    signal gmem1_1_2_ARREADY : STD_LOGIC;
    signal gmem1_1_2_RVALID : STD_LOGIC;
    signal gmem1_1_2_RREADY : STD_LOGIC;
    signal gmem1_1_2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_1_2_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_1_2_BVALID : STD_LOGIC;
    signal gmem1_2_0_AWREADY : STD_LOGIC;
    signal gmem1_2_0_WREADY : STD_LOGIC;
    signal gmem1_2_0_ARVALID : STD_LOGIC;
    signal gmem1_2_0_ARREADY : STD_LOGIC;
    signal gmem1_2_0_RVALID : STD_LOGIC;
    signal gmem1_2_0_RREADY : STD_LOGIC;
    signal gmem1_2_0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_2_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_2_0_BVALID : STD_LOGIC;
    signal gmem1_2_1_AWREADY : STD_LOGIC;
    signal gmem1_2_1_WREADY : STD_LOGIC;
    signal gmem1_2_1_ARVALID : STD_LOGIC;
    signal gmem1_2_1_ARREADY : STD_LOGIC;
    signal gmem1_2_1_RVALID : STD_LOGIC;
    signal gmem1_2_1_RREADY : STD_LOGIC;
    signal gmem1_2_1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_2_1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_2_1_BVALID : STD_LOGIC;
    signal gmem1_2_2_AWREADY : STD_LOGIC;
    signal gmem1_2_2_WREADY : STD_LOGIC;
    signal gmem1_2_2_ARVALID : STD_LOGIC;
    signal gmem1_2_2_ARREADY : STD_LOGIC;
    signal gmem1_2_2_RVALID : STD_LOGIC;
    signal gmem1_2_2_RREADY : STD_LOGIC;
    signal gmem1_2_2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_2_2_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_2_2_BVALID : STD_LOGIC;
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal empty_34_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage12_01001 : BOOLEAN;
    signal ap_block_pp0_stage13_01001 : BOOLEAN;
    signal ap_block_pp0_stage14_01001 : BOOLEAN;
    signal i_fu_166 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvars_iv_next_fu_485_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_500_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln18_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_cast_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln33_6_fu_544_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_6_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln33_6_fu_544_p2 : signal is "no";
    signal add_ln33_2_fu_540_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_2_fu_540_p2 : signal is "no";
    signal add_ln33_14_fu_617_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_641_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_14_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_14_fu_617_p2 : signal is "no";
    signal add_ln33_10_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_10_fu_613_p2 : signal is "no";
    signal add_ln33_22_fu_631_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_729_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_22_fu_631_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_22_fu_631_p2 : signal is "no";
    signal add_ln33_18_fu_627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln33_18_fu_627_p2 : signal is "no";
    signal grp_fu_641_ce : STD_LOGIC;
    signal grp_fu_648_ce : STD_LOGIC;
    signal grp_fu_653_ce : STD_LOGIC;
    signal grp_fu_659_ce : STD_LOGIC;
    signal grp_fu_666_ce : STD_LOGIC;
    signal grp_fu_673_ce : STD_LOGIC;
    signal grp_fu_679_ce : STD_LOGIC;
    signal grp_fu_685_ce : STD_LOGIC;
    signal grp_fu_691_ce : STD_LOGIC;
    signal grp_fu_697_ce : STD_LOGIC;
    signal grp_fu_703_ce : STD_LOGIC;
    signal grp_fu_709_ce : STD_LOGIC;
    signal grp_fu_714_ce : STD_LOGIC;
    signal grp_fu_722_ce : STD_LOGIC;
    signal grp_fu_729_ce : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component convolution_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolution_mac_muladd_8s_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolution_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component convolution_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_0_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_0_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_0_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_1_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_1_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_1_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_2_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_2_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        kernel_2_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component convolution_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_0_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_0_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_0_2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_1_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_1_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_1_2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_2_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_2_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem1_2_2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component convolution_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component convolution_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_r_s_axi_U : component convolution_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        kernel_0_0 => kernel_0_0,
        kernel_0_1 => kernel_0_1,
        kernel_0_2 => kernel_0_2,
        kernel_1_0 => kernel_1_0,
        kernel_1_1 => kernel_1_1,
        kernel_1_2 => kernel_1_2,
        kernel_2_0 => kernel_2_0,
        kernel_2_1 => kernel_2_1,
        kernel_2_2 => kernel_2_2,
        output_r => output_r);

    gmem0_m_axi_U : component convolution_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_addr_reg_882,
        I_ARLEN => ap_const_lv32_F,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_0_0_m_axi_U : component convolution_gmem1_0_0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_0_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_0_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_0_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_0_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_0_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_0_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_0_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_0_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_0_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_0_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_0_0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_0_0_AWVALID,
        AWREADY => m_axi_gmem1_0_0_AWREADY,
        AWADDR => m_axi_gmem1_0_0_AWADDR,
        AWID => m_axi_gmem1_0_0_AWID,
        AWLEN => m_axi_gmem1_0_0_AWLEN,
        AWSIZE => m_axi_gmem1_0_0_AWSIZE,
        AWBURST => m_axi_gmem1_0_0_AWBURST,
        AWLOCK => m_axi_gmem1_0_0_AWLOCK,
        AWCACHE => m_axi_gmem1_0_0_AWCACHE,
        AWPROT => m_axi_gmem1_0_0_AWPROT,
        AWQOS => m_axi_gmem1_0_0_AWQOS,
        AWREGION => m_axi_gmem1_0_0_AWREGION,
        AWUSER => m_axi_gmem1_0_0_AWUSER,
        WVALID => m_axi_gmem1_0_0_WVALID,
        WREADY => m_axi_gmem1_0_0_WREADY,
        WDATA => m_axi_gmem1_0_0_WDATA,
        WSTRB => m_axi_gmem1_0_0_WSTRB,
        WLAST => m_axi_gmem1_0_0_WLAST,
        WID => m_axi_gmem1_0_0_WID,
        WUSER => m_axi_gmem1_0_0_WUSER,
        ARVALID => m_axi_gmem1_0_0_ARVALID,
        ARREADY => m_axi_gmem1_0_0_ARREADY,
        ARADDR => m_axi_gmem1_0_0_ARADDR,
        ARID => m_axi_gmem1_0_0_ARID,
        ARLEN => m_axi_gmem1_0_0_ARLEN,
        ARSIZE => m_axi_gmem1_0_0_ARSIZE,
        ARBURST => m_axi_gmem1_0_0_ARBURST,
        ARLOCK => m_axi_gmem1_0_0_ARLOCK,
        ARCACHE => m_axi_gmem1_0_0_ARCACHE,
        ARPROT => m_axi_gmem1_0_0_ARPROT,
        ARQOS => m_axi_gmem1_0_0_ARQOS,
        ARREGION => m_axi_gmem1_0_0_ARREGION,
        ARUSER => m_axi_gmem1_0_0_ARUSER,
        RVALID => m_axi_gmem1_0_0_RVALID,
        RREADY => m_axi_gmem1_0_0_RREADY,
        RDATA => m_axi_gmem1_0_0_RDATA,
        RLAST => m_axi_gmem1_0_0_RLAST,
        RID => m_axi_gmem1_0_0_RID,
        RUSER => m_axi_gmem1_0_0_RUSER,
        RRESP => m_axi_gmem1_0_0_RRESP,
        BVALID => m_axi_gmem1_0_0_BVALID,
        BREADY => m_axi_gmem1_0_0_BREADY,
        BRESP => m_axi_gmem1_0_0_BRESP,
        BID => m_axi_gmem1_0_0_BID,
        BUSER => m_axi_gmem1_0_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_0_0_ARVALID,
        I_ARREADY => gmem1_0_0_ARREADY,
        I_ARADDR => gmem1_0_0_addr_reg_753,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_0_0_RVALID,
        I_RREADY => gmem1_0_0_RREADY,
        I_RDATA => gmem1_0_0_RDATA,
        I_RFIFONUM => gmem1_0_0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_0_0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_0_0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_0_0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_0_1_m_axi_U : component convolution_gmem1_0_1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_0_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_0_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_0_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_0_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_0_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_0_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_0_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_0_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_0_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_0_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_0_1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_0_1_AWVALID,
        AWREADY => m_axi_gmem1_0_1_AWREADY,
        AWADDR => m_axi_gmem1_0_1_AWADDR,
        AWID => m_axi_gmem1_0_1_AWID,
        AWLEN => m_axi_gmem1_0_1_AWLEN,
        AWSIZE => m_axi_gmem1_0_1_AWSIZE,
        AWBURST => m_axi_gmem1_0_1_AWBURST,
        AWLOCK => m_axi_gmem1_0_1_AWLOCK,
        AWCACHE => m_axi_gmem1_0_1_AWCACHE,
        AWPROT => m_axi_gmem1_0_1_AWPROT,
        AWQOS => m_axi_gmem1_0_1_AWQOS,
        AWREGION => m_axi_gmem1_0_1_AWREGION,
        AWUSER => m_axi_gmem1_0_1_AWUSER,
        WVALID => m_axi_gmem1_0_1_WVALID,
        WREADY => m_axi_gmem1_0_1_WREADY,
        WDATA => m_axi_gmem1_0_1_WDATA,
        WSTRB => m_axi_gmem1_0_1_WSTRB,
        WLAST => m_axi_gmem1_0_1_WLAST,
        WID => m_axi_gmem1_0_1_WID,
        WUSER => m_axi_gmem1_0_1_WUSER,
        ARVALID => m_axi_gmem1_0_1_ARVALID,
        ARREADY => m_axi_gmem1_0_1_ARREADY,
        ARADDR => m_axi_gmem1_0_1_ARADDR,
        ARID => m_axi_gmem1_0_1_ARID,
        ARLEN => m_axi_gmem1_0_1_ARLEN,
        ARSIZE => m_axi_gmem1_0_1_ARSIZE,
        ARBURST => m_axi_gmem1_0_1_ARBURST,
        ARLOCK => m_axi_gmem1_0_1_ARLOCK,
        ARCACHE => m_axi_gmem1_0_1_ARCACHE,
        ARPROT => m_axi_gmem1_0_1_ARPROT,
        ARQOS => m_axi_gmem1_0_1_ARQOS,
        ARREGION => m_axi_gmem1_0_1_ARREGION,
        ARUSER => m_axi_gmem1_0_1_ARUSER,
        RVALID => m_axi_gmem1_0_1_RVALID,
        RREADY => m_axi_gmem1_0_1_RREADY,
        RDATA => m_axi_gmem1_0_1_RDATA,
        RLAST => m_axi_gmem1_0_1_RLAST,
        RID => m_axi_gmem1_0_1_RID,
        RUSER => m_axi_gmem1_0_1_RUSER,
        RRESP => m_axi_gmem1_0_1_RRESP,
        BVALID => m_axi_gmem1_0_1_BVALID,
        BREADY => m_axi_gmem1_0_1_BREADY,
        BRESP => m_axi_gmem1_0_1_BRESP,
        BID => m_axi_gmem1_0_1_BID,
        BUSER => m_axi_gmem1_0_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_0_1_ARVALID,
        I_ARREADY => gmem1_0_1_ARREADY,
        I_ARADDR => gmem1_0_1_addr_reg_759,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_0_1_RVALID,
        I_RREADY => gmem1_0_1_RREADY,
        I_RDATA => gmem1_0_1_RDATA,
        I_RFIFONUM => gmem1_0_1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_0_1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_0_1_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_0_1_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_0_2_m_axi_U : component convolution_gmem1_0_2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_0_2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_0_2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_0_2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_0_2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_0_2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_0_2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_0_2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_0_2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_0_2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_0_2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_0_2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_0_2_AWVALID,
        AWREADY => m_axi_gmem1_0_2_AWREADY,
        AWADDR => m_axi_gmem1_0_2_AWADDR,
        AWID => m_axi_gmem1_0_2_AWID,
        AWLEN => m_axi_gmem1_0_2_AWLEN,
        AWSIZE => m_axi_gmem1_0_2_AWSIZE,
        AWBURST => m_axi_gmem1_0_2_AWBURST,
        AWLOCK => m_axi_gmem1_0_2_AWLOCK,
        AWCACHE => m_axi_gmem1_0_2_AWCACHE,
        AWPROT => m_axi_gmem1_0_2_AWPROT,
        AWQOS => m_axi_gmem1_0_2_AWQOS,
        AWREGION => m_axi_gmem1_0_2_AWREGION,
        AWUSER => m_axi_gmem1_0_2_AWUSER,
        WVALID => m_axi_gmem1_0_2_WVALID,
        WREADY => m_axi_gmem1_0_2_WREADY,
        WDATA => m_axi_gmem1_0_2_WDATA,
        WSTRB => m_axi_gmem1_0_2_WSTRB,
        WLAST => m_axi_gmem1_0_2_WLAST,
        WID => m_axi_gmem1_0_2_WID,
        WUSER => m_axi_gmem1_0_2_WUSER,
        ARVALID => m_axi_gmem1_0_2_ARVALID,
        ARREADY => m_axi_gmem1_0_2_ARREADY,
        ARADDR => m_axi_gmem1_0_2_ARADDR,
        ARID => m_axi_gmem1_0_2_ARID,
        ARLEN => m_axi_gmem1_0_2_ARLEN,
        ARSIZE => m_axi_gmem1_0_2_ARSIZE,
        ARBURST => m_axi_gmem1_0_2_ARBURST,
        ARLOCK => m_axi_gmem1_0_2_ARLOCK,
        ARCACHE => m_axi_gmem1_0_2_ARCACHE,
        ARPROT => m_axi_gmem1_0_2_ARPROT,
        ARQOS => m_axi_gmem1_0_2_ARQOS,
        ARREGION => m_axi_gmem1_0_2_ARREGION,
        ARUSER => m_axi_gmem1_0_2_ARUSER,
        RVALID => m_axi_gmem1_0_2_RVALID,
        RREADY => m_axi_gmem1_0_2_RREADY,
        RDATA => m_axi_gmem1_0_2_RDATA,
        RLAST => m_axi_gmem1_0_2_RLAST,
        RID => m_axi_gmem1_0_2_RID,
        RUSER => m_axi_gmem1_0_2_RUSER,
        RRESP => m_axi_gmem1_0_2_RRESP,
        BVALID => m_axi_gmem1_0_2_BVALID,
        BREADY => m_axi_gmem1_0_2_BREADY,
        BRESP => m_axi_gmem1_0_2_BRESP,
        BID => m_axi_gmem1_0_2_BID,
        BUSER => m_axi_gmem1_0_2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_0_2_ARVALID,
        I_ARREADY => gmem1_0_2_ARREADY,
        I_ARADDR => gmem1_0_2_addr_reg_765,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_0_2_RVALID,
        I_RREADY => gmem1_0_2_RREADY,
        I_RDATA => gmem1_0_2_RDATA,
        I_RFIFONUM => gmem1_0_2_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_0_2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_0_2_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_0_2_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_1_0_m_axi_U : component convolution_gmem1_1_0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_1_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_1_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_1_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_1_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_1_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_1_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_1_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_1_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_1_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_1_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_1_0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_1_0_AWVALID,
        AWREADY => m_axi_gmem1_1_0_AWREADY,
        AWADDR => m_axi_gmem1_1_0_AWADDR,
        AWID => m_axi_gmem1_1_0_AWID,
        AWLEN => m_axi_gmem1_1_0_AWLEN,
        AWSIZE => m_axi_gmem1_1_0_AWSIZE,
        AWBURST => m_axi_gmem1_1_0_AWBURST,
        AWLOCK => m_axi_gmem1_1_0_AWLOCK,
        AWCACHE => m_axi_gmem1_1_0_AWCACHE,
        AWPROT => m_axi_gmem1_1_0_AWPROT,
        AWQOS => m_axi_gmem1_1_0_AWQOS,
        AWREGION => m_axi_gmem1_1_0_AWREGION,
        AWUSER => m_axi_gmem1_1_0_AWUSER,
        WVALID => m_axi_gmem1_1_0_WVALID,
        WREADY => m_axi_gmem1_1_0_WREADY,
        WDATA => m_axi_gmem1_1_0_WDATA,
        WSTRB => m_axi_gmem1_1_0_WSTRB,
        WLAST => m_axi_gmem1_1_0_WLAST,
        WID => m_axi_gmem1_1_0_WID,
        WUSER => m_axi_gmem1_1_0_WUSER,
        ARVALID => m_axi_gmem1_1_0_ARVALID,
        ARREADY => m_axi_gmem1_1_0_ARREADY,
        ARADDR => m_axi_gmem1_1_0_ARADDR,
        ARID => m_axi_gmem1_1_0_ARID,
        ARLEN => m_axi_gmem1_1_0_ARLEN,
        ARSIZE => m_axi_gmem1_1_0_ARSIZE,
        ARBURST => m_axi_gmem1_1_0_ARBURST,
        ARLOCK => m_axi_gmem1_1_0_ARLOCK,
        ARCACHE => m_axi_gmem1_1_0_ARCACHE,
        ARPROT => m_axi_gmem1_1_0_ARPROT,
        ARQOS => m_axi_gmem1_1_0_ARQOS,
        ARREGION => m_axi_gmem1_1_0_ARREGION,
        ARUSER => m_axi_gmem1_1_0_ARUSER,
        RVALID => m_axi_gmem1_1_0_RVALID,
        RREADY => m_axi_gmem1_1_0_RREADY,
        RDATA => m_axi_gmem1_1_0_RDATA,
        RLAST => m_axi_gmem1_1_0_RLAST,
        RID => m_axi_gmem1_1_0_RID,
        RUSER => m_axi_gmem1_1_0_RUSER,
        RRESP => m_axi_gmem1_1_0_RRESP,
        BVALID => m_axi_gmem1_1_0_BVALID,
        BREADY => m_axi_gmem1_1_0_BREADY,
        BRESP => m_axi_gmem1_1_0_BRESP,
        BID => m_axi_gmem1_1_0_BID,
        BUSER => m_axi_gmem1_1_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_1_0_ARVALID,
        I_ARREADY => gmem1_1_0_ARREADY,
        I_ARADDR => gmem1_1_0_addr_reg_771,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_1_0_RVALID,
        I_RREADY => gmem1_1_0_RREADY,
        I_RDATA => gmem1_1_0_RDATA,
        I_RFIFONUM => gmem1_1_0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_1_0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_1_0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_1_0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_1_1_m_axi_U : component convolution_gmem1_1_1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_1_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_1_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_1_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_1_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_1_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_1_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_1_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_1_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_1_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_1_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_1_1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_1_1_AWVALID,
        AWREADY => m_axi_gmem1_1_1_AWREADY,
        AWADDR => m_axi_gmem1_1_1_AWADDR,
        AWID => m_axi_gmem1_1_1_AWID,
        AWLEN => m_axi_gmem1_1_1_AWLEN,
        AWSIZE => m_axi_gmem1_1_1_AWSIZE,
        AWBURST => m_axi_gmem1_1_1_AWBURST,
        AWLOCK => m_axi_gmem1_1_1_AWLOCK,
        AWCACHE => m_axi_gmem1_1_1_AWCACHE,
        AWPROT => m_axi_gmem1_1_1_AWPROT,
        AWQOS => m_axi_gmem1_1_1_AWQOS,
        AWREGION => m_axi_gmem1_1_1_AWREGION,
        AWUSER => m_axi_gmem1_1_1_AWUSER,
        WVALID => m_axi_gmem1_1_1_WVALID,
        WREADY => m_axi_gmem1_1_1_WREADY,
        WDATA => m_axi_gmem1_1_1_WDATA,
        WSTRB => m_axi_gmem1_1_1_WSTRB,
        WLAST => m_axi_gmem1_1_1_WLAST,
        WID => m_axi_gmem1_1_1_WID,
        WUSER => m_axi_gmem1_1_1_WUSER,
        ARVALID => m_axi_gmem1_1_1_ARVALID,
        ARREADY => m_axi_gmem1_1_1_ARREADY,
        ARADDR => m_axi_gmem1_1_1_ARADDR,
        ARID => m_axi_gmem1_1_1_ARID,
        ARLEN => m_axi_gmem1_1_1_ARLEN,
        ARSIZE => m_axi_gmem1_1_1_ARSIZE,
        ARBURST => m_axi_gmem1_1_1_ARBURST,
        ARLOCK => m_axi_gmem1_1_1_ARLOCK,
        ARCACHE => m_axi_gmem1_1_1_ARCACHE,
        ARPROT => m_axi_gmem1_1_1_ARPROT,
        ARQOS => m_axi_gmem1_1_1_ARQOS,
        ARREGION => m_axi_gmem1_1_1_ARREGION,
        ARUSER => m_axi_gmem1_1_1_ARUSER,
        RVALID => m_axi_gmem1_1_1_RVALID,
        RREADY => m_axi_gmem1_1_1_RREADY,
        RDATA => m_axi_gmem1_1_1_RDATA,
        RLAST => m_axi_gmem1_1_1_RLAST,
        RID => m_axi_gmem1_1_1_RID,
        RUSER => m_axi_gmem1_1_1_RUSER,
        RRESP => m_axi_gmem1_1_1_RRESP,
        BVALID => m_axi_gmem1_1_1_BVALID,
        BREADY => m_axi_gmem1_1_1_BREADY,
        BRESP => m_axi_gmem1_1_1_BRESP,
        BID => m_axi_gmem1_1_1_BID,
        BUSER => m_axi_gmem1_1_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_1_1_ARVALID,
        I_ARREADY => gmem1_1_1_ARREADY,
        I_ARADDR => gmem1_1_1_addr_reg_777,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_1_1_RVALID,
        I_RREADY => gmem1_1_1_RREADY,
        I_RDATA => gmem1_1_1_RDATA,
        I_RFIFONUM => gmem1_1_1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_1_1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_1_1_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_1_1_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_1_2_m_axi_U : component convolution_gmem1_1_2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_1_2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_1_2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_1_2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_1_2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_1_2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_1_2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_1_2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_1_2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_1_2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_1_2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_1_2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_1_2_AWVALID,
        AWREADY => m_axi_gmem1_1_2_AWREADY,
        AWADDR => m_axi_gmem1_1_2_AWADDR,
        AWID => m_axi_gmem1_1_2_AWID,
        AWLEN => m_axi_gmem1_1_2_AWLEN,
        AWSIZE => m_axi_gmem1_1_2_AWSIZE,
        AWBURST => m_axi_gmem1_1_2_AWBURST,
        AWLOCK => m_axi_gmem1_1_2_AWLOCK,
        AWCACHE => m_axi_gmem1_1_2_AWCACHE,
        AWPROT => m_axi_gmem1_1_2_AWPROT,
        AWQOS => m_axi_gmem1_1_2_AWQOS,
        AWREGION => m_axi_gmem1_1_2_AWREGION,
        AWUSER => m_axi_gmem1_1_2_AWUSER,
        WVALID => m_axi_gmem1_1_2_WVALID,
        WREADY => m_axi_gmem1_1_2_WREADY,
        WDATA => m_axi_gmem1_1_2_WDATA,
        WSTRB => m_axi_gmem1_1_2_WSTRB,
        WLAST => m_axi_gmem1_1_2_WLAST,
        WID => m_axi_gmem1_1_2_WID,
        WUSER => m_axi_gmem1_1_2_WUSER,
        ARVALID => m_axi_gmem1_1_2_ARVALID,
        ARREADY => m_axi_gmem1_1_2_ARREADY,
        ARADDR => m_axi_gmem1_1_2_ARADDR,
        ARID => m_axi_gmem1_1_2_ARID,
        ARLEN => m_axi_gmem1_1_2_ARLEN,
        ARSIZE => m_axi_gmem1_1_2_ARSIZE,
        ARBURST => m_axi_gmem1_1_2_ARBURST,
        ARLOCK => m_axi_gmem1_1_2_ARLOCK,
        ARCACHE => m_axi_gmem1_1_2_ARCACHE,
        ARPROT => m_axi_gmem1_1_2_ARPROT,
        ARQOS => m_axi_gmem1_1_2_ARQOS,
        ARREGION => m_axi_gmem1_1_2_ARREGION,
        ARUSER => m_axi_gmem1_1_2_ARUSER,
        RVALID => m_axi_gmem1_1_2_RVALID,
        RREADY => m_axi_gmem1_1_2_RREADY,
        RDATA => m_axi_gmem1_1_2_RDATA,
        RLAST => m_axi_gmem1_1_2_RLAST,
        RID => m_axi_gmem1_1_2_RID,
        RUSER => m_axi_gmem1_1_2_RUSER,
        RRESP => m_axi_gmem1_1_2_RRESP,
        BVALID => m_axi_gmem1_1_2_BVALID,
        BREADY => m_axi_gmem1_1_2_BREADY,
        BRESP => m_axi_gmem1_1_2_BRESP,
        BID => m_axi_gmem1_1_2_BID,
        BUSER => m_axi_gmem1_1_2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_1_2_ARVALID,
        I_ARREADY => gmem1_1_2_ARREADY,
        I_ARADDR => gmem1_1_2_addr_reg_783,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_1_2_RVALID,
        I_RREADY => gmem1_1_2_RREADY,
        I_RDATA => gmem1_1_2_RDATA,
        I_RFIFONUM => gmem1_1_2_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_1_2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_1_2_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_1_2_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_2_0_m_axi_U : component convolution_gmem1_2_0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_2_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_2_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_2_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_2_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_2_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_2_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_2_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_2_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_2_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_2_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_2_0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_2_0_AWVALID,
        AWREADY => m_axi_gmem1_2_0_AWREADY,
        AWADDR => m_axi_gmem1_2_0_AWADDR,
        AWID => m_axi_gmem1_2_0_AWID,
        AWLEN => m_axi_gmem1_2_0_AWLEN,
        AWSIZE => m_axi_gmem1_2_0_AWSIZE,
        AWBURST => m_axi_gmem1_2_0_AWBURST,
        AWLOCK => m_axi_gmem1_2_0_AWLOCK,
        AWCACHE => m_axi_gmem1_2_0_AWCACHE,
        AWPROT => m_axi_gmem1_2_0_AWPROT,
        AWQOS => m_axi_gmem1_2_0_AWQOS,
        AWREGION => m_axi_gmem1_2_0_AWREGION,
        AWUSER => m_axi_gmem1_2_0_AWUSER,
        WVALID => m_axi_gmem1_2_0_WVALID,
        WREADY => m_axi_gmem1_2_0_WREADY,
        WDATA => m_axi_gmem1_2_0_WDATA,
        WSTRB => m_axi_gmem1_2_0_WSTRB,
        WLAST => m_axi_gmem1_2_0_WLAST,
        WID => m_axi_gmem1_2_0_WID,
        WUSER => m_axi_gmem1_2_0_WUSER,
        ARVALID => m_axi_gmem1_2_0_ARVALID,
        ARREADY => m_axi_gmem1_2_0_ARREADY,
        ARADDR => m_axi_gmem1_2_0_ARADDR,
        ARID => m_axi_gmem1_2_0_ARID,
        ARLEN => m_axi_gmem1_2_0_ARLEN,
        ARSIZE => m_axi_gmem1_2_0_ARSIZE,
        ARBURST => m_axi_gmem1_2_0_ARBURST,
        ARLOCK => m_axi_gmem1_2_0_ARLOCK,
        ARCACHE => m_axi_gmem1_2_0_ARCACHE,
        ARPROT => m_axi_gmem1_2_0_ARPROT,
        ARQOS => m_axi_gmem1_2_0_ARQOS,
        ARREGION => m_axi_gmem1_2_0_ARREGION,
        ARUSER => m_axi_gmem1_2_0_ARUSER,
        RVALID => m_axi_gmem1_2_0_RVALID,
        RREADY => m_axi_gmem1_2_0_RREADY,
        RDATA => m_axi_gmem1_2_0_RDATA,
        RLAST => m_axi_gmem1_2_0_RLAST,
        RID => m_axi_gmem1_2_0_RID,
        RUSER => m_axi_gmem1_2_0_RUSER,
        RRESP => m_axi_gmem1_2_0_RRESP,
        BVALID => m_axi_gmem1_2_0_BVALID,
        BREADY => m_axi_gmem1_2_0_BREADY,
        BRESP => m_axi_gmem1_2_0_BRESP,
        BID => m_axi_gmem1_2_0_BID,
        BUSER => m_axi_gmem1_2_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_2_0_ARVALID,
        I_ARREADY => gmem1_2_0_ARREADY,
        I_ARADDR => gmem1_2_0_addr_reg_789,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_2_0_RVALID,
        I_RREADY => gmem1_2_0_RREADY,
        I_RDATA => gmem1_2_0_RDATA,
        I_RFIFONUM => gmem1_2_0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_2_0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_2_0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_2_0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_2_1_m_axi_U : component convolution_gmem1_2_1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_2_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_2_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_2_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_2_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_2_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_2_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_2_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_2_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_2_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_2_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_2_1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_2_1_AWVALID,
        AWREADY => m_axi_gmem1_2_1_AWREADY,
        AWADDR => m_axi_gmem1_2_1_AWADDR,
        AWID => m_axi_gmem1_2_1_AWID,
        AWLEN => m_axi_gmem1_2_1_AWLEN,
        AWSIZE => m_axi_gmem1_2_1_AWSIZE,
        AWBURST => m_axi_gmem1_2_1_AWBURST,
        AWLOCK => m_axi_gmem1_2_1_AWLOCK,
        AWCACHE => m_axi_gmem1_2_1_AWCACHE,
        AWPROT => m_axi_gmem1_2_1_AWPROT,
        AWQOS => m_axi_gmem1_2_1_AWQOS,
        AWREGION => m_axi_gmem1_2_1_AWREGION,
        AWUSER => m_axi_gmem1_2_1_AWUSER,
        WVALID => m_axi_gmem1_2_1_WVALID,
        WREADY => m_axi_gmem1_2_1_WREADY,
        WDATA => m_axi_gmem1_2_1_WDATA,
        WSTRB => m_axi_gmem1_2_1_WSTRB,
        WLAST => m_axi_gmem1_2_1_WLAST,
        WID => m_axi_gmem1_2_1_WID,
        WUSER => m_axi_gmem1_2_1_WUSER,
        ARVALID => m_axi_gmem1_2_1_ARVALID,
        ARREADY => m_axi_gmem1_2_1_ARREADY,
        ARADDR => m_axi_gmem1_2_1_ARADDR,
        ARID => m_axi_gmem1_2_1_ARID,
        ARLEN => m_axi_gmem1_2_1_ARLEN,
        ARSIZE => m_axi_gmem1_2_1_ARSIZE,
        ARBURST => m_axi_gmem1_2_1_ARBURST,
        ARLOCK => m_axi_gmem1_2_1_ARLOCK,
        ARCACHE => m_axi_gmem1_2_1_ARCACHE,
        ARPROT => m_axi_gmem1_2_1_ARPROT,
        ARQOS => m_axi_gmem1_2_1_ARQOS,
        ARREGION => m_axi_gmem1_2_1_ARREGION,
        ARUSER => m_axi_gmem1_2_1_ARUSER,
        RVALID => m_axi_gmem1_2_1_RVALID,
        RREADY => m_axi_gmem1_2_1_RREADY,
        RDATA => m_axi_gmem1_2_1_RDATA,
        RLAST => m_axi_gmem1_2_1_RLAST,
        RID => m_axi_gmem1_2_1_RID,
        RUSER => m_axi_gmem1_2_1_RUSER,
        RRESP => m_axi_gmem1_2_1_RRESP,
        BVALID => m_axi_gmem1_2_1_BVALID,
        BREADY => m_axi_gmem1_2_1_BREADY,
        BRESP => m_axi_gmem1_2_1_BRESP,
        BID => m_axi_gmem1_2_1_BID,
        BUSER => m_axi_gmem1_2_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_2_1_ARVALID,
        I_ARREADY => gmem1_2_1_ARREADY,
        I_ARADDR => gmem1_2_1_addr_reg_795,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_2_1_RVALID,
        I_RREADY => gmem1_2_1_RREADY,
        I_RDATA => gmem1_2_1_RDATA,
        I_RFIFONUM => gmem1_2_1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_2_1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_2_1_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_2_1_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_2_2_m_axi_U : component convolution_gmem1_2_2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_2_2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_2_2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_2_2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_2_2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_2_2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_2_2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_2_2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_2_2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_2_2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_2_2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_2_2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_2_2_AWVALID,
        AWREADY => m_axi_gmem1_2_2_AWREADY,
        AWADDR => m_axi_gmem1_2_2_AWADDR,
        AWID => m_axi_gmem1_2_2_AWID,
        AWLEN => m_axi_gmem1_2_2_AWLEN,
        AWSIZE => m_axi_gmem1_2_2_AWSIZE,
        AWBURST => m_axi_gmem1_2_2_AWBURST,
        AWLOCK => m_axi_gmem1_2_2_AWLOCK,
        AWCACHE => m_axi_gmem1_2_2_AWCACHE,
        AWPROT => m_axi_gmem1_2_2_AWPROT,
        AWQOS => m_axi_gmem1_2_2_AWQOS,
        AWREGION => m_axi_gmem1_2_2_AWREGION,
        AWUSER => m_axi_gmem1_2_2_AWUSER,
        WVALID => m_axi_gmem1_2_2_WVALID,
        WREADY => m_axi_gmem1_2_2_WREADY,
        WDATA => m_axi_gmem1_2_2_WDATA,
        WSTRB => m_axi_gmem1_2_2_WSTRB,
        WLAST => m_axi_gmem1_2_2_WLAST,
        WID => m_axi_gmem1_2_2_WID,
        WUSER => m_axi_gmem1_2_2_WUSER,
        ARVALID => m_axi_gmem1_2_2_ARVALID,
        ARREADY => m_axi_gmem1_2_2_ARREADY,
        ARADDR => m_axi_gmem1_2_2_ARADDR,
        ARID => m_axi_gmem1_2_2_ARID,
        ARLEN => m_axi_gmem1_2_2_ARLEN,
        ARSIZE => m_axi_gmem1_2_2_ARSIZE,
        ARBURST => m_axi_gmem1_2_2_ARBURST,
        ARLOCK => m_axi_gmem1_2_2_ARLOCK,
        ARCACHE => m_axi_gmem1_2_2_ARCACHE,
        ARPROT => m_axi_gmem1_2_2_ARPROT,
        ARQOS => m_axi_gmem1_2_2_ARQOS,
        ARREGION => m_axi_gmem1_2_2_ARREGION,
        ARUSER => m_axi_gmem1_2_2_ARUSER,
        RVALID => m_axi_gmem1_2_2_RVALID,
        RREADY => m_axi_gmem1_2_2_RREADY,
        RDATA => m_axi_gmem1_2_2_RDATA,
        RLAST => m_axi_gmem1_2_2_RLAST,
        RID => m_axi_gmem1_2_2_RID,
        RUSER => m_axi_gmem1_2_2_RUSER,
        RRESP => m_axi_gmem1_2_2_RRESP,
        BVALID => m_axi_gmem1_2_2_BVALID,
        BREADY => m_axi_gmem1_2_2_BREADY,
        BRESP => m_axi_gmem1_2_2_BRESP,
        BID => m_axi_gmem1_2_2_BID,
        BUSER => m_axi_gmem1_2_2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_2_2_ARVALID,
        I_ARREADY => gmem1_2_2_ARREADY,
        I_ARADDR => gmem1_2_2_addr_reg_801,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_2_2_RVALID,
        I_RREADY => gmem1_2_2_RREADY,
        I_RDATA => gmem1_2_2_RDATA,
        I_RFIFONUM => gmem1_2_2_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_2_2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_2_2_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_2_2_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem2_m_axi_U : component convolution_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RFIFONUM => gmem2_RFIFONUM,
        I_AWVALID => gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => gmem2_addr_reg_874_pp0_iter1_reg,
        I_AWLEN => ap_const_lv32_9,
        I_WVALID => gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => gmem2_WDATA,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => gmem2_BVALID,
        I_BREADY => gmem2_BREADY);

    mul_8s_8s_8_1_1_U1 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_0_1_addr_read_reg_814,
        din1 => reg_405,
        dout => mul_ln26_fu_554_p2);

    mul_8s_8s_8_1_1_U2 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_0_2_addr_read_reg_821,
        din1 => reg_409,
        dout => mul_ln27_fu_559_p2);

    mul_8s_8s_8_1_1_U3 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_0_1_addr_read_reg_814,
        din1 => reg_409,
        dout => mul_ln26_1_fu_564_p2);

    mul_8s_8s_8_1_1_U4 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_0_2_addr_read_reg_821,
        din1 => reg_413,
        dout => mul_ln27_1_fu_569_p2);

    mul_8s_8s_8_1_1_U5 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_0_1_addr_read_reg_814,
        din1 => reg_413,
        dout => mul_ln26_2_fu_574_p2);

    mul_8s_8s_8_1_1_U6 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_1_1_addr_read_reg_835,
        din1 => reg_409,
        dout => mul_ln29_fu_579_p2);

    mul_8s_8s_8_1_1_U7 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_1_1_addr_read_reg_835,
        din1 => reg_413,
        dout => mul_ln29_1_fu_584_p2);

    mul_8s_8s_8_1_1_U8 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_0_2_addr_read_reg_821,
        din1 => reg_401,
        dout => mul_ln27_2_fu_589_p2);

    mul_8s_8s_8_1_1_U9 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_1_1_addr_read_reg_835,
        din1 => reg_405,
        dout => mul_ln29_2_fu_594_p2);

    mul_8s_8s_8_1_1_U10 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_2_1_addr_read_reg_856,
        din1 => reg_413,
        dout => mul_ln32_fu_599_p2);

    mul_8s_8s_8_1_1_U11 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_2_1_addr_read_reg_856,
        din1 => gmem0_addr_read_12_reg_982,
        dout => mul_ln32_1_fu_604_p2);

    mul_8s_8s_8_1_1_U12 : component convolution_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => gmem1_2_1_addr_read_reg_856,
        din1 => reg_405,
        dout => mul_ln32_2_fu_608_p2);

    mac_muladd_8s_8s_8ns_8_4_1_U13 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_2_0_addr_read_reg_849,
        din1 => reg_413,
        din2 => grp_fu_722_p3,
        ce => grp_fu_641_ce,
        dout => grp_fu_641_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U14 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_2_2_addr_read_reg_863,
        din1 => gmem0_addr_read_14_reg_1009,
        din2 => mul_ln32_2_reg_1014,
        ce => grp_fu_648_ce,
        dout => grp_fu_648_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U15 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_0_0_addr_read_reg_807,
        din1 => reg_401,
        din2 => mul_ln26_reg_902,
        ce => grp_fu_653_ce,
        dout => grp_fu_653_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U16 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_0_0_addr_read_reg_807,
        din1 => reg_405,
        din2 => mul_ln26_1_fu_564_p2,
        ce => grp_fu_659_ce,
        dout => grp_fu_659_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U17 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_0_0_addr_read_reg_807,
        din1 => reg_409,
        din2 => mul_ln26_2_fu_574_p2,
        ce => grp_fu_666_ce,
        dout => grp_fu_666_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U18 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_1_0_addr_read_reg_828,
        din1 => reg_405,
        din2 => mul_ln27_reg_907,
        ce => grp_fu_673_ce,
        dout => grp_fu_673_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U19 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_1_0_addr_read_reg_828,
        din1 => reg_409,
        din2 => mul_ln27_1_reg_922,
        ce => grp_fu_679_ce,
        dout => grp_fu_679_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U20 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_1_2_addr_read_reg_842,
        din1 => reg_413,
        din2 => mul_ln29_reg_937,
        ce => grp_fu_685_ce,
        dout => grp_fu_685_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U21 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_1_0_addr_read_reg_828,
        din1 => reg_413,
        din2 => mul_ln27_2_reg_957,
        ce => grp_fu_691_ce,
        dout => grp_fu_691_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U22 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_1_2_addr_read_reg_842,
        din1 => reg_405,
        din2 => mul_ln29_1_reg_947,
        ce => grp_fu_697_ce,
        dout => grp_fu_697_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U23 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_1_2_addr_read_reg_842,
        din1 => reg_401,
        din2 => mul_ln29_2_reg_967,
        ce => grp_fu_703_ce,
        dout => grp_fu_703_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U24 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_2_2_addr_read_reg_863,
        din1 => gmem0_addr_read_12_reg_982,
        din2 => mul_ln32_reg_989,
        ce => grp_fu_709_ce,
        dout => grp_fu_709_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U25 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_2_0_addr_read_reg_849,
        din1 => reg_409,
        din2 => grp_fu_709_p3,
        ce => grp_fu_714_ce,
        dout => grp_fu_714_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U26 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_2_2_addr_read_reg_863,
        din1 => reg_405,
        din2 => mul_ln32_1_reg_999,
        ce => grp_fu_722_ce,
        dout => grp_fu_722_p3);

    mac_muladd_8s_8s_8ns_8_4_1_U27 : component convolution_mac_muladd_8s_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem1_2_0_addr_read_reg_849,
        din1 => gmem0_addr_read_12_reg_982,
        din2 => grp_fu_648_p3,
        ce => grp_fu_729_ce,
        dout => grp_fu_729_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                first_iter_0_reg_388 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_iter_0_reg_388 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_166 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_479_p2 = ap_const_lv1_0))) then 
                i_fu_166 <= indvars_iv_next_fu_485_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln33_11_reg_994 <= grp_fu_697_p3;
                gmem0_addr_read_12_reg_982 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln33_16_reg_942 <= grp_fu_666_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln33_17_reg_977 <= grp_fu_691_p3;
                add_ln33_3_reg_972 <= grp_fu_685_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln33_19_reg_1004 <= grp_fu_703_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln33_1_reg_952 <= grp_fu_673_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                add_ln33_8_reg_927 <= grp_fu_659_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln33_9_reg_962 <= grp_fu_679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                add_ln33_reg_912 <= grp_fu_653_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                first_iter_0_reg_388_pp0_iter1_reg <= first_iter_0_reg_388;
                gmem0_addr_reg_882 <= empty_34_fu_517_p2;
                gmem2_addr_reg_874 <= output_r_read_reg_743;
                gmem2_addr_reg_874_pp0_iter1_reg <= gmem2_addr_reg_874;
                icmp_ln18_1_reg_888 <= icmp_ln18_1_fu_529_p2;
                icmp_ln18_1_reg_888_pp0_iter1_reg <= icmp_ln18_1_reg_888;
                icmp_ln18_1_reg_888_pp0_iter2_reg <= icmp_ln18_1_reg_888_pp0_iter1_reg;
                icmp_ln18_reg_870 <= icmp_ln18_fu_479_p2;
                icmp_ln18_reg_870_pp0_iter1_reg <= icmp_ln18_reg_870;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                gmem0_addr_read_14_reg_1009 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                gmem1_0_0_addr_read_reg_807 <= gmem1_0_0_RDATA;
                gmem1_0_1_addr_read_reg_814 <= gmem1_0_1_RDATA;
                gmem1_0_2_addr_read_reg_821 <= gmem1_0_2_RDATA;
                gmem1_1_0_addr_read_reg_828 <= gmem1_1_0_RDATA;
                gmem1_1_1_addr_read_reg_835 <= gmem1_1_1_RDATA;
                gmem1_1_2_addr_read_reg_842 <= gmem1_1_2_RDATA;
                gmem1_2_0_addr_read_reg_849 <= gmem1_2_0_RDATA;
                gmem1_2_1_addr_read_reg_856 <= gmem1_2_1_RDATA;
                gmem1_2_2_addr_read_reg_863 <= gmem1_2_2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem1_0_0_addr_reg_753 <= kernel_0_0;
                gmem1_0_1_addr_reg_759 <= kernel_0_1;
                gmem1_0_2_addr_reg_765 <= kernel_0_2;
                gmem1_1_0_addr_reg_771 <= kernel_1_0;
                gmem1_1_1_addr_reg_777 <= kernel_1_1;
                gmem1_1_2_addr_reg_783 <= kernel_1_2;
                gmem1_2_0_addr_reg_789 <= kernel_2_0;
                gmem1_2_1_addr_reg_795 <= kernel_2_1;
                gmem1_2_2_addr_reg_801 <= kernel_2_2;
                input_r_read_reg_748 <= input_r;
                output_r_read_reg_743 <= output_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                mul_ln26_reg_902 <= mul_ln26_fu_554_p2;
                sum_1_reg_892 <= sum_1_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                mul_ln27_1_reg_922 <= mul_ln27_1_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln27_2_reg_957 <= mul_ln27_2_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                mul_ln27_reg_907 <= mul_ln27_fu_559_p2;
                sum_3_reg_1024 <= sum_3_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln29_1_reg_947 <= mul_ln29_1_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln29_2_reg_967 <= mul_ln29_2_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln29_reg_937 <= mul_ln29_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_ln32_1_reg_999 <= mul_ln32_1_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul_ln32_2_reg_1014 <= mul_ln32_2_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul_ln32_reg_989 <= mul_ln32_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_401 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then
                reg_405 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)))) then
                reg_409 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then
                reg_413 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                sum_5_reg_1034 <= sum_5_fu_635_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_enable_reg_pp0_iter2, icmp_ln18_fu_479_p2, ap_block_state10, ap_block_pp0_stage0_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage4_subdone, ap_block_state2_io, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_479_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_479_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln33_10_fu_613_p2 <= std_logic_vector(signed(add_ln33_9_reg_962) + signed(add_ln33_8_reg_927));
    add_ln33_14_fu_617_p0 <= grp_fu_641_p3;
    add_ln33_14_fu_617_p2 <= std_logic_vector(signed(add_ln33_14_fu_617_p0) + signed(add_ln33_11_reg_994));
    add_ln33_18_fu_627_p2 <= std_logic_vector(signed(add_ln33_17_reg_977) + signed(add_ln33_16_reg_942));
    add_ln33_22_fu_631_p0 <= grp_fu_729_p3;
    add_ln33_22_fu_631_p2 <= std_logic_vector(signed(add_ln33_22_fu_631_p0) + signed(add_ln33_19_reg_1004));
    add_ln33_2_fu_540_p2 <= std_logic_vector(signed(add_ln33_1_reg_952) + signed(add_ln33_reg_912));
    add_ln33_6_fu_544_p0 <= grp_fu_714_p3;
    add_ln33_6_fu_544_p2 <= std_logic_vector(signed(add_ln33_6_fu_544_p0) + signed(add_ln33_3_reg_972));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state46 <= ap_CS_fsm(25);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10)
    begin
        if ((ap_const_boolean_1 = ap_block_state10)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state27_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state27_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state27_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state27_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state22_pp0_stage10_iter0)
    begin
                ap_block_pp0_stage10_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_pp0_stage10_iter0));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state22_pp0_stage10_iter0)
    begin
                ap_block_pp0_stage10_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_pp0_stage10_iter0));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state23_pp0_stage11_iter0, ap_block_state12_io)
    begin
                ap_block_pp0_stage11_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_pp0_stage11_iter0)));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state23_pp0_stage11_iter0, ap_block_state12_io)
    begin
                ap_block_pp0_stage11_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_pp0_stage11_iter0)));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state24_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp0_stage12_iter0));
    end process;


    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, gmem2_WREADY, ap_block_state24_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_11001 <= (((gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp0_stage12_iter0)));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, gmem2_WREADY, ap_block_state24_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_subdone <= (((gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp0_stage12_iter0)));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state25_pp0_stage13_iter0)
    begin
                ap_block_pp0_stage13_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage13_iter0));
    end process;


    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state25_pp0_stage13_iter0, gmem2_WREADY)
    begin
                ap_block_pp0_stage13_11001 <= (((gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage13_iter0)));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state25_pp0_stage13_iter0, gmem2_WREADY)
    begin
                ap_block_pp0_stage13_subdone <= (((gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage13_iter0)));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state26_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_pp0_stage14_iter0));
    end process;


    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, gmem2_WREADY, ap_block_state26_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_11001 <= (((gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_pp0_stage14_iter0)));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, gmem2_WREADY, ap_block_state26_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_subdone <= (((gmem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_pp0_stage14_iter0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state13_io, ap_block_state28_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state28_pp0_stage1_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state13_io, ap_block_state28_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state28_pp0_stage1_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state29_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state29_pp0_stage2_iter1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state29_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state29_pp0_stage2_iter1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state30_pp0_stage3_iter1)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state30_pp0_stage3_iter1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state30_pp0_stage3_iter1)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state30_pp0_stage3_iter1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state31_pp0_stage4_iter1, ap_block_state45_pp0_stage4_iter2)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state45_pp0_stage4_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state31_pp0_stage4_iter1)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state31_pp0_stage4_iter1, ap_block_state45_pp0_stage4_iter2)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state45_pp0_stage4_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state31_pp0_stage4_iter1)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state32_pp0_stage5_iter1)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state32_pp0_stage5_iter1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state32_pp0_stage5_iter1)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state32_pp0_stage5_iter1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state33_pp0_stage6_iter1)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state33_pp0_stage6_iter1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state33_pp0_stage6_iter1)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state33_pp0_stage6_iter1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state34_pp0_stage7_iter1)
    begin
                ap_block_pp0_stage7_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state34_pp0_stage7_iter1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state34_pp0_stage7_iter1)
    begin
                ap_block_pp0_stage7_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state34_pp0_stage7_iter1));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state35_pp0_stage8_iter1)
    begin
                ap_block_pp0_stage8_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state35_pp0_stage8_iter1));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state35_pp0_stage8_iter1)
    begin
                ap_block_pp0_stage8_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state35_pp0_stage8_iter1));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state21_pp0_stage9_iter0)
    begin
                ap_block_pp0_stage9_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_pp0_stage9_iter0));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state21_pp0_stage9_iter0)
    begin
                ap_block_pp0_stage9_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_pp0_stage9_iter0));
    end process;


    ap_block_state10_assign_proc : process(gmem1_0_0_RVALID, gmem1_0_1_RVALID, gmem1_0_2_RVALID, gmem1_1_0_RVALID, gmem1_1_1_RVALID, gmem1_1_2_RVALID, gmem1_2_0_RVALID, gmem1_2_1_RVALID, gmem1_2_2_RVALID)
    begin
                ap_block_state10 <= ((gmem1_2_2_RVALID = ap_const_logic_0) or (gmem1_2_1_RVALID = ap_const_logic_0) or (gmem1_2_0_RVALID = ap_const_logic_0) or (gmem1_1_2_RVALID = ap_const_logic_0) or (gmem1_1_1_RVALID = ap_const_logic_0) or (gmem1_1_0_RVALID = ap_const_logic_0) or (gmem1_0_2_RVALID = ap_const_logic_0) or (gmem1_0_1_RVALID = ap_const_logic_0) or (gmem1_0_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_io_assign_proc : process(gmem2_AWREADY, ap_predicate_op214_writereq_state12)
    begin
                ap_block_state12_io <= ((gmem2_AWREADY = ap_const_logic_0) and (ap_predicate_op214_writereq_state12 = ap_const_boolean_1));
    end process;


    ap_block_state13_io_assign_proc : process(icmp_ln18_reg_870, gmem0_ARREADY)
    begin
                ap_block_state13_io <= ((gmem0_ARREADY = ap_const_logic_0) and (icmp_ln18_reg_870 = ap_const_lv1_0));
    end process;


    ap_block_state21_pp0_stage9_iter0_assign_proc : process(icmp_ln18_reg_870, gmem0_RVALID)
    begin
                ap_block_state21_pp0_stage9_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln18_reg_870 = ap_const_lv1_0));
    end process;


    ap_block_state22_pp0_stage10_iter0_assign_proc : process(icmp_ln18_reg_870, gmem0_RVALID)
    begin
                ap_block_state22_pp0_stage10_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln18_reg_870 = ap_const_lv1_0));
    end process;


    ap_block_state23_pp0_stage11_iter0_assign_proc : process(icmp_ln18_reg_870, gmem0_RVALID)
    begin
                ap_block_state23_pp0_stage11_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln18_reg_870 = ap_const_lv1_0));
    end process;


    ap_block_state24_pp0_stage12_iter0_assign_proc : process(icmp_ln18_reg_870, gmem0_RVALID)
    begin
                ap_block_state24_pp0_stage12_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln18_reg_870 = ap_const_lv1_0));
    end process;


    ap_block_state25_pp0_stage13_iter0_assign_proc : process(icmp_ln18_reg_870, gmem0_RVALID)
    begin
                ap_block_state25_pp0_stage13_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln18_reg_870 = ap_const_lv1_0));
    end process;


    ap_block_state26_pp0_stage14_iter0_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state26_pp0_stage14_iter0 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state27_pp0_stage0_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state27_pp0_stage0_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state28_pp0_stage1_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state28_pp0_stage1_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state29_pp0_stage2_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state29_pp0_stage2_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state2_io_assign_proc : process(gmem1_0_0_ARREADY, gmem1_0_1_ARREADY, gmem1_0_2_ARREADY, gmem1_1_0_ARREADY, gmem1_1_1_ARREADY, gmem1_1_2_ARREADY, gmem1_2_0_ARREADY, gmem1_2_1_ARREADY, gmem1_2_2_ARREADY)
    begin
                ap_block_state2_io <= ((gmem1_2_2_ARREADY = ap_const_logic_0) or (gmem1_2_1_ARREADY = ap_const_logic_0) or (gmem1_2_0_ARREADY = ap_const_logic_0) or (gmem1_1_2_ARREADY = ap_const_logic_0) or (gmem1_1_1_ARREADY = ap_const_logic_0) or (gmem1_1_0_ARREADY = ap_const_logic_0) or (gmem1_0_2_ARREADY = ap_const_logic_0) or (gmem1_0_1_ARREADY = ap_const_logic_0) or (gmem1_0_0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state30_pp0_stage3_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state30_pp0_stage3_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state31_pp0_stage4_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state31_pp0_stage4_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state32_pp0_stage5_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state32_pp0_stage5_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state33_pp0_stage6_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state33_pp0_stage6_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state34_pp0_stage7_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state34_pp0_stage7_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state35_pp0_stage8_iter1_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state35_pp0_stage8_iter1 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state45_pp0_stage4_iter2_assign_proc : process(icmp_ln18_1_reg_888_pp0_iter2_reg, gmem2_BVALID)
    begin
                ap_block_state45_pp0_stage4_iter2 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln18_1_reg_888_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state11_assign_proc : process(icmp_ln18_fu_479_p2)
    begin
        if ((icmp_ln18_fu_479_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op214_writereq_state12_assign_proc : process(icmp_ln18_reg_870_pp0_iter1_reg, first_iter_0_reg_388_pp0_iter1_reg)
    begin
                ap_predicate_op214_writereq_state12 <= ((first_iter_0_reg_388_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln18_reg_870_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_34_fu_517_p2 <= std_logic_vector(unsigned(tmp_fu_512_p2) + unsigned(p_shl_cast_fu_508_p1));

    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln18_reg_870, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln18_reg_870, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln18_reg_870)
    begin
        if (((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln18_reg_870, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 
    = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 
    = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((icmp_ln18_reg_870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_0_0_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_0_0_ARVALID <= ap_const_logic_1;
        else 
            gmem1_0_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_0_0_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_0_0_RREADY <= ap_const_logic_1;
        else 
            gmem1_0_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_0_0_blk_n_AR_assign_proc : process(m_axi_gmem1_0_0_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_0_0_blk_n_AR <= m_axi_gmem1_0_0_ARREADY;
        else 
            gmem1_0_0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_0_0_blk_n_R_assign_proc : process(m_axi_gmem1_0_0_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_0_0_blk_n_R <= m_axi_gmem1_0_0_RVALID;
        else 
            gmem1_0_0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_0_1_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_0_1_ARVALID <= ap_const_logic_1;
        else 
            gmem1_0_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_0_1_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_0_1_RREADY <= ap_const_logic_1;
        else 
            gmem1_0_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_0_1_blk_n_AR_assign_proc : process(m_axi_gmem1_0_1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_0_1_blk_n_AR <= m_axi_gmem1_0_1_ARREADY;
        else 
            gmem1_0_1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_0_1_blk_n_R_assign_proc : process(m_axi_gmem1_0_1_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_0_1_blk_n_R <= m_axi_gmem1_0_1_RVALID;
        else 
            gmem1_0_1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_0_2_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_0_2_ARVALID <= ap_const_logic_1;
        else 
            gmem1_0_2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_0_2_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_0_2_RREADY <= ap_const_logic_1;
        else 
            gmem1_0_2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_0_2_blk_n_AR_assign_proc : process(m_axi_gmem1_0_2_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_0_2_blk_n_AR <= m_axi_gmem1_0_2_ARREADY;
        else 
            gmem1_0_2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_0_2_blk_n_R_assign_proc : process(m_axi_gmem1_0_2_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_0_2_blk_n_R <= m_axi_gmem1_0_2_RVALID;
        else 
            gmem1_0_2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_1_0_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_1_0_ARVALID <= ap_const_logic_1;
        else 
            gmem1_1_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_1_0_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_1_0_RREADY <= ap_const_logic_1;
        else 
            gmem1_1_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_1_0_blk_n_AR_assign_proc : process(m_axi_gmem1_1_0_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_1_0_blk_n_AR <= m_axi_gmem1_1_0_ARREADY;
        else 
            gmem1_1_0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_1_0_blk_n_R_assign_proc : process(m_axi_gmem1_1_0_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_1_0_blk_n_R <= m_axi_gmem1_1_0_RVALID;
        else 
            gmem1_1_0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_1_1_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_1_1_ARVALID <= ap_const_logic_1;
        else 
            gmem1_1_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_1_1_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_1_1_RREADY <= ap_const_logic_1;
        else 
            gmem1_1_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_1_1_blk_n_AR_assign_proc : process(m_axi_gmem1_1_1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_1_1_blk_n_AR <= m_axi_gmem1_1_1_ARREADY;
        else 
            gmem1_1_1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_1_1_blk_n_R_assign_proc : process(m_axi_gmem1_1_1_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_1_1_blk_n_R <= m_axi_gmem1_1_1_RVALID;
        else 
            gmem1_1_1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_1_2_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_1_2_ARVALID <= ap_const_logic_1;
        else 
            gmem1_1_2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_1_2_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_1_2_RREADY <= ap_const_logic_1;
        else 
            gmem1_1_2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_1_2_blk_n_AR_assign_proc : process(m_axi_gmem1_1_2_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_1_2_blk_n_AR <= m_axi_gmem1_1_2_ARREADY;
        else 
            gmem1_1_2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_1_2_blk_n_R_assign_proc : process(m_axi_gmem1_1_2_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_1_2_blk_n_R <= m_axi_gmem1_1_2_RVALID;
        else 
            gmem1_1_2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_2_0_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_2_0_ARVALID <= ap_const_logic_1;
        else 
            gmem1_2_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_2_0_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_2_0_RREADY <= ap_const_logic_1;
        else 
            gmem1_2_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_2_0_blk_n_AR_assign_proc : process(m_axi_gmem1_2_0_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_2_0_blk_n_AR <= m_axi_gmem1_2_0_ARREADY;
        else 
            gmem1_2_0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_2_0_blk_n_R_assign_proc : process(m_axi_gmem1_2_0_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_2_0_blk_n_R <= m_axi_gmem1_2_0_RVALID;
        else 
            gmem1_2_0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_2_1_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_2_1_ARVALID <= ap_const_logic_1;
        else 
            gmem1_2_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_2_1_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_2_1_RREADY <= ap_const_logic_1;
        else 
            gmem1_2_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_2_1_blk_n_AR_assign_proc : process(m_axi_gmem1_2_1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_2_1_blk_n_AR <= m_axi_gmem1_2_1_ARREADY;
        else 
            gmem1_2_1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_2_1_blk_n_R_assign_proc : process(m_axi_gmem1_2_1_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_2_1_blk_n_R <= m_axi_gmem1_2_1_RVALID;
        else 
            gmem1_2_1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_2_2_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem1_2_2_ARVALID <= ap_const_logic_1;
        else 
            gmem1_2_2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_2_2_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem1_2_2_RREADY <= ap_const_logic_1;
        else 
            gmem1_2_2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_2_2_blk_n_AR_assign_proc : process(m_axi_gmem1_2_2_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_2_2_blk_n_AR <= m_axi_gmem1_2_2_ARREADY;
        else 
            gmem1_2_2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_2_2_blk_n_R_assign_proc : process(m_axi_gmem1_2_2_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem1_2_2_blk_n_R <= m_axi_gmem1_2_2_RVALID;
        else 
            gmem1_2_2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_enable_reg_pp0_iter1, ap_predicate_op214_writereq_state12, ap_block_pp0_stage11_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_predicate_op214_writereq_state12 = ap_const_boolean_1))) then 
            gmem2_AWVALID <= ap_const_logic_1;
        else 
            gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, icmp_ln18_1_reg_888_pp0_iter2_reg, ap_block_pp0_stage4_11001)
    begin
        if (((icmp_ln18_1_reg_888_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            gmem2_BREADY <= ap_const_logic_1;
        else 
            gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_enable_reg_pp0_iter1, sum_1_reg_892, sum_3_reg_1024, sum_5_reg_1034, ap_block_pp0_stage12_01001, ap_block_pp0_stage13_01001, ap_block_pp0_stage14_01001)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                gmem2_WDATA <= sum_5_reg_1034;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage13_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
                gmem2_WDATA <= sum_3_reg_1024;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage12_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                gmem2_WDATA <= sum_1_reg_892;
            else 
                gmem2_WDATA <= "XXXXXXXX";
            end if;
        else 
            gmem2_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    gmem2_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_enable_reg_pp0_iter1, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
            gmem2_WVALID <= ap_const_logic_1;
        else 
            gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_enable_reg_pp0_iter1, icmp_ln18_reg_870_pp0_iter1_reg, first_iter_0_reg_388_pp0_iter1_reg)
    begin
        if (((first_iter_0_reg_388_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln18_reg_870_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_enable_reg_pp0_iter2, icmp_ln18_1_reg_888_pp0_iter2_reg)
    begin
        if (((icmp_ln18_1_reg_888_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_641_ce_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_641_ce <= ap_const_logic_1;
        else 
            grp_fu_641_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_648_ce_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_648_ce <= ap_const_logic_1;
        else 
            grp_fu_648_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_653_ce_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_653_ce <= ap_const_logic_1;
        else 
            grp_fu_653_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_659_ce_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
            grp_fu_659_ce <= ap_const_logic_1;
        else 
            grp_fu_659_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_666_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
            grp_fu_666_ce <= ap_const_logic_1;
        else 
            grp_fu_666_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_673_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_673_ce <= ap_const_logic_1;
        else 
            grp_fu_673_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_679_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_679_ce <= ap_const_logic_1;
        else 
            grp_fu_679_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_685_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_685_ce <= ap_const_logic_1;
        else 
            grp_fu_685_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_691_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_691_ce <= ap_const_logic_1;
        else 
            grp_fu_691_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_697_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_697_ce <= ap_const_logic_1;
        else 
            grp_fu_697_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_703_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_703_ce <= ap_const_logic_1;
        else 
            grp_fu_703_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_709_ce_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_709_ce <= ap_const_logic_1;
        else 
            grp_fu_709_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_714_ce_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_714_ce <= ap_const_logic_1;
        else 
            grp_fu_714_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_722_ce_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_722_ce <= ap_const_logic_1;
        else 
            grp_fu_722_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_729_ce_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_729_ce <= ap_const_logic_1;
        else 
            grp_fu_729_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln18_1_fu_529_p2 <= "1" when (indvars_iv_next_fu_485_p2 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_479_p2 <= "1" when (i_fu_166 = ap_const_lv2_3) else "0";
    indvars_iv_next_fu_485_p2 <= std_logic_vector(unsigned(i_fu_166) + unsigned(ap_const_lv2_1));
    p_shl_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_500_p3),64));
    p_shl_fu_500_p3 <= (i_fu_166 & ap_const_lv2_0);
    sum_1_fu_548_p2 <= std_logic_vector(unsigned(add_ln33_6_fu_544_p2) + unsigned(add_ln33_2_fu_540_p2));
    sum_3_fu_621_p2 <= std_logic_vector(unsigned(add_ln33_14_fu_617_p2) + unsigned(add_ln33_10_fu_613_p2));
    sum_5_fu_635_p2 <= std_logic_vector(unsigned(add_ln33_22_fu_631_p2) + unsigned(add_ln33_18_fu_627_p2));
    tmp_fu_512_p2 <= std_logic_vector(unsigned(zext_ln18_fu_496_p1) + unsigned(input_r_read_reg_748));
    zext_ln18_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_166),64));
end behav;
