# 1 "CNN/src/dense.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 376 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 105 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "CNN/src/dense.cpp" 2
# 1 "CNN/src/dense.h" 1


# 1 "CNN/src/Headers/definitions.h" 1
# 4 "CNN/src/dense.h" 2
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream.h" 1
# 12 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream.h"
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream_39.h" 1
# 23 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream_39.h"
namespace hls {
# 49 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream_39.h"
template<typename __STREAM_T__, int DEPTH=0>
class stream;

template<typename __STREAM_T__>
class stream<__STREAM_T__, 0>
{
  public:
    using value_type = __STREAM_T__;

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
      (void)(name);
    }


  private:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool empty() const {
        return !__fpga_fifo_not_empty(&V);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool full() const {
        return !__fpga_fifo_not_full(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void read(__STREAM_T__& dout) {
        __fpga_fifo_pop(&V, &dout);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool read_dep(__STREAM_T__& dout, volatile bool flag) {
        __fpga_fifo_pop(&V, &dout);
        return flag;
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) __STREAM_T__ read() {
        __STREAM_T__ tmp;
        read(tmp);
        return tmp;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;

        if (__fpga_fifo_nb_pop(&V, &tmp)) {
            dout = tmp;
            return true;
        } else {
            return false;
        }
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const __STREAM_T__& din) {
        __fpga_fifo_push(&V, &din);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool write_dep(const __STREAM_T__& din, volatile bool flag) {
        __fpga_fifo_push(&V, &din);
        return flag;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool write_nb(const __STREAM_T__& din) {
        return __fpga_fifo_nb_push(&V, &din);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned size() const {
        return __fpga_fifo_size(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned capacity() const {
        return __fpga_fifo_capacity(&V);
    }


    void set_name(const char* name) { (void)(name); }

  public:
    __STREAM_T__ V __attribute__((no_ctor));
};

template<typename __STREAM_T__, int DEPTH>
class stream : public stream<__STREAM_T__, 0> {
  public:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
#pragma HLS stream variable=this depth=DEPTH
 }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
#pragma HLS stream variable=this depth=DEPTH
 (void)(name);
    }
};
}
# 13 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream.h" 2
# 5 "CNN/src/dense.h" 2

void dense_layer_soft_max(hls::stream<float> dense_to_softmax_streams[4], float prediction[10]);
void dense_layer(hls::stream<float> flat_to_dense_streams[4], hls::stream<float> dense_to_softmax_stream[4]);
# 2 "CNN/src/dense.cpp" 2
# 1 "CNN/src/Headers/dense_weights.h" 1
# 11 "CNN/src/Headers/dense_weights.h"
float dense_weights[(4 * (28 / 2) * (28 / 2))][10]
  = {
   { 0.0051419781520962715, 0.12019386887550354, -0.045675378292798996, 0.017933109775185585, -0.10241357237100601, -0.007053650449961424, -0.07262804359197617, -0.05635499209165573, 0.0766846239566803, 0.05797727778553963 },
   { -0.07081367820501328, 0.011683852411806583, -0.130310520529747, 0.044690776616334915, -0.26994138956069946, -0.009825047105550766, 0.2838025391101837, -0.10404072701931, 0.0016347022028639913, 0.040481459349393845 },
   { -0.03899405896663666, -0.07836504280567169, 0.038178179413080215, 0.06248806416988373, -0.20724666118621826, 0.05162884667515755, 0.19124263525009155, -0.09813801199197769, 0.023453569039702415, -0.07876763492822647 },
   { -0.0804096981883049, 0.07205521315336227, 0.031812023371458054, -0.07904241979122162, -0.3421081006526947, -0.000330212467815727, 0.23882777988910675, -0.17278173565864563, 0.025875423103570938, -0.18247053027153015 },
   { -0.05375182628631592, 0.051495615392923355, -0.003051281441003084, 0.028758328408002853, -0.39739519357681274, 0.02007504738867283, 0.1385406255722046, -0.4239516258239746, -0.09292170405387878, -0.24630460143089294 },
   { -0.09241537749767303, -0.03708701953291893, 0.08558113873004913, 0.04738730192184448, -0.13890336453914642, -0.01942039281129837, 0.08447078615427017, -0.20316734910011292, -0.018580418080091476, 0.0008392338058911264 },
   { 0.05518040433526039, -0.032108280807733536, 0.059344567358493805, 0.04238199442625046, -0.13728035986423492, 0.0498054176568985, 0.04605771601200104, -0.16399966180324554, 0.03875668719410896, -0.07069192826747894 },
   { -0.1667458862066269, -0.03702275827527046, 0.08210232108831406, 0.0810471698641777, -0.09475491940975189, 0.10891900956630707, -0.08604166656732559, -0.21819137036800385, 0.05435111001133919, -0.046953313052654266 },
   { -0.07314572483301163, -0.0943068116903305, 0.0344994030892849, 0.1138187050819397, -0.16998596489429474, -0.027942923828959465, -0.10672784596681595, -0.13585276901721954, 0.0780276358127594, -0.10984071344137192 },
   { -0.02087818644940853, -0.04173528403043747, -0.00818803533911705, 0.16706813871860504, -0.07517971098423004, -0.01697172038257122, -0.11193858087062836, -0.3322940766811371, 0.1799939125776291, 0.024425875395536423 },
   { -0.00883003231137991, -0.027565622702240944, -0.11189773678779602, -0.013583607971668243, -0.11693276464939117, -0.03611787036061287, -0.03837115317583084, -0.2141362726688385, -0.04172757640480995, 0.003380980109795928 },
   { 0.08644511550664902, -0.022687433287501335, 0.020330948755145073, 0.00884204637259245, 0.011225997470319271, -0.11336661875247955, 0.03971855342388153, -0.04243512079119682, -0.05068531259894371, -0.09718576073646545 },
   { 0.004794605076313019, -0.1036679744720459, -0.017025528475642204, 0.010455695912241936, 0.05642625316977501, 0.11695146560668945, -0.029378706589341164, -0.009245462715625763, 0.01299174502491951, -0.19927652180194855 },
   { -0.10072506219148636, -0.11746794730424881, -0.052857253700494766, 0.0033987369388341904, -0.1070525050163269, 0.20890916883945465, -0.021085960790514946, -0.06162472814321518, 0.04881123825907707, 0.0059314691461622715 },
   { -0.11554861068725586, 0.16217872500419617, -0.0033460096456110477, -0.011439604684710503, -0.16383402049541473, 0.008464012295007706, 0.23284699022769928, 0.0711289718747139, 0.05869996175169945, 0.10158619284629822 },
   { -0.029515158385038376, 0.1914411187171936, -0.12387660145759583, 0.02865747921168804, -0.05511109158396721, 0.028922976925969124, 0.18076780438423157, -0.04320337250828743, -0.08509239554405212, -0.1779441386461258 },
   { 0.04934575781226158, 0.11070729047060013, -0.23735326528549194, -0.02374069020152092, 0.1116563156247139, 0.11995571106672287, 0.1388181895017624, 0.11959046125411987, 0.01805512234568596, -0.23194104433059692 },
   { 0.13343657553195953, -0.021943457424640656, -0.15107013285160065, -0.15018732845783234, 0.09661468863487244, 0.11664200574159622, 0.20945437252521515, 0.005780201405286789, -0.000666084757540375, 0.01722281612455845 },
   { -0.08515890687704086, 0.04753589630126953, -0.08599252998828888, -0.1633351892232895, -0.025049284100532532, 0.0008499479154124856, -0.007229834329336882, 0.015963777899742126, 0.00194780551828444, -0.06971827894449234 },
   { 0.05522148683667183, -0.005173608660697937, -0.12453609704971313, -0.10152685642242432, 0.06333499401807785, 0.0423722118139267, 0.02192673273384571, -0.06433623284101486, 0.039991430938243866, 0.03366741165518761 },
   { -0.023504896089434624, 0.14371702075004578, -0.020581448450684547, 0.018844928592443466, 0.11753050982952118, -0.0009286456042900681, -0.056610338389873505, 0.020834743976593018, 0.05603823810815811, 0.03847358003258705 },
   { 0.02288215607404709, 0.021058185026049614, -0.001129991956986487, 0.07874440401792526, -0.017478592693805695, -0.014791727066040039, -0.018620025366544724, 0.0342245027422905, 0.0986727774143219, 0.044016242027282715 },
   { -0.06490825116634369, 0.06904249638319016, 0.03845873475074768, 0.020122068002820015, -0.0334092415869236, 0.10472405701875687, 0.017106104642152786, -0.09951556473970413, 0.0791417807340622, 0.038439709693193436 },
   { -0.03856843337416649, -0.032017480581998825, 0.04084788262844086, 0.09683634340763092, -0.0653158575296402, 0.050994690507650375, -0.02570013888180256, -0.10724882036447525, 0.15204933285713196, 0.022872518748044968 },
   { -0.007406718097627163, -0.00951461959630251, 0.003910303581506014, 0.0598214827477932, 0.01713368482887745, -0.023520108312368393, -0.020406173542141914, -0.07067462801933289, 0.009575575590133667, 0.0207038726657629 },
   { 0.0017484126146882772, 0.06425192952156067, 0.01268580462783575, -0.11349817365407944, 0.009356417693197727, 0.021967187523841858, 0.01657426916062832, -0.1768290400505066, 0.08920112997293472, 0.008224493823945522 },
   { 0.04606613889336586, 0.10572212934494019, -0.008045263588428497, -0.004896548576653004, 0.021260101348161697, 0.15198561549186707, 0.02286018617451191, -0.0669739842414856, -0.007327631581574678, -0.10614347457885742 },
   { -0.02476678229868412, -0.06692954152822495, -0.19811832904815674, -0.09314998239278793, -0.03815734013915062, 0.14704443514347076, 0.014957915991544724, -0.27578049898147583, 0.0924755111336708, -0.15856622159481049 },
   { -0.13830138742923737, 0.1560559868812561, 0.022131700068712234, 0.14939337968826294, -0.1305168718099594, -0.010862755589187145, 0.1053321436047554, -0.07199724018573761, -0.03912373259663582, -0.2459879368543625 },
   { 0.12731967866420746, -0.03565939888358116, -0.12204620987176895, 0.056165698915719986, 0.14472617208957672, 0.027176931500434875, -0.0652242973446846, 0.0008871497120708227, -0.07615451514720917, -0.0004103534738533199 },
   { 0.025808051228523254, -0.103997141122818, -0.0620090588927269, -0.026607830077409744, 0.09483181685209274, 0.09682319313287735, 0.07148539274930954, 0.0847386047244072, 0.09057129174470901, -0.008813627064228058 },
   { 0.004786134231835604, -0.14378835260868073, -0.14144903421401978, -0.06698167324066162, 0.0678754597902298, 0.10104213654994965, 0.05033843219280243, 0.09064549952745438, -0.033720146864652634, 0.010948022827506065 },
   { -0.010091700591146946, -0.09755316376686096, -0.1303325891494751, -0.041792869567871094, 0.1428147554397583, 0.10693264752626419, 0.0862906351685524, 0.16603313386440277, 0.1663193702697754, 0.03640194237232208 },
   { -0.04626483842730522, 0.015217327512800694, -0.17860399186611176, -0.07829683274030685, 0.052549198269844055, 0.04021383821964264, -0.09913105517625809, 0.09057895839214325, 0.13100628554821014, 0.0811438336968422 },
   { -0.17127494513988495, 0.06827573478221893, -0.16694168746471405, 0.06685252487659454, 0.058126457035541534, 0.014399530366063118, -0.10727272182703018, 0.12490285187959671, 0.0002570232900325209, 0.07422733306884766 },
   { 0.0027275774627923965, 0.06873884052038193, -0.19664938747882843, -0.046496711671352386, 0.07972583174705505, 0.04576973244547844, 0.03134307637810707, 0.024673929437994957, -0.03624527156352997, 0.1317608505487442 },
   { 0.005046670790761709, 0.13159750401973724, -0.18545565009117126, -0.030094942077994347, 0.08561454713344574, -0.02458939142525196, -0.1089809462428093, 0.005671578925102949, -0.08177484571933746, 0.11517271399497986 },
   { 0.09211578220129013, 0.1510806381702423, -0.25527191162109375, -0.11419185250997543, 0.05569757521152496, 0.09814086556434631, -0.16713574528694153, 0.001495792530477047, -0.05507659539580345, 0.039778437465429306 },
   { -0.11548255383968353, 0.10624805837869644, -0.276931494474411, -0.06615453958511353, 0.011803748086094856, 0.08791555464267731, -0.0705980733036995, 0.06339067220687866, 0.0807875320315361, 0.10582614690065384 },
   { -0.06197308003902435, 0.11460834741592407, -0.18691809475421906, -0.23649446666240692, 0.05157386511564255, 0.17337287962436676, -0.0360209122300148, 0.11096149682998657, -0.0073895701207220554, -0.0024650958366692066 },
   { 0.0451667457818985, -0.00142643169965595, -0.17155583202838898, -0.23376210033893585, 0.2184164673089981, 0.15739741921424866, -0.08588036149740219, -0.09882358461618423, -0.11794736236333847, -0.07406961172819138 },
   { 0.08269327878952026, -0.29864081740379333, -0.010347411967813969, -0.26578885316848755, -0.007254195865243673, 0.21095961332321167, -0.24243532121181488, -0.12395446747541428, 0.03966687247157097, -0.1721019297838211 },
   { -0.05895299091935158, 0.06716352701187134, 0.06745545566082001, 0.02837001532316208, -0.11744809150695801, -0.07359278947114944, 0.10781239718198776, 0.04691992327570915, 0.048318710178136826, -0.060708578675985336 },
   { 0.014950702898204327, -0.07070966064929962, -0.08812373131513596, -0.09614191204309464, 0.09658565372228622, -0.07953003793954849, -0.08745072782039642, 0.07904449105262756, 0.15369148552417755, 0.0012795116053894162 },
   { -0.0804578959941864, -0.05520050972700119, -0.06599212437868118, 0.014122572727501392, 0.014729105867445469, -0.13043202459812164, 0.09338593482971191, 0.00809558480978012, 0.08641942590475082, 0.06184816733002663 },
   { 0.024616317823529243, -0.0829659178853035, -0.2563284635543823, -0.029842734336853027, 0.039611369371414185, -0.16512161493301392, -0.023643983528017998, 0.0936325341463089, -0.004562484100461006, 0.14656955003738403 },
   { 0.08237048983573914, -0.2107575684785843, -0.18285953998565674, -0.11404374241828918, -0.005086442921310663, -0.014739281497895718, -0.06478843092918396, 0.07567821443080902, 0.07330214232206345, 0.06107168272137642 },
   { 0.06861896067857742, -0.08839858323335648, -0.15816079080104828, -0.09584257751703262, 0.07492730766534805, 0.0775129571557045, 0.046394191682338715, -0.04221288114786148, -0.03484724834561348, 0.123135045170784 },
   { 0.008483967743813992, -0.05631228908896446, -0.21991777420043945, -0.19198526442050934, -0.022324608638882637, 0.1237245723605156, -0.04123714938759804, 0.07135897874832153, 0.03930315747857094, -0.025975335389375687 },
   { 0.09923248738050461, 0.1162857934832573, -0.24246086180210114, -0.12260036170482635, 0.13534806668758392, 0.1041615828871727, -0.0077115814201533794, 0.024460826069116592, -0.23091846704483032, -0.0782417580485344 },
   { 0.06714043766260147, 0.1822541207075119, -0.10483364760875702, -0.14845849573612213, 0.22742001712322235, 0.09939143806695938, 0.006422961130738258, 0.08034168928861618, -0.2826780080795288, -0.0319216288626194 },
   { -0.03455864638090134, 0.2672855854034424, -0.31370922923088074, -0.1218632236123085, 0.29117846488952637, 0.13962405920028687, -0.0027182591147720814, 0.0010143658146262169, -0.15242336690425873, -0.08607963472604752 },
   { -0.2331913560628891, 0.30145859718322754, -0.4435647428035736, -0.10705561935901642, 0.20839466154575348, 0.13151144981384277, 0.07612727582454681, 0.09375585615634918, 0.01983542926609516, -0.1559540033340454 },
   { -0.16391710937023163, 0.14035913348197937, -0.3704008162021637, -0.2929462790489197, 0.0855497196316719, 0.3752724826335907, 0.0504678413271904, 0.15701059997081757, 0.006716248579323292, -0.09429145604372025 },
   { -0.1918877214193344, -0.09573735296726227, -0.2596573829650879, -0.42543521523475647, 0.1409844011068344, 0.34704092144966125, 0.007377661764621735, 0.07663171738386154, -0.027399592101573944, -0.11295002698898315 },
   { -0.11862940341234207, -0.20025314390659332, -0.1665426790714264, -0.40971383452415466, -0.036417894065380096, 0.29853036999702454, -0.18005859851837158, -0.076121985912323, -0.053204379975795746, -0.22774221003055573 },
   { 0.0417630709707737, -0.10360762476921082, -0.2921362817287445, -0.03846777230501175, -0.23615877330303192, 0.07105569541454315, -0.08382672816514969, 0.08129855245351791, 0.07229377329349518, -0.04047027602791786 },
   { 0.13485994935035706, -0.009272812865674496, -0.04140825197100639, 0.023841047659516335, -0.15840566158294678, -0.05611487478017807, -0.12710675597190857, -0.05792141705751419, -0.053623609244823456, 0.05433491989970207 },
   { 0.008741171099245548, -0.001930360565893352, -0.004928510636091232, 0.14893855154514313, -0.05289315804839134, -0.2985314428806305, 0.09675706177949905, 0.027496876195073128, 0.11261335760354996, 0.0025431904941797256 },
   { 0.07320519536733627, -0.007733860053122044, -0.28797468543052673, -0.057833604514598846, -0.00706875417381525, -0.11606267094612122, -0.023650037124753, 0.021239932626485825, 0.04895821958780289, 0.06346432864665985 },
   { 0.05071120709180832, -0.3189561069011688, -0.13894568383693695, -0.12406782060861588, 0.055931851267814636, -0.10805007815361023, 0.16069793701171875, -0.0988178625702858, 0.060452673584222794, 0.11494365334510803 },
   { 0.06718101352453232, -0.21286927163600922, -0.09021163731813431, -0.34441253542900085, 0.14218811690807343, -0.18538467586040497, 0.15314795076847076, -0.036686453968286514, 0.04452301934361458, 0.02442358247935772 },
   { -0.08259909600019455, -0.012680916115641594, -0.1432664841413498, -0.25242507457733154, 0.1564280092716217, 0.021349912509322166, -0.03952975571155548, -0.01793203502893448, -0.00814779568463564, 0.025144631043076515 },
   { -0.02338767610490322, 0.060232650488615036, -0.1592097133398056, -0.07769107073545456, 0.18521100282669067, 0.04458238556981087, 0.015965623781085014, 0.0055777328088879585, -0.027954120188951492, -0.2211855798959732 },
   { 0.006511596962809563, 0.11877567321062088, -0.008972723968327045, -0.18688878417015076, 0.2719753682613373, -0.017896102741360664, 0.02017403393983841, 0.05013597756624222, -0.35065457224845886, -0.3851853311061859 },
   { -0.2150150090456009, 0.28402096033096313, -0.12421797960996628, -0.13389696180820465, 0.29893749952316284, 0.015667596831917763, 0.1631525754928589, 0.06882485747337341, -0.21713906526565552, -0.32719796895980835 },
   { -0.0923304557800293, 0.0992714986205101, -0.30849596858024597, -0.08221869170665741, 0.27882108092308044, 0.019251320511102676, 0.15519855916500092, 0.09108749777078629, -0.10535155236721039, -0.3464384377002716 },
   { -0.2867201268672943, 0.08309954404830933, -0.18707287311553955, 0.038416069000959396, 0.16373494267463684, 0.2566518187522888, 0.2875036299228668, 0.26175448298454285, -0.2770707607269287, -0.33585333824157715 },
   { -0.29817304015159607, -0.04400094226002693, -0.14676879346370697, -0.40125808119773865, 0.09687111526727676, 0.2494233399629593, 0.26168009638786316, -0.0034272444900125265, -0.02605733834207058, -0.23814933001995087 },
   { -0.11691252887248993, 0.07132389396429062, 0.06074780598282814, -0.17453636229038239, -0.15833693742752075, 0.42788568139076233, 0.07442428171634674, -0.22597147524356842, -0.0947260633111, -0.20187701284885406 },
   { 0.10960228741168976, -0.06263884902000427, -0.2697296440601349, -0.239510178565979, -0.11387905478477478, -0.14680472016334534, -0.33793601393699646, 0.08572127670049667, 0.12136007845401764, 0.08114925771951675 },
   { 0.06381134688854218, 0.22756415605545044, 0.09128317981958389, 0.051993533968925476, -0.13630986213684082, -0.2360776960849762, 0.08565061539411545, -0.08499854803085327, -0.09035435318946838, 0.0489361397922039 },
   { -0.030486740171909332, 0.025320112705230713, 0.02098110504448414, -0.03803124651312828, 0.07380674034357071, -0.2380305826663971, 0.1563790738582611, 0.020019883289933205, 0.06358132511377335, -0.07550490647554398 },
   { 0.07301528751850128, 0.005905019585043192, -0.046517785638570786, -0.20442187786102295, -0.008465230464935303, -0.07681503891944885, 0.16148436069488525, 0.08525391668081284, -0.1124177798628807, 0.10040849447250366 },
   { 0.14955569803714752, -0.3275817930698395, 0.11808490008115768, -0.20891831815242767, 0.05145011097192764, -0.020928215235471725, 0.22212183475494385, -0.15084482729434967, 0.06551536172628403, 0.009363334625959396 },
   { 0.10083343088626862, -0.1673879474401474, 0.1328534632921219, -0.0792323425412178, 0.10488052666187286, -0.06251582503318787, 0.206866055727005, -0.16837497055530548, -0.06851119548082352, -0.01711028814315796 },
   { -0.013356348499655724, -0.09319020062685013, -0.07162434607744217, -0.15824858844280243, 0.12049528956413269, 0.11651626974344254, 0.08765409141778946, -0.032292213290929794, -0.03073323890566826, -0.018881332129240036 },
   { -0.20839032530784607, 0.02479860559105873, -0.08891937881708145, -0.03878070414066315, 0.10357329994440079, 0.016792001202702522, 0.17480827867984772, 0.19306258857250214, -0.10689188539981842, -0.1528407484292984 },
   { -0.2158694714307785, 0.2014540582895279, 0.04607892781496048, -0.18120653927326202, 0.23592306673526764, 0.08297470211982727, 0.13904321193695068, 0.21874694526195526, -0.27709466218948364, -0.23102262616157532 },
   { -0.0816771611571312, 0.17165137827396393, 0.035595718771219254, -0.21978886425495148, 0.2330746054649353, -0.09659554064273834, 0.037855252623558044, 0.21160513162612915, -0.0895988941192627, -0.0945730060338974 },
   { -0.11110135912895203, -0.03604957461357117, -0.060343414545059204, -0.06596729159355164, 0.17008604109287262, -0.309855580329895, 0.15621106326580048, 0.16694553196430206, 0.021191371604800224, -0.1731829047203064 },
   { -0.10772015899419785, 0.02492227591574192, 0.006294066086411476, 0.1445755809545517, 0.23046764731407166, -0.3030804395675659, -0.03962196409702301, 0.2452748566865921, -0.05219288542866707, -0.3801678419113159 },
   { -0.05468873679637909, -0.09968708455562592, 0.12469248473644257, -0.030628865584731102, -0.06705286353826523, 0.027585886418819427, -0.04898097366094589, 0.04501521214842796, -0.07029920816421509, -0.2957078516483307 },
   { -0.43211546540260315, 0.17516373097896576, 0.20987731218338013, -0.1294194906949997, -0.06796430051326752, 0.3122440278530121, -0.030941873788833618, 0.10257767140865326, -0.25810638070106506, -0.30009594559669495 },
   { 0.12144698202610016, 0.15891176462173462, 0.0046406956389546394, -0.0894845649600029, -0.05142144113779068, -0.1465659886598587, -0.22393503785133362, -0.003438243642449379, -0.23844003677368164, 0.08999035507440567 },
   { -0.007640790194272995, 0.026604048907756805, 0.34831446409225464, 0.15111136436462402, -0.2748594284057617, -0.1491592526435852, 0.07710202783346176, -0.22868035733699799, -0.10928785800933838, -0.002821901347488165 },
   { 0.0165352001786232, 0.12581555545330048, 0.16027012467384338, -0.22055378556251526, 0.012114539742469788, -0.17348559200763702, -0.01018274761736393, -0.11892532557249069, 0.06614058464765549, -0.11756860464811325 },
   { 0.18826034665107727, -0.008897651918232441, 0.08688705414533615, -0.07993067055940628, -0.08122973144054413, -0.09853867441415787, 0.08179810643196106, -0.050927285104990005, 0.059829212725162506, -0.05728010833263397 },
   { 0.1036926731467247, -0.18487000465393066, 0.2322091907262802, -0.08964070677757263, -0.06216450408101082, -0.05364608392119408, 0.1108456552028656, -0.04828141629695892, -0.029757117852568626, 0.0006384631851688027 },
   { 0.16602292656898499, -0.20512175559997559, 0.12625610828399658, -0.22747159004211426, 0.09302159398794174, -0.0809360221028328, 0.16790126264095306, 0.06609191745519638, -0.019568439573049545, 0.09584439545869827 },
   { -0.008117828518152237, 0.01625961624085903, 0.030217034742236137, -0.12241028994321823, 0.06321242451667786, 0.01936209201812744, 0.15451161563396454, 0.09110845625400543, -0.15241281688213348, -0.13950686156749725 },
   { -0.18397098779678345, 0.10487557202577591, 0.006426826119422913, 0.03238369897007942, -0.035958800464868546, 0.0076638744212687016, 0.19164390861988068, 0.28884434700012207, -0.003699834691360593, -0.3038189709186554 },
   { -0.28474706411361694, 0.1620001643896103, -0.01973801665008068, -0.18438316881656647, 0.05394904688000679, -0.04910634085536003, 0.20250068604946136, 0.22496013343334198, -0.17342297732830048, -0.27514609694480896 },
   { -0.06392478197813034, -0.013875243254005909, 0.04618893191218376, -0.3062708377838135, 0.17230023443698883, -0.1831945776939392, -0.0731058344244957, 0.09099500626325607, -0.02503250725567341, -0.13279765844345093 },
   { 0.10030986368656158, 0.025261159986257553, 0.20805229246616364, -0.27411019802093506, 0.2736610174179077, -0.32015228271484375, -0.1497092992067337, -0.04927581176161766, -0.23304319381713867, 0.10719585418701172 },
   { 0.10131516307592392, -0.07762296497821808, 0.22367654740810394, -0.010852273553609848, 0.25667428970336914, -0.23092472553253174, -0.2621077299118042, 0.044657643884420395, -0.1569020003080368, -0.107027068734169 },
   { -0.13010187447071075, 0.026084037497639656, 0.3034992516040802, 0.09152372181415558, 0.11438131332397461, -0.12450464814901352, -0.11118721961975098, -0.10645949095487595, -0.38211628794670105, -0.02489423006772995 },
   { -0.46781039237976074, 0.23250962793827057, 0.23204410076141357, 0.11069149523973465, -0.04539482295513153, 0.020856305956840515, -0.049376823008060455, -0.16206558048725128, -0.03520182520151138, -0.0747467502951622 },
   { 0.009051375091075897, 0.035441476851701736, 0.011225219815969467, 0.16006267070770264, -0.1368294060230255, -0.16562773287296295, 0.017908474430441856, 0.09342226386070251, -0.0851091668009758, -0.11160324513912201 },
   { 0.026755524799227715, -0.03192046284675598, 0.2546899914741516, 0.04374169185757637, -0.21887145936489105, -0.01484309509396553, -0.09291144460439682, -0.1869787573814392, 0.030336810275912285, -0.12648113071918488 },
   { -0.01843096688389778, -0.046860598027706146, 0.09274608641862869, -0.002218719106167555, -0.03900611400604248, 0.07297298312187195, -0.04705917835235596, -0.07810429483652115, 0.057925060391426086, -0.2425055354833603 },
   { 0.03940674290060997, -0.05278719961643219, 0.11407743394374847, 0.03944355994462967, -0.04922393336892128, -0.22685737907886505, 0.04676242172718048, 0.10664335638284683, 0.09688594192266464, -0.06417527049779892 },
   { 0.0042299795895814896, -0.1055738776922226, 0.11974368244409561, -0.13134123384952545, -0.08109058439731598, -0.18089404702186584, -0.0410141795873642, 0.1158706396818161, 0.04976064711809158, 0.09863868355751038 },
   { 0.10238109529018402, -0.1553899049758911, 0.14815963804721832, -0.17588955163955688, -0.051805153489112854, -0.12166444957256317, 0.11011684685945511, 0.09857852756977081, -0.14336936175823212, 0.06925301253795624 },
   { -0.004331094678491354, 0.0026660391595214605, 0.11490963399410248, -0.2578245997428894, 0.13708068430423737, -0.06047847121953964, 0.0726354569196701, 0.10355865210294724, -0.07000625878572464, -0.2228037714958191 },
   { -0.45048919320106506, 0.10515853017568588, -0.09322624653577805, -0.09704826027154922, -0.2717433571815491, 0.09435529261827469, 0.10612725466489792, 0.08587180823087692, 0.05781878903508186, -0.06820272654294968 },
   { -0.062218088656663895, 0.13990943133831024, 0.07714460045099258, -0.40014684200286865, 0.13714313507080078, -0.21658775210380554, 0.1813250035047531, 0.2298487275838852, -0.018005913123488426, -0.3087709844112396 },
   { 0.14703889191150665, 0.1985444575548172, 0.28325536847114563, -0.5778822898864746, 0.4262397587299347, -0.11702444404363632, -0.287150502204895, 0.06160374730825424, -0.3790073096752167, -0.04328298941254616 },
   { -0.008303234353661537, 0.04589259997010231, 0.15584617853164673, -0.3411526381969452, 0.3301670551300049, -0.25884467363357544, -0.2724534273147583, 0.07396653294563293, -0.6253238320350647, 0.08092021942138672 },
   { 0.20591242611408234, 0.06570757180452347, 0.13481523096561432, -0.36263927817344666, 0.24587033689022064, -0.20759963989257812, -0.2523655891418457, 0.15114909410476685, -0.316398948431015, 0.030606908723711967 },
   { 0.045742716640233994, 0.11040516197681427, 0.2864331305027008, -0.17803046107292175, 0.07460961490869522, -0.2865608036518097, -0.3064606487751007, -0.05714565888047218, -0.20923256874084473, -0.042468540370464325 },
   { -0.4211280047893524, 0.15690423548221588, 0.29060032963752747, -0.21724937856197357, -0.07487551122903824, -0.1120234951376915, -0.34802210330963135, -0.061996251344680786, -0.04409415274858475, 0.07896673679351807 },
   { 0.09537748247385025, -0.1646406054496765, 0.14455080032348633, -0.11511512845754623, -0.04086456820368767, -0.00211556744761765, 0.054797641932964325, 0.06288471072912216, 0.03689359128475189, -0.20377200841903687 },
   { -0.0808408334851265, -0.031186096370220184, 0.2293725460767746, 0.015237807296216488, -0.20987196266651154, 0.20596128702163696, -0.38506880402565, -0.042443037033081055, 0.06958319246768951, -0.1866309940814972 },
   { -0.11361969262361526, 0.03502319008111954, -0.013621575199067593, 0.061678335070610046, -0.0595439188182354, 0.0821135863661766, -0.03521910682320595, -0.08113917708396912, -0.10091691464185715, -0.14101044833660126 },
   { -0.0723680853843689, -0.13288471102714539, 0.13420628011226654, 0.13616815209388733, -0.11822810024023056, 0.11805494129657745, -0.0856848806142807, 0.006525518838316202, 0.02270720899105072, -0.05838368088006973 },
   { -0.07655337452888489, -0.19120465219020844, 0.1464754343032837, -0.017600785940885544, -0.1211901530623436, -0.08152366429567337, -0.15759481489658356, 0.08458367735147476, 0.07069014757871628, -0.14932121336460114 },
   { 0.01412645261734724, -0.06744742393493652, 0.09437531232833862, -0.12930501997470856, -0.09852928668260574, -0.05933257192373276, 0.103806272149086, -0.03373616933822632, 0.03636323660612106, -0.09282006323337555 },
   { -0.014719407074153423, 0.0813579112291336, 0.06707731634378433, -0.09313984215259552, 0.016981320455670357, -0.12308404594659805, 0.05823950096964836, -0.09910310059785843, 0.0027660485357046127, -0.24192269146442413 },
   { -0.09428228437900543, 0.2668141722679138, -0.003635791363194585, -0.19348475337028503, 0.06486871093511581, -0.00712150102481246, 0.07199177891016006, -0.010012771002948284, -0.040325552225112915, -0.25248202681541443 },
   { 0.18968169391155243, 0.2619076371192932, -0.05138932168483734, -0.26448795199394226, -0.06925194710493088, -0.10651308298110962, -0.07893508672714233, 0.27343305945396423, -0.31602734327316284, -0.1759616881608963 },
   { 0.25059133768081665, -0.026448147371411324, 0.19845864176750183, -0.2072119563817978, 0.13682405650615692, -0.0063608866184949875, -0.2818584144115448, 0.23565660417079926, -0.2845419943332672, -0.08308272063732147 },
   { 0.008721118792891502, 0.18598970770835876, 0.05802609771490097, 0.027187805622816086, 0.24581576883792877, -0.02313174679875374, -0.17117950320243835, 0.3046514689922333, -0.36381879448890686, -0.177456796169281 },
   { 0.04302363097667694, -0.00366738298907876, 0.19105447828769684, -0.3632380962371826, 0.06421048194169998, -0.14400821924209595, -0.10506350547075272, 0.11393198370933533, -0.33049172163009644, 0.07703687250614166 },
   { 0.024472003802657127, 0.14268741011619568, 0.21439243853092194, -0.4093836843967438, 0.17621542513370514, -0.05673487111926079, -0.293578565120697, -0.07594023644924164, -0.15576712787151337, 0.06731870025396347 },
   { -0.38342970609664917, 0.14270393550395966, 0.26448774337768555, -0.16558225452899933, -0.21241062879562378, -0.04258120059967041, -0.1747581958770752, -0.0048380885273218155, -0.307616263628006, 0.17224229872226715 },
   { 0.011392704211175442, 0.18817764520645142, 0.13633742928504944, -0.0843629539012909, -0.09339571744203568, -0.016190826892852783, -0.0759497657418251, -0.04718613252043724, -0.10110742598772049, -0.11036726087331772 },
   { -0.011244876310229301, 0.3150426149368286, -0.04377855360507965, -0.055363018065690994, -0.16919897496700287, 0.038977235555648804, -0.39624810218811035, 0.06570858508348465, 0.02030227519571781, -0.16548378765583038 },
   { -0.1381612867116928, 0.23874406516551971, 0.01199463289231062, -0.0059035541489720345, -0.04672541841864586, 0.02873268350958824, -0.22559292614459991, -0.06275925785303116, 0.0023784551303833723, -0.16913644969463348 },
   { 0.029496612027287483, -0.04452335834503174, -0.05541346222162247, 0.09839646518230438, -0.029865330085158348, -0.00028590959846042097, -0.03439750522375107, 0.006383168511092663, -0.05834343284368515, -0.06596985459327698 },
   { -0.0556379072368145, -0.036067280918359756, 0.018173709511756897, 0.1262744963169098, -0.13174167275428772, 0.08740295469760895, -0.26170220971107483, -0.05564024671912193, 0.03344350680708885, -0.0352838896214962 },
   { 0.03719596937298775, -0.12009730935096741, 0.03478477522730827, -0.02734227292239666, -0.12444621324539185, 0.01580193266272545, -0.19564951956272125, -0.1935882270336151, -0.013221366330981255, -0.014305300079286098 },
   { 0.06382962316274643, 0.09418182820081711, -0.016959363594651222, -0.0239475779235363, 0.0020689857192337513, 0.030872154980897903, -0.1751018464565277, -0.10898813605308533, 0.009525190107524395, -0.20348340272903442 },
   { -0.0338178351521492, 0.3942735493183136, -0.05589170381426811, -0.18559530377388, -0.048499949276447296, -0.041836485266685486, -0.04943705350160599, -0.0787132978439331, -0.10881420224905014, -0.03446530923247337 },
   { 0.24227707087993622, 0.24075883626937866, -0.022739406675100327, -0.256928026676178, -0.022824544459581375, 0.06737314164638519, 0.06466038525104523, 0.040433790534734726, -0.12212271988391876, 0.00768296467140317 },
   { 0.14843839406967163, -0.18726304173469543, 0.14910298585891724, -0.10772209614515305, -0.1323576420545578, 0.15416501462459564, -0.026325255632400513, 0.2193881869316101, -0.17112761735916138, -0.058958426117897034 },
   { 0.24029308557510376, 0.01778610236942768, 0.04893393814563751, -0.1340934783220291, -0.08290290087461472, 0.05431462079286575, -0.006343602202832699, 0.0857270136475563, -0.18332159519195557, -0.1540108323097229 },
   { 0.16770225763320923, -0.08241313695907593, 0.1772441267967224, -0.14827387034893036, -0.31025469303131104, 0.09566742181777954, 0.022702829912304878, -0.05829324200749397, -0.18922646343708038, 0.054108161479234695 },
   { 0.06966856122016907, 0.05314456298947334, 0.04158387333154678, -0.07319122552871704, 0.07791028171777725, 0.06358680874109268, 0.026297781616449356, -0.22475962340831757, -0.11908227205276489, 0.07075930386781693 },
   { 0.11399684101343155, 0.015337562188506126, 0.2687181532382965, -0.13389480113983154, -0.17961835861206055, -0.026782767847180367, -0.15670697391033173, -0.053524915128946304, -0.3080044388771057, 0.07462722808122635 },
   { -0.12868288159370422, 0.07516521960496902, -0.08712008595466614, 0.06187402829527855, -0.10910556465387344, 0.06568799167871475, -0.05787460133433342, 0.05306750908493996, -0.15947282314300537, -0.1652245670557022 },
   { -0.2664281725883484, 0.2430514246225357, 0.02491966262459755, 0.07821257412433624, -0.1228441372513771, 0.03872421383857727, -0.1591593325138092, 0.07285658270120621, -0.11194752156734467, -0.06962636858224869 },
   { -0.020751630887389183, 0.08980225771665573, -0.14003826677799225, 0.03296968340873718, -0.0346018485724926, 0.06863930821418762, -0.11471104621887207, -0.013697455637156963, -0.07406627386808395, 0.07858099043369293 },
   { 0.09639789909124374, -0.20209495723247528, 0.013309407979249954, 0.02944674715399742, -0.18349668383598328, 0.007089075166732073, -0.09687379002571106, -0.03875336796045303, -0.001703782007098198, 0.049721356481313705 },
   { 0.09176826477050781, -0.1567842960357666, 0.08873452246189117, 0.15974649786949158, -0.10624532401561737, -0.007562709040939808, -0.27230891585350037, -0.19467338919639587, -0.06092214211821556, 0.011803676374256611 },
   { 0.10085888206958771, -0.06512721627950668, 0.02547272853553295, 0.0689241960644722, -0.13504794239997864, 0.15507836639881134, -0.16194361448287964, -0.15448199212551117, 0.029358122497797012, 0.03762844204902649 },
   { 0.14781564474105835, 0.09968621283769608, 0.08125387877225876, -0.020936086773872375, -0.06506228446960449, 0.03156217932701111, -0.47443288564682007, -0.05269380658864975, -0.1086842268705368, 0.046476636081933975 },
   { 0.03873060271143913, 0.26322656869888306, -0.14379577338695526, -0.2233484536409378, -0.02425112947821617, 0.012153197079896927, -0.28879526257514954, 0.019185932353138924, -0.030934685841202736, 0.06872468441724777 },
   { 0.25264549255371094, -0.20423942804336548, 0.015843786299228668, -0.07941704243421555, 0.10567782819271088, 0.0556989349424839, 0.05233079940080643, -0.015873974189162254, -0.19562429189682007, 0.1469285935163498 },
   { 0.13890497386455536, -0.540758490562439, -0.08644358068704605, -0.025946034118533134, -0.04998768866062164, -0.004281992558389902, 0.1104542687535286, -0.05403684079647064, 0.02248425967991352, 0.11684907972812653 },
   { 0.09719321131706238, -0.031627535820007324, -0.032149676233530045, 0.09216835349798203, -0.07353756576776505, 0.03631950914859772, 0.10921839624643326, -0.1846151351928711, -0.1581544280052185, -0.07415186613798141 },
   { 0.19119440019130707, -0.20736713707447052, 0.11926734447479248, 0.06087300926446915, -0.06521359831094742, 0.18191862106323242, -0.3281151354312897, -0.38022229075431824, -0.06772545725107193, -0.11441583931446075 },
   { -0.02750067599117756, 0.12733440101146698, 0.06736177951097488, -0.19181673228740692, 0.0035019845236092806, -0.024381393566727638, -0.17283478379249573, -0.19585362076759338, -0.057863134890794754, 0.1654258817434311 },
   { 0.22225245833396912, 0.01920999400317669, 0.011087555438280106, 0.042557526379823685, -0.0967024490237236, -0.06459976732730865, -0.008245944045484066, -0.020475124940276146, -0.16567978262901306, 0.029298031702637672 },
   { 0.008534875698387623, -0.07673777639865875, -0.3263392150402069, 0.06231217458844185, -0.19192473590373993, 0.051120150834321976, -0.017085609957575798, 0.10002528876066208, -0.20255282521247864, 0.07741065323352814 },
   { -0.35721930861473083, -0.14990045130252838, 0.03994331136345863, 0.07401128113269806, -0.029899535700678825, 0.0851750373840332, -0.12055604159832001, 0.3111085593700409, -0.3834664523601532, 0.03266502544283867 },
   { -0.16596485674381256, 0.08759103715419769, -0.21096427738666534, 0.22886449098587036, -0.14216023683547974, 0.17567557096481323, -0.3731476068496704, 0.006813946645706892, -0.14461103081703186, -0.03254561498761177 },
   { 0.05743793398141861, -0.07721919566392899, -0.052096888422966, 0.36718326807022095, -0.08285187929868698, -0.08077874779701233, -0.4033668637275696, -0.0023069805465638638, -0.15607599914073944, 0.10584120452404022 },
   { -0.24012699723243713, -0.1794130802154541, -0.0751495286822319, 0.20998433232307434, -0.04994497075676918, 0.06825906038284302, -0.24028845131397247, -0.17504170536994934, 0.1289876401424408, 0.04789847135543823 },
   { -0.3697476089000702, 0.13552190363407135, -0.15191650390625, -0.006240487098693848, 0.10500670969486237, 0.07251707464456558, -0.33619433641433716, -0.0039232755079865456, 0.10498528182506561, -0.06093418598175049 },
   { -0.4808964729309082, -0.13580802083015442, -0.06501036137342453, -0.17310036718845367, 0.17995208501815796, -0.17606477439403534, -0.34814369678497314, 0.07323209941387177, -0.10136082768440247, 0.12817440927028656 },
   { -0.4815784990787506, 0.16940711438655853, -0.05674770101904869, -0.11323247849941254, 0.11139097064733505, -0.11970019340515137, -0.5512359142303467, 0.03471296653151512, -0.24115890264511108, 0.16894972324371338 },
   { -0.5076443552970886, -0.0006519125890918076, -0.20485243201255798, -0.1638631820678711, 0.09500247240066528, 0.19814623892307281, -0.8616970181465149, -0.01427117083221674, -0.28652599453926086, 0.12625640630722046 },
   { -0.3562096357345581, 0.04074791446328163, -0.04320784658193588, 0.12257876247167587, 0.1693509966135025, 0.10822165757417679, -0.6534439921379089, -0.06664682179689407, 0.04328705370426178, -0.006577782798558474 },
   { -0.2713087499141693, 0.1988029032945633, -0.10399939864873886, -0.01876334473490715, 0.17791372537612915, 0.1419745236635208, -0.41855108737945557, -0.1364552527666092, -0.23742137849330902, 0.023426668718457222 },
   { -0.22425377368927002, -0.008564362302422523, 0.17169520258903503, 0.12774524092674255, 0.043342020362615585, 0.21563081443309784, -0.2899782955646515, -0.23215579986572266, 0.019251903519034386, -0.11955519765615463 },
   { -0.15500719845294952, 0.04253626614809036, -0.11152781546115875, 0.02048490010201931, 0.06934084743261337, 0.11228002607822418, -0.18261820077896118, -0.19150777161121368, -0.14965489506721497, 0.1842970848083496 },
   { 0.05696609243750572, 0.1247195452451706, 0.026744388043880463, -0.03835528716444969, -0.05749347433447838, -0.052999455481767654, 0.043862439692020416, -0.08171907067298889, -0.10117723047733307, -0.08990178257226944 },
   { -0.10219768434762955, -0.006040194071829319, 0.19767919182777405, -0.20158542692661285, -0.17721228301525116, -0.0015967104118317366, -0.02007542923092842, -0.044916845858097076, -0.10840130597352982, 0.07637054473161697 },
   { 0.04099193215370178, 0.26575732231140137, 0.28864747285842896, -0.20308318734169006, -0.22362619638442993, -0.252128005027771, -0.06879832595586777, -0.2169950008392334, -0.36659830808639526, 0.20955348014831543 },
   { -0.0508822426199913, 0.07663979381322861, -0.20676203072071075, -0.03871425241231918, -0.07142624258995056, 0.1540706604719162, -0.039391081780195236, 0.1357174813747406, -0.06598518043756485, 0.08705279976129532 },
   { -0.27228909730911255, 0.1251419633626938, -0.2996536195278168, 0.13313384354114532, 0.005852874368429184, 0.06894570589065552, -0.05295681208372116, 0.2365967333316803, -0.18965768814086914, 0.06240268796682358 },
   { -0.5189083814620972, 0.09097237884998322, -0.35118362307548523, -0.016977420076727867, -0.03256778419017792, 0.10232219099998474, 0.0233745276927948, 0.2871205806732178, -0.22799214720726013, 0.11972551792860031 },
   { -0.5633067488670349, -0.07079226523637772, -0.2813180983066559, -0.1852387636899948, 0.18106411397457123, 0.063965804874897, 0.0021467995829880238, 0.274962842464447, -0.40942761301994324, 0.2988344132900238 },
   { -0.29869240522384644, -0.16388316452503204, -0.5988020300865173, -0.19663606584072113, -0.002719287062063813, -0.2696314752101898, -0.12120877951383591, 0.162191241979599, -0.47642824053764343, 0.3201638162136078 },
   { -0.6037970185279846, 0.09365116059780121, -0.47604304552078247, -0.16269053518772125, 0.23441144824028015, -0.4037494361400604, -0.034790702164173126, 0.08733861148357391, -0.722554624080658, 0.3436400890350342 },
   { -0.6878584027290344, -0.0367945171892643, -0.07256939262151718, -0.06220651790499687, 0.15218272805213928, -0.10207345336675644, -0.4123636484146118, 0.15080206096172333, -0.5130758285522461, 0.2752399146556854 },
   { -0.7392702102661133, 0.21011315286159515, 0.045297879725694656, 0.03831914812326431, 0.3282608687877655, -0.015597433783113956, -0.3944168984889984, 0.29338017106056213, -0.480031818151474, 0.07984641939401627 },
   { -0.38567930459976196, 0.05707722157239914, -0.1102263331413269, -0.04579167813062668, 0.33316412568092346, 0.009564516134560108, -0.41893208026885986, 0.11462718993425369, -0.26063743233680725, 0.054110337048769 },
   { -0.275397390127182, 0.058531537652015686, 0.21632792055606842, -0.31482458114624023, 0.14498192071914673, 0.157287135720253, -0.3025391101837158, 0.20923300087451935, -0.026111099869012833, -0.097320556640625 },
   { -0.10478146374225616, 0.15330149233341217, 0.060486771166324615, -0.04215317219495773, -0.1157364696264267, 0.13882960379123688, -0.007884099148213863, -0.055055487900972366, -0.2594631314277649, -0.06928058713674545 },
   { 0.027985939756035805, 0.15963295102119446, -0.012912803329527378, 0.0468689426779747, -0.04491369426250458, 0.06406107544898987, 0.040430665016174316, -0.09291685372591019, -0.0138435959815979, -0.034636739641427994 },
   { -0.05815429240465164, 0.11824323982000351, -0.07168813794851303, 0.12055746465921402, -0.09783834964036942, -0.035528697073459625, -0.023095732554793358, 0.02630819007754326, 0.022236455231904984, 0.019380705431103706 },
   { -0.09111238270998001, 0.04913535341620445, -0.07167606800794601, -0.058146968483924866, -0.19390864670276642, 0.17629626393318176, -0.07385337352752686, -0.1575053483247757, 0.02730461396276951, 0.08601990342140198 },
   { 0.08306749165058136, 0.024912241846323013, 0.017014997079968452, -0.1339399516582489, -0.13630643486976624, 0.0005788696580566466, -0.16075173020362854, 0.07531531155109406, -0.12938594818115234, -0.1147041916847229 },
   { 0.10872526466846466, 0.12581636011600494, 0.013197154738008976, -0.05003393068909645, 0.15491770207881927, -0.0318310372531414, -0.12395431101322174, -0.08084993809461594, -0.04054605960845947, -0.03236599639058113 },
   { 0.13004055619239807, 0.39140912890434265, -0.18085333704948425, -0.017750123515725136, -0.002372974995523691, -0.009891289286315441, -0.1598053127527237, 0.019396958872675896, -0.14160002768039703, 0.012484549544751644 },
   { 0.15687969326972961, 0.14181473851203918, -0.13921983540058136, 0.05471169948577881, 0.020413286983966827, -0.0619361512362957, -0.1723850667476654, 0.07166475057601929, -0.1883179098367691, 0.08957285434007645 },
   { 0.11030533909797668, 0.2715376913547516, -0.3638375997543335, -0.004756574053317308, 0.0013677708338946104, -0.007996149361133575, -0.13327857851982117, 0.06809280067682266, 0.08157601952552795, -0.024675941094756126 },
   { -0.003986263182014227, 0.09823285043239594, -0.47205275297164917, -0.09989383071660995, 0.02444913238286972, -0.2247907519340515, -0.14171692728996277, 0.2730095386505127, -0.015439199283719063, 0.23405544459819794 },
   { -0.42391714453697205, 0.3756488263607025, -0.3433077335357666, -0.4485316574573517, 0.2947083115577698, -0.18042324483394623, -0.30576810240745544, 0.13947263360023499, 0.14284388720989227, 0.028767885640263557 },
   { -0.5524899363517761, 0.37410444021224976, 0.008863778784871101, -0.2560306489467621, 0.23179376125335693, -0.4960898458957672, -0.17241184413433075, 0.1159299910068512, 0.042891260236501694, 0.07293646037578583 },
   { -0.28597745299339294, -0.06030387431383133, 0.031675830483436584, -0.15239445865154266, 2.9070964956190437e-05, -0.13921388983726501, -0.3256814777851105, -0.005504983011633158, -0.01168201956897974, 0.19731637835502625 },
   { -0.10573942959308624, 0.006021220237016678, -0.06728622317314148, -0.08731573820114136, -0.12323347479104996, 0.07536621391773224, -0.17069903016090393, 0.10247589647769928, -0.040547460317611694, 0.12257613986730576 },
   { -0.12164735049009323, 0.09471400082111359, -0.026443738490343094, 0.12394814938306808, -0.12601691484451294, 0.14256952702999115, -0.12526953220367432, -0.010406624525785446, -0.15793508291244507, -0.031646113842725754 },
   { -0.03411596640944481, 0.16979268193244934, -0.021968187764286995, 0.02905595861375332, 0.01868928223848343, 0.09042441099882126, -0.0030793333426117897, 0.006727080326527357, 0.03665805608034134, 0.10053543001413345 },
   { -0.06911803036928177, -0.047236282378435135, 0.05854569748044014, 0.0021608774550259113, 0.07822372019290924, 0.025188427418470383, 0.049406591802835464, 0.023180898278951645, 0.04651293158531189, 0.02447134256362915 },
   { -0.08749966323375702, -0.008544770069420338, -0.04271845519542694, 0.026248188689351082, 0.02764950692653656, -0.05804595351219177, 0.023212650790810585, 0.01607544720172882, -0.06046925485134125, 0.04858807474374771 },
   { 0.03778521344065666, 0.07812716066837311, 0.08113493025302887, 0.04219091311097145, -0.110814668238163, -0.05898269638419151, -0.10033994168043137, 0.03893493488430977, 0.04101686552166939, 0.01759999431669712 },
   { -0.21751946210861206, -0.03510742634534836, -0.119761161506176, 0.044573746621608734, -0.17426028847694397, -0.09564987570047379, 0.24193519353866577, -0.11849509924650192, -0.08219306915998459, 0.003588097169995308 },
   { -0.1333523541688919, -0.04638129845261574, -0.1510322540998459, 0.10158482939004898, -0.20363742113113403, -0.2039048671722412, 0.4100162982940674, -0.21656212210655212, -0.07222332805395126, -0.21793018281459808 },
   { -0.41625717282295227, 0.18250378966331482, -0.08067604899406433, -0.2047872692346573, -0.33797895908355713, 0.13144385814666748, 0.5111050605773926, -0.3507269322872162, -0.24413326382637024, -0.4194064140319824 },
   { -0.12237481772899628, 0.053251635283231735, -0.16706012189388275, -0.1682576984167099, -0.33161625266075134, 0.0229474026709795, 0.4179556667804718, -0.32602566480636597, -0.12714031338691711, -0.3979647755622864 },
   { -0.059206586331129074, 0.22509688138961792, -0.28351709246635437, -0.07518266886472702, -0.1644912213087082, -0.2046453207731247, 0.3358827531337738, -0.37198296189308167, -0.2932417094707489, -0.36053547263145447 },
   { -0.20378485321998596, 0.05145787447690964, -0.16551141440868378, -0.08256508409976959, -0.1750834882259369, -0.05135635286569595, 0.3863595426082611, -0.11959266662597656, -0.23720088601112366, -0.3544519543647766 },
   { -0.1571713536977768, 0.14839263260364532, -0.04429110884666443, 0.018081584945321083, -0.16646254062652588, -0.06090811267495155, 0.04223603382706642, -0.30771932005882263, -0.035331763327121735, -0.3761560618877411 },
   { -0.1900828629732132, -0.06455077975988388, -0.20156213641166687, 0.05397432669997215, -0.3091987371444702, 0.2222667634487152, 0.1873784363269806, -0.304245263338089, -0.14900732040405273, 0.021526938304305077 },
   { -0.24094462394714355, -0.15756835043430328, -0.09224550426006317, -0.015957247465848923, -0.01787635125219822, -0.20532000064849854, 0.4193815290927887, -0.23131485283374786, -0.15709660947322845, -0.13497774302959442 },
   { 0.004498016554862261, -0.09846124798059464, 0.11907798796892166, -0.006131007336080074, 0.08139082789421082, -0.18027766048908234, 0.10763482004404068, -0.04149894788861275, 0.010510706342756748, -0.2936808466911316 },
   { -0.08805853128433228, -0.028205811977386475, 0.004152518697082996, -0.1369490623474121, 0.045952506363391876, 0.21836934983730316, 0.04276089742779732, -0.15294867753982544, -0.1668580174446106, -0.0588010810315609 },
   { 0.01874789409339428, 0.03290972113609314, 0.022900154814124107, 0.058703724294900894, -0.01561187393963337, -0.05888432636857033, 0.058719415217638016, -0.000986474216915667, -0.06288589537143707, -0.06332694739103317 },
   { 0.06559571623802185, -0.07166340202093124, -0.05952494218945503, 0.013492073863744736, -0.06255371868610382, -0.004019285086542368, 0.0076577928848564625, 0.07465380430221558, -0.025021031498908997, -0.12595973908901215 },
   { -0.18449519574642181, -0.21643958985805511, -0.0868748128414154, 0.11523370444774628, -0.0677672028541565, 0.023173270747065544, 0.11291705071926117, -0.06340154260396957, -0.06877873092889786, -0.15273252129554749 },
   { -0.2674403190612793, -0.12820258736610413, -0.09342404454946518, 0.09933393448591232, -0.2330046147108078, -0.21971307694911957, 0.3436774015426636, -0.2313915342092514, -0.20325486361980438, -0.2716550827026367 },
   { -0.38287144899368286, 0.11698244512081146, -0.13978727161884308, -0.09235884994268417, -0.13423918187618256, -0.2485324889421463, 0.25527316331863403, -0.3754376769065857, 0.20079538226127625, -0.44040659070014954 },
   { -0.10797455906867981, 0.29621851444244385, -0.08961600810289383, -0.27992475032806396, 0.0019543946254998446, 0.127726212143898, 0.2554108500480652, -0.11320201307535172, 0.005740291904658079, -0.728584349155426 },
   { -0.07119712978601456, 0.39208245277404785, -0.3469112515449524, -0.07790074497461319, 0.19477160274982452, -0.05056794360280037, 0.21134398877620697, -0.46246257424354553, -0.18329598009586334, -0.5494188666343689 },
   { -0.11304570734500885, 0.317825049161911, -0.360879510641098, -0.2983054518699646, 0.0983135774731636, 0.002898265840485692, 0.15706036984920502, -0.16237260401248932, -0.048972006887197495, -0.28745198249816895 },
   { -0.2303217351436615, 0.26315462589263916, -0.3175986111164093, -0.23274588584899902, 0.2888765037059784, 0.17522475123405457, 0.04644804075360298, -0.2687627375125885, -0.08734642714262009, -0.30682817101478577 },
   { -0.1985369473695755, 0.11637722700834274, -0.2886359989643097, -0.23294441401958466, 0.09618975967168808, 0.39700251817703247, 0.10141084343194962, -0.27779659628868103, 0.00745860580354929, -0.2584780156612396 },
   { -0.20847682654857635, 0.09632022678852081, -0.21830637753009796, -0.08069980144500732, 0.14222058653831482, 0.17825809121131897, 0.18661606311798096, -0.5284627676010132, -0.11497851461172104, -0.21624812483787537 },
   { -0.05690944939851761, 0.02619750052690506, 0.06710211932659149, -0.13796819746494293, 0.1929461658000946, 0.01704801619052887, 0.07626699656248093, -0.41899800300598145, -0.03997451812028885, 0.046846937388181686 },
   { 0.007743084337562323, 0.13366979360580444, 0.10232304781675339, 0.11392392218112946, 0.1266603022813797, 0.13412775099277496, -0.12986327707767487, -0.2857743203639984, -0.09404318034648895, -0.35945531725883484 },
   { -0.24314333498477936, -0.08334013819694519, -0.09747477620840073, 0.04078289493918419, -0.03671970218420029, 0.14165222644805908, -0.036567602306604385, -0.36819565296173096, 0.1199709102511406, -0.24444988369941711 },
   { -0.010728069581091404, -0.0375143438577652, -0.14588062465190887, 0.1323487013578415, -0.05029672384262085, -0.19825439155101776, -0.11964113265275955, 0.08098168671131134, -0.053732842206954956, -0.10618606209754944 },
   { -0.08056788146495819, -0.03601307049393654, -0.001511920359916985, 0.170450821518898, -0.07685178518295288, -0.12651345133781433, -0.032668985426425934, 0.0839461237192154, -0.20262840390205383, -0.1726560890674591 },
   { -0.18606328964233398, -0.2605178654193878, 0.07958224415779114, 0.1007934957742691, -0.2645854353904724, -0.45101457834243774, 0.27663153409957886, 0.02656218595802784, -0.3548395037651062, -0.2754806876182556 },
   { -0.13607235252857208, -0.17666277289390564, 0.11214252561330795, -0.004995347931981087, 0.025890683755278587, 0.06421724706888199, 0.1363176703453064, -0.12720179557800293, 0.05250105634331703, -0.6626666188240051 },
   { -0.20010985434055328, -0.33182230591773987, -0.12571902573108673, -0.11961717903614044, 0.09316101670265198, 0.065171979367733, 0.1869325339794159, -0.032181382179260254, 0.19928660988807678, -0.021789032965898514 },
   { -0.05310067534446716, -0.09238854050636292, -0.03096860647201538, -0.21840523183345795, 0.16900019347667694, 0.115866519510746, 0.19386079907417297, -0.2036200910806656, 0.17205993831157684, 0.03948395699262619 },
   { -0.04046769067645073, 0.04766947031021118, 0.008490724489092827, -0.19790764153003693, 0.04632580280303955, -0.025929044932127, 0.1653064340353012, -0.28148171305656433, 0.11005423963069916, 0.17969250679016113 },
   { -0.02685103751718998, 0.033272743225097656, -0.056705158203840256, -0.23006752133369446, 0.2815505564212799, -0.07704012840986252, 0.17130039632320404, -0.2780414819717407, -0.0017851267475634813, -0.13578946888446808 },
   { -0.17930695414543152, 0.03238362818956375, -0.09972187131643295, -0.1890503466129303, 0.3366812765598297, 0.09706400334835052, 0.12003909796476364, -0.14618520438671112, 0.07763386517763138, -0.1901535540819168 },
   { -0.18009993433952332, 0.026493387296795845, -0.26726263761520386, -0.28566187620162964, 0.23150774836540222, 0.24592188000679016, 0.12058882415294647, 0.012186353094875813, -0.036199938505887985, -0.1472814381122589 },
   { -0.2531213164329529, 0.23979735374450684, -0.30768901109695435, -0.21048954129219055, 0.22534725069999695, 0.2582874596118927, 0.09462045878171921, 0.1224852204322815, -0.10453128814697266, -0.22370603680610657 },
   { -0.10069438070058823, 0.12559349834918976, -0.19442754983901978, -0.27363792061805725, 0.17648890614509583, 0.19361169636249542, -0.06936541944742203, 0.13101983070373535, -0.1676717847585678, -0.16953399777412415 },
   { -0.1381765455007553, -0.012050590477883816, -0.09354200959205627, -0.07068482786417007, 0.18571321666240692, 0.17636199295520782, -0.15246394276618958, -0.0540025494992733, -0.017887668684124947, -0.07877758145332336 },
   { 0.007996238768100739, -0.5443629026412964, 0.02770288847386837, -0.3388020694255829, 0.1008191928267479, 0.22061209380626678, -0.09728063642978668, -0.2857118546962738, -0.04680938646197319, -0.06508225947618484 },
   { 0.022543488070368767, -0.01858186349272728, -0.025913827121257782, 0.16673724353313446, -0.08429336547851562, -0.23024991154670715, -0.05563657358288765, 0.001764977816492319, -0.12544256448745728, -0.1473885327577591 },
   { -0.004425735678523779, 0.010718999430537224, 0.08546610176563263, 0.38097503781318665, -0.2532248795032501, -0.1848624050617218, -0.16478703916072845, -0.02422061562538147, -0.34360480308532715, -0.1964452862739563 },
   { -0.23302024602890015, 0.006736684590578079, 0.3108012080192566, 0.1579803228378296, -0.24944372475147247, -0.26037096977233887, 0.23681841790676117, -0.4626235067844391, -0.0853482335805893, -0.014258199371397495 },
   { -0.10673537850379944, -0.2844555974006653, 0.08058778941631317, -0.004341071005910635, 0.00108996219933033, -0.03725975379347801, 0.24023906886577606, -0.2758975923061371, 0.09133829921483994, 0.3356325924396515 },
   { -0.1446533203125, -0.38396045565605164, -0.04009362310171127, 0.04772549122571945, 0.11523178219795227, -0.023874783888459206, 0.15816383063793182, -0.31647878885269165, 0.03293308988213539, 0.24026191234588623 },
   { -0.01820254698395729, -0.23573942482471466, -0.02428729087114334, -0.09394089132547379, 0.026395956054329872, -0.08087942749261856, 0.12484495341777802, -0.20009861886501312, 0.06250017881393433, 0.24298855662345886 },
   { 0.032875530421733856, -0.24245715141296387, -0.07810542732477188, -0.05547633767127991, -0.05482230708003044, 0.012615985237061977, 0.17117634415626526, -0.1612137407064438, 0.11924707144498825, 0.09324429929256439 },
   { -0.08165151625871658, -0.01851927489042282, 0.05727170407772064, 0.02455659583210945, 0.02700403891503811, -0.0599774569272995, 0.17868535220623016, -0.19785095751285553, 0.015267637558281422, 0.07609373331069946 },
   { -0.062371790409088135, -0.015751788392663002, -0.001622713403776288, 0.04258230701088905, 0.331720232963562, -0.12065538018941879, 0.10694511234760284, -0.133672297000885, 0.09232234209775925, -0.034956689924001694 },
   { -0.1653166264295578, -0.0030820858664810658, -0.052143458276987076, 0.03893784061074257, 0.3051895797252655, 0.0037116408348083496, 0.009977223351597786, 0.05756307393312454, -0.007251961622387171, -0.24155361950397491 },
   { -0.2026502788066864, 0.0186047051101923, -0.05700792744755745, -0.048854827880859375, 0.24233315885066986, -0.0008699545869603753, -0.03280282020568848, -0.057024531066417694, -0.12213846296072006, -0.17115840315818787 },
   { -0.03897177428007126, 0.11522305011749268, 0.06366131454706192, -0.062237437814474106, 0.148016557097435, -0.006212948821485043, -0.015213819220662117, 0.03279261663556099, -0.04009059816598892, -0.29728785157203674 },
   { -0.17197811603546143, -0.1746864765882492, -0.06426940858364105, 0.02574770525097847, 0.1609601378440857, 0.0015321028186008334, -0.10362549126148224, 0.002218433888629079, -0.0924234613776207, -0.16119636595249176 },
   { -0.19251753389835358, -0.6857508420944214, -0.09695210307836533, -0.6614162921905518, 0.1542065143585205, 0.2894802689552307, -0.3153984844684601, -0.09078584611415863, 0.0060743363574147224, -0.3873599171638489 },
   { -0.157593235373497, -0.06350056827068329, 0.07625901699066162, 0.02997664175927639, -0.15308727324008942, -0.1976320594549179, -0.07350146025419235, 0.029362753033638, -0.033757761120796204, -0.21123209595680237 },
   { -0.0350806787610054, 0.0003358428948558867, 0.056230660527944565, 0.11904661357402802, -0.16806715726852417, -0.20008441805839539, -0.16126832365989685, -0.07951682060956955, -0.07421207427978516, -0.0690908133983612 },
   { -0.1661563664674759, -0.004245061427354813, 0.18646644055843353, 0.054070159792900085, -0.11403511464595795, -0.11854825913906097, 0.1955854594707489, -0.2655111849308014, -0.0428173802793026, 0.23316457867622375 },
   { -0.0706581324338913, -0.12163402885198593, 0.01785181276500225, 0.03188615292310715, -0.05864240974187851, -0.06982264667749405, 0.08400093019008636, -0.22517719864845276, 0.027349265292286873, 0.24626491963863373 },
   { 0.1281738430261612, 0.025282463058829308, -0.1667879819869995, 0.034684520214796066, -0.041830845177173615, -0.11357229948043823, 0.09282446652650833, -0.16874729096889496, -0.030427400022745132, 0.15027298033237457 },
   { -0.02019423246383667, -0.20976029336452484, -0.08642814308404922, -0.04568114131689072, 0.07759065926074982, 0.00843158271163702, 0.14510220289230347, -0.03336373344063759, -0.10647246241569519, 0.0679813027381897 },
   { 0.009646478109061718, -0.029324214905500412, -0.09334997832775116, 0.058929942548274994, 0.007678504567593336, -0.06613606214523315, 0.015733938664197922, -0.1725742369890213, -0.130470409989357, 0.08386548608541489 },
   { 0.02225172333419323, -0.040000464767217636, -0.007906054146587849, 0.0792674869298935, 0.0017681256867945194, -0.3041359484195709, 0.12467797845602036, -0.01564410887658596, -0.07718835026025772, 0.05958295613527298 },
   { 0.030965451151132584, -0.11766993254423141, 0.04199368879199028, 0.26233288645744324, 0.037065133452415466, -0.38479873538017273, -0.005283812060952187, -0.011424361728131771, 0.022130755707621574, 0.12469088286161423 },
   { -0.1255377233028412, -0.16267411410808563, 0.01693161018192768, 0.2264726459980011, 0.13288740813732147, -0.34485843777656555, -0.12050134688615799, 0.031103231012821198, 0.12582607567310333, 0.053543876856565475 },
   { -0.12703219056129456, -0.1647118479013443, 0.06473778933286667, 0.21525342762470245, 0.11594991385936737, -0.42989715933799744, -0.07205689698457718, 0.059426113963127136, 0.1577608585357666, -0.03971046209335327 },
   { 0.019662603735923767, 0.020425906404852867, 0.09233903139829636, 0.13947708904743195, 0.1240629032254219, -0.34019458293914795, -0.15737518668174744, 0.08460000157356262, 0.11686830222606659, -0.2012033313512802 },
   { -0.07941048592329025, -0.14903269708156586, -0.015676423907279968, -0.24293088912963867, 0.1475415825843811, -0.004385341424494982, -0.15566258132457733, 0.04205646738409996, 0.1372196525335312, -0.2702420651912689 },
   { -0.36517736315727234, -0.013473783619701862, -0.08360375463962555, -0.4936530590057373, 0.025461118668317795, 0.2641262710094452, 0.03708215430378914, -0.1974204033613205, -0.007400845643132925, -0.24759487807750702 },
   { -0.11053309589624405, -0.042251646518707275, 0.10727719962596893, 0.0006161609780974686, -0.2213299423456192, -0.1608872264623642, -0.1655389964580536, 0.1710183471441269, 0.034961067140102386, -0.2459927648305893 },
   { -0.03011046163737774, -0.22556346654891968, 0.10400427877902985, 0.12491098791360855, -0.04891695827245712, -0.07053936272859573, -0.277461975812912, -0.03877999633550644, -0.007631723303347826, -0.10573160648345947 },
   { 0.07808339595794678, -0.09803256392478943, 0.093966044485569, 0.13252325356006622, -0.16979794204235077, -0.08375900983810425, 0.1134561076760292, -0.03343386575579643, -0.0755452811717987, 0.12036565691232681 },
   { 0.16881775856018066, 0.06944991648197174, -0.06278156489133835, 0.16367487609386444, -0.013653079979121685, -0.09407605230808258, 0.1656654328107834, -0.16854093968868256, -0.07369381189346313, 0.08893013000488281 },
   { 0.11335432529449463, 0.07384306192398071, -0.05680977553129196, 0.16319067776203156, 0.08539306372404099, -0.04948803409934044, 0.06638552993535995, -0.04810794070363045, -0.14631697535514832, 0.09827294200658798 },
   { 0.030671648681163788, 0.06717415153980255, -0.13841508328914642, 0.1631322205066681, -0.030100706964731216, -0.06685805320739746, -0.032247770577669144, -0.00034597027115523815, -0.2240498960018158, 0.01373933907598257 },
   { 0.09117618203163147, -0.0059122564271092415, -0.05709792301058769, 0.21468977630138397, 0.02191690355539322, -0.0014841603115200996, 0.018544670194387436, 0.0103915398940444, -0.07940047234296799, 0.0050791362300515175 },
   { 0.0048796492628753185, 0.20745639503002167, -0.008978304453194141, 0.2234657257795334, -0.17612051963806152, -0.31561771035194397, 0.003690870478749275, -0.01902708411216736, -0.05648272857069969, 0.06270862370729446 },
   { -0.040384791791439056, -0.09848232567310333, 0.0272243469953537, 0.11021390557289124, -0.026865154504776, -0.5183813571929932, -0.12654846906661987, 0.15783190727233887, 0.10398462414741516, 0.08653844892978668 },
   { -0.07172179967164993, -0.22423575818538666, 0.06742093712091446, 0.09859397262334824, -0.09013144671916962, -0.4467582702636719, -0.17363253235816956, 0.07617007195949554, 0.2188778668642044, -0.006729485932737589 },
   { 0.00943167507648468, -0.20433540642261505, 0.07781198620796204, 0.021876191720366478, 0.046048786491155624, -0.3987043499946594, -0.21326789259910583, 0.10301299393177032, 0.223131462931633, 0.02923029288649559 },
   { 0.1478617787361145, -0.045075077563524246, 0.06274875998497009, 0.02758581005036831, -0.1295490562915802, -0.2774946987628937, -0.2820873558521271, -0.06910274177789688, 0.2931365966796875, 0.08623093366622925 },
   { -0.040254924446344376, -0.1585593968629837, 0.1153903678059578, -0.3362884819507599, -0.02138453908264637, -0.04821942746639252, -0.05050218105316162, -0.36978650093078613, 0.2303706407546997, 0.08035511523485184 },
   { -0.13594289124011993, -0.3450961112976074, 0.2151171714067459, -0.28998202085494995, -0.08482315391302109, 0.3189816474914551, -0.08586333692073822, 0.06017002463340759, -0.11835621297359467, -0.3507031202316284 },
   { -0.024791961535811424, -0.030052898451685905, -0.21600820124149323, -0.04479637369513512, -0.1312854290008545, -0.22167626023292542, -0.19124698638916016, 0.054566122591495514, 0.0379851795732975, 0.12609702348709106 },
   { -0.18244385719299316, -0.04121460020542145, 0.04018000140786171, 0.07845290750265121, -0.4487645626068115, 0.03687272593379021, -0.13151460886001587, 0.24492162466049194, -0.02768438309431076, -0.025494998320937157 },
   { -0.004062964115291834, 0.11857008188962936, -0.0033490429632365704, 0.0034965730737894773, -0.19314399361610413, -0.008404022082686424, 0.09690182656049728, 0.037135012447834015, -0.16320331394672394, -0.037618912756443024 },
   { 0.20028150081634521, -0.004757357761263847, 0.03366577997803688, -0.05917865037918091, 0.08774371445178986, -0.12912686169147491, 0.11606839299201965, 0.1855810135602951, -0.28181886672973633, -0.03921828046441078 },
   { 0.22829245030879974, 0.14432109892368317, -0.049539584666490555, -0.12302246689796448, 0.057308126240968704, -0.09593559056520462, 0.045445069670677185, 0.07155545055866241, -0.12882280349731445, -0.1344224065542221 },
   { 0.15916556119918823, 0.017124656587839127, -0.07267280668020248, 0.07332214713096619, 0.08458448201417923, -0.0912087932229042, 0.04121222347021103, 0.18675383925437927, -0.12629081308841705, -0.28313353657722473 },
   { 0.06444596499204636, 0.19312182068824768, -0.08073291927576065, 0.08386001735925674, -0.18421857059001923, -0.004941488616168499, -0.060837388038635254, -0.08882596343755722, -0.06442533433437347, -0.18970386683940887 },
   { -0.18785054981708527, -0.003697172272950411, 0.05413065850734711, 0.10040615499019623, -0.3941045105457306, -0.17052888870239258, 0.049479175359010696, 0.03462359681725502, 0.04119284451007843, 0.03971519693732262 },
   { 0.04132238030433655, 0.05794545263051987, 0.11685335636138916, 0.08170782029628754, -0.10454822331666946, -0.3584968149662018, -0.16698399186134338, -0.0005586256738752127, 0.12061922252178192, 0.09696386754512787 },
   { 0.10279674828052521, -0.07802973687648773, 0.07556150108575821, 0.012790988199412823, 0.025165116414427757, -0.30200475454330444, -0.14171481132507324, 0.019454604014754295, 0.23350095748901367, 0.021752063184976578 },
   { 0.07484600692987442, -0.14933662116527557, 0.1817321926355362, -0.23082052171230316, 0.005814238451421261, -0.2814829349517822, -0.05349307507276535, -0.041065625846385956, 0.0926629975438118, 0.08002477884292603 },
   { 0.1712867170572281, -0.1475503295660019, 0.037934914231300354, -0.4193233549594879, -0.07678420096635818, -0.2799130082130432, -0.022247059270739555, -0.10742779076099396, 0.08685179799795151, 0.07018829137086868 },
   { 0.04113037511706352, -0.27390119433403015, 0.013913295231759548, 0.049043525010347366, -0.2198055237531662, -0.05624755844473839, -0.03061806783080101, -0.06452612578868866, 0.14710845053195953, -0.08199084550142288 },
   { -0.19113130867481232, -0.19947132468223572, 0.1668155938386917, -0.12627041339874268, -0.12943187355995178, 0.30095958709716797, -0.11455538868904114, -0.2941440939903259, -0.039075590670108795, -0.3495851457118988 },
   { -0.04756758734583855, -0.04480560123920441, -0.2203141301870346, -0.05139237269759178, 0.015297804027795792, -0.14320087432861328, -0.12852367758750916, 0.18604733049869537, -0.1088816374540329, -0.06193458288908005 },
   { -0.11229037493467331, -0.09152889251708984, -0.06725962460041046, 0.010772494599223137, -0.05045058950781822, 0.06876654177904129, -0.06607001274824142, 0.2658520042896271, 0.0883079543709755, -0.08505669981241226 },
   { 0.2236994504928589, -0.020520620048046112, -0.1196461170911789, -0.4128165543079376, -0.0460597462952137, 0.020494811236858368, -0.08332585543394089, 0.2497328221797943, -0.1309579759836197, -0.028624065220355988 },
   { 0.18665233254432678, 0.06498555839061737, 0.04418457671999931, -0.36609962582588196, -0.027779405936598778, -0.10336754471063614, -0.0008642167667858303, 0.3041257858276367, 0.10820773243904114, -0.16866327822208405 },
   { 0.0983855128288269, 0.14134594798088074, 0.0835266262292862, -0.2990736961364746, 0.10957614332437515, -0.07119303196668625, 0.07908499240875244, 0.34282538294792175, 0.10191010683774948, -0.28166934847831726 },
   { 0.08037637919187546, 0.03673781454563141, 0.10129977017641068, -0.20051461458206177, -0.10901276022195816, -0.05493432655930519, 0.03632450848817825, 0.1942589432001114, 0.11170009523630142, -0.2727459669113159 },
   { -0.055564768612384796, 0.09598783403635025, 0.035379886627197266, -0.10251688212156296, -0.17506827414035797, -0.05463138595223427, 0.009015189483761787, -0.03430933505296707, 0.07712607830762863, -0.10650108009576797 },
   { -0.23597198724746704, 0.04061904922127724, 0.18970216810703278, 0.050359200686216354, -0.1709982305765152, -0.15482160449028015, -0.08805440366268158, -0.031726110726594925, 0.04444947838783264, 0.13436095416545868 },
   { -0.008569137193262577, -0.07836053520441055, 0.08799757063388824, -0.08916380256414413, -0.09613551944494247, -0.05775972828269005, 0.022778483107686043, -0.04502936825156212, -0.09965036064386368, 0.13854984939098358 },
   { 0.12891902029514313, -0.32696273922920227, -0.0547289103269577, 0.010626361705362797, -0.11588525027036667, -0.08076940476894379, 0.03187517449259758, 0.1281929463148117, 0.005417194217443466, -0.034902025014162064 },
   { 0.08942949771881104, -0.043022166937589645, -0.11427231878042221, -0.09527365863323212, -0.0809800922870636, -0.03634067252278328, 0.1339927315711975, 0.05169561505317688, -0.11327657848596573, 0.1310628056526184 },
   { 0.12506137788295746, -0.09749854356050491, -0.04847979545593262, -0.2381781041622162, -0.0907333716750145, -0.09084784984588623, 0.1055549755692482, -0.040854886174201965, -0.22223639488220215, 0.10801415890455246 },
   { 0.11149009317159653, -0.16861194372177124, -0.10435662418603897, 0.05461416393518448, -0.0883457213640213, 0.08606869727373123, 0.15022790431976318, -0.060922231525182724, -0.01614123396575451, -0.0910552591085434 },
   { -0.4444862902164459, -0.03521798551082611, 0.28166279196739197, -0.366025447845459, -0.1587679535150528, 0.019094184041023254, 0.10155138373374939, -0.2329861968755722, 0.1026787981390953, -0.20210431516170502 },
   { 0.14122489094734192, 0.042429715394973755, -0.13069279491901398, -0.21582676470279694, -0.10108918696641922, -0.03803670406341553, -0.16227783262729645, 0.19762325286865234, -0.1307065635919571, 0.11321122199296951 },
   { 0.1163654699921608, -0.21207793056964874, -0.08625003695487976, -0.3060712218284607, 0.20616427063941956, 0.06740031391382217, 2.1861394998268224e-05, 0.1236470490694046, -0.017572393640875816, -0.07735247910022736 },
   { 0.08447109162807465, 0.030396845191717148, 0.03218118101358414, -0.3484923243522644, 0.0816468670964241, 0.02803434617817402, -0.037028536200523376, 0.020038101822137833, 0.1431187242269516, -0.022740919142961502 },
   { 0.030853761360049248, -0.0468887984752655, 0.16301506757736206, -0.4653578996658325, -0.042419977486133575, -0.16778910160064697, -0.04164066165685654, 0.20362849533557892, 0.1999969482421875, -0.24329134821891785 },
   { 0.07747559249401093, -0.06372617930173874, 0.21593314409255981, -0.36088863015174866, 0.04496106132864952, -0.19339391589164734, 0.08802003413438797, 0.05849967896938324, 0.24876800179481506, -0.29989200830459595 },
   { 0.0438116230070591, 0.08405464887619019, 0.17508968710899353, -0.17462797462940216, -0.006106773857027292, -0.06392709165811539, 0.01888304576277733, 0.07160776108503342, 0.21940959990024567, -0.2575192451477051 },
   { 0.057590778917074203, 0.04786650836467743, 0.24910058081150055, -0.15183696150779724, -0.09730183333158493, -0.13952608406543732, 0.01787393167614937, -0.10736460983753204, 0.14172261953353882, -0.00905932579189539 },
   { -0.010801779106259346, -0.11896970123052597, 0.18124893307685852, -0.06121907755732536, -0.08610063791275024, -0.004943855572491884, -0.1289498507976532, -0.07756632566452026, 0.03052343800663948, 0.18587134778499603 },
   { 0.014119783416390419, -0.31098800897598267, 0.030595721676945686, -0.03055613860487938, 0.0004159956006333232, 0.06457056850194931, -0.004357240162789822, -0.052034057676792145, -0.1868562251329422, 0.16873164474964142 },
   { 0.08996672183275223, -0.20971080660820007, -0.1527348756790161, 0.03303375467658043, -0.07448850572109222, 0.012137374840676785, 0.12724566459655762, 0.10734248161315918, -0.1472282111644745, 0.06622930616140366 },
   { 0.05754303187131882, 0.025166288018226624, -0.2419363409280777, 0.042159274220466614, -0.0672772154211998, -0.0708807110786438, 0.039069753140211105, 0.154563307762146, -0.08838110417127609, 0.00781290140002966 },
   { 0.16910624504089355, -0.02125224471092224, -0.21455630660057068, 0.016200227662920952, 0.008094914257526398, -0.09508376568555832, 0.09386628866195679, -0.025970982387661934, -0.04501807689666748, -0.08226009458303452 },
   { 0.14625926315784454, -0.005378319416195154, -0.25170183181762695, -0.016573652625083923, 0.01109034102410078, 0.11101486533880234, 0.015770403668284416, -0.12012602388858795, 0.049213092774152756, -0.22649194300174713 },
   { -0.2812398374080658, 0.24677768349647522, 0.16299112141132355, -0.38871854543685913, -0.10481026023626328, -0.183497816324234, -0.04200713336467743, 0.03451669216156006, -0.11767683923244476, -0.08299722522497177 },
   { -0.05966651067137718, -0.12267988920211792, 0.16382764279842377, 0.07174516469240189, 0.011035778559744358, -0.2405155599117279, -0.12476717680692673, 0.12032533437013626, -0.15683653950691223, 0.07234416157007217 },
   { 0.028741007670760155, -0.12027352303266525, 0.20416337251663208, -0.11484786123037338, 0.12632402777671814, 0.03413398936390877, 0.08606128394603729, -0.032272111624479294, -0.17006666958332062, 0.0639059916138649 },
   { -0.0012495866976678371, -0.07075285911560059, 0.21090790629386902, -0.10411089658737183, 0.13097825646400452, 0.02038433402776718, -0.12699203193187714, -0.05038752406835556, -0.05610399320721626, -0.011466264724731445 },
   { 0.03562880679965019, 0.09011006355285645, 0.16017036139965057, -0.250461608171463, 0.011307449080049992, -0.10604120790958405, -0.1515665352344513, 0.024682557210326195, 0.0881693959236145, -0.018993418663740158 },
   { -0.017543617635965347, 0.19610461592674255, 0.028827426955103874, -0.3699200451374054, 0.22952203452587128, -0.12808369100093842, -0.023332295939326286, 0.10823460668325424, 0.15959176421165466, -0.12120398133993149 },
   { -0.0028508699033409357, 0.06318744271993637, 0.07006681710481644, -0.23761633038520813, 0.06623820215463638, -0.138198584318161, -0.08886734396219254, -0.00781470537185669, 0.1041155532002449, -0.0057197012938559055 },
   { 0.00962209701538086, -0.1161571741104126, 0.09253857284784317, -0.16451285779476166, 0.05251770094037056, -0.0880122184753418, -0.04889379441738129, 0.09390835464000702, 0.061799146234989166, 0.009975048713386059 },
   { -0.035793740302324295, -0.2674718499183655, 0.04004766792058945, 0.016105642542243004, -0.02924272045493126, 0.008239955641329288, -0.028024625033140182, -0.01009105984121561, 0.10843569785356522, 0.040895015001297 },
   { -0.02452162653207779, -0.4691178500652313, -0.03219756856560707, 0.05900679901242256, 0.019253425300121307, -0.012940431013703346, 0.04164415970444679, 0.07702892273664474, 0.018447764217853546, 0.01462243776768446 },
   { 0.034612566232681274, -0.5551884174346924, -0.21799445152282715, 0.07735459506511688, -0.16684411466121674, 0.061034806072711945, 0.12109044939279556, -0.06003803387284279, 0.052963774651288986, -0.00892707984894514 },
   { 0.04309102147817612, -0.28074902296066284, -0.24981670081615448, 0.014416811056435108, -0.14799462258815765, 0.1416015625, 0.11512576043605804, 0.07475220412015915, 0.027226775884628296, -0.010981003753840923 },
   { 0.031213242560625076, -0.13070230185985565, -0.15799283981323242, 0.11567278206348419, -0.25087007880210876, 0.016861358657479286, 0.10242847353219986, -0.04292416572570801, 0.16361871361732483, -0.20913253724575043 },
   { 0.030263176187872887, 0.08302295953035355, -0.2688750922679901, -0.044878099113702774, -0.09381307661533356, 0.11038404703140259, -0.019630378112196922, -0.2680186927318573, 0.1251853108406067, -0.012874975800514221 },
   { -0.0834246575832367, 0.11584457010030746, 0.21029794216156006, -0.3195367753505707, -0.033453382551670074, -0.08570024371147156, 0.09524808824062347, -0.35698384046554565, -0.2660061717033386, -0.027302352711558342 },
   { -0.10139460116624832, -0.01931431144475937, 0.16522309184074402, -0.06872952729463577, 0.042817018926143646, -0.23225568234920502, -0.12450960278511047, -0.13499678671360016, -0.029354166239500046, -0.08246968686580658 },
   { 0.04353305324912071, -0.04388780891895294, 0.12291870266199112, -0.1337612420320511, 0.02074328623712063, -0.007480935659259558, 0.09053696691989899, -0.19248642027378082, -0.08595725148916245, -0.1303281933069229 },
   { -0.051122769713401794, 0.08727842569351196, 0.11829119175672531, -0.05418912321329117, 0.16847151517868042, 0.12235209345817566, -0.01533815823495388, -0.11878155171871185, -0.14727114140987396, 0.00848368275910616 },
   { -0.01511291041970253, 0.07998547703027725, 0.1050022542476654, -0.15058666467666626, 0.1209302470088005, 0.07672629505395889, -0.1693762242794037, 0.07909786701202393, -0.03518898785114288, -0.03305475413799286 },
   { 0.08358679711818695, -0.0006759848911315203, 0.11128703504800797, -0.09152644872665405, 0.047944311052560806, -0.0015433721709996462, -0.06623571366071701, 0.11855992674827576, -0.10630732029676437, 0.08379344642162323 },
   { 0.06508112698793411, -0.006454952526837587, 0.034146249294281006, -0.12486633658409119, 0.10319220274686813, 0.02779199741780758, -0.06308054178953171, 0.05957853049039841, -0.16512049734592438, 0.08245626837015152 },
   { 0.07445019483566284, -0.11976407468318939, -0.09924007952213287, 0.043092455714941025, 0.03893671929836273, 0.035858411341905594, 0.09774912148714066, -4.6575536543969065e-05, -0.0747375562787056, -0.022422103211283684 },
   { -0.04543042182922363, -0.11738120019435883, -0.10111505538225174, 0.18434809148311615, 0.01689138449728489, 0.02123602293431759, 0.007073246408253908, -0.06758980453014374, 0.15053099393844604, 0.02096227928996086 },
   { 0.08830835670232773, -0.30790358781814575, -0.14037927985191345, 0.12157531082630157, -0.01568368449807167, 0.008111588656902313, -0.05662772059440613, -0.1105012595653534, 0.19185128808021545, -0.022148216143250465 },
   { -0.05435506999492645, -0.3860859274864197, -0.12645071744918823, 0.20035891234874725, -0.1593237966299057, 0.1671697199344635, -0.0608716756105423, -0.08653998374938965, 0.1821816861629486, -0.1087288185954094 },
   { -0.00944741815328598, -0.2681085765361786, -0.2368871420621872, 0.1849682778120041, -0.07142069190740585, 0.16319209337234497, 0.11057082563638687, -0.05643824115395546, 0.18130338191986084, -0.114329032599926 },
   { 0.04647461697459221, -0.22305434942245483, -0.20407834649085999, -0.014316411688923836, 0.05993406102061272, 0.1739489734172821, 0.0910494327545166, -0.18111789226531982, 0.1261540949344635, -0.16364900767803192 },
   { -0.09544165432453156, -0.07045570760965347, -0.008962053805589676, -0.1466771364212036, -0.10362124443054199, 0.13109292089939117, 0.0013601804384961724, -0.2053157389163971, 0.10773957520723343, 0.049852143973112106 },
   { -0.05135485529899597, 0.02957771345973015, 0.19730021059513092, -0.13545843958854675, -0.05879605934023857, -0.027186555787920952, -0.015922989696264267, 0.08617380261421204, -0.11946003139019012, -0.11373214423656464 },
   { -0.04446108639240265, 0.04907539114356041, 0.21984946727752686, -0.05409666523337364, 0.02347906492650509, -0.15296994149684906, -0.04195910692214966, -0.2649298906326294, -0.011895764619112015, -0.039086662232875824 },
   { 0.07286268472671509, -0.037918128073215485, 0.1253543645143509, -0.11080162227153778, 0.11324054002761841, -0.06988399475812912, -0.028356317430734634, 0.0027231229469180107, -0.006339402869343758, -0.06999842822551727 },
   { 0.08702846616506577, -0.02025744505226612, 0.11704092472791672, -0.09297624230384827, -0.0002916138037107885, -0.04367484524846077, -0.1121794655919075, -0.028137793764472008, 0.0062842038460075855, 0.009428799152374268 },
   { -0.03910452127456665, 0.1134483739733696, 0.0026520583778619766, -0.020342553034424782, 0.07469204068183899, -0.0417959950864315, -0.15004320442676544, 0.11742022633552551, -0.062398992478847504, 0.024238230660557747 },
   { -0.022837288677692413, 0.10798769444227219, 0.03521239385008812, 0.0014343969523906708, -0.023363906890153885, 0.03943023830652237, -0.03937157988548279, 0.11744382232427597, -0.22946889698505402, -0.046664610505104065 },
   { -0.09800287336111069, -0.0001696626713965088, -0.07697109878063202, 0.14837493002414703, 0.06913123279809952, -0.014517533592879772, 0.06882718205451965, 0.06675130873918533, -0.11127728223800659, 0.07822128385305405 },
   { -0.01467034313827753, 0.01069148350507021, -0.10803838819265366, 0.11004365235567093, -0.019376516342163086, 0.09001041203737259, -0.02132255584001541, 0.0340709425508976, -0.009876019321382046, -0.021574119105935097 },
   { -0.09510712325572968, 0.06682363152503967, -0.0570242702960968, 0.18515801429748535, -0.034856922924518585, 0.07378199696540833, -0.010509527288377285, 0.017503274604678154, -0.013066580519080162, -0.02802255004644394 },
   { -0.13946782052516937, 0.04457772150635719, -0.1819218397140503, 0.09055483341217041, 0.09317968785762787, 0.00922512635588646, -0.035569705069065094, 0.014035976491868496, 0.06967564672231674, -0.14731109142303467 },
   { -0.07735347002744675, -0.00035434006713330746, -0.03955024853348732, 0.21327705681324005, 0.03615093231201172, 0.10939451307058334, 0.009746192954480648, -0.10549163073301315, 0.062431417405605316, -0.25864556431770325 },
   { -0.1962810605764389, 0.1210285872220993, -0.08618707209825516, 0.002227270510047674, 0.10779635608196259, 0.060546863824129105, 0.0576249398291111, -0.02674621157348156, 0.10919274389743805, -0.15966187417507172 },
   { -0.12381337583065033, -0.009603124111890793, 0.025666436180472374, -0.05732171609997749, 0.10674142837524414, 0.12609221041202545, -0.14060789346694946, -0.11570574343204498, 0.007115441840142012, -0.07871967554092407 },
   { -0.229265034198761, 0.13751764595508575, 0.31876200437545776, -0.27923208475112915, -0.14085254073143005, 0.13023142516613007, -0.13459955155849457, -0.36234405636787415, -0.26031482219696045, -0.004023605491966009 },
   { -0.16680152714252472, 0.09163537621498108, 0.1470859795808792, -0.22497424483299255, -0.15562540292739868, 0.04062162712216377, -0.06919494271278381, -0.19784921407699585, 0.007837562821805477, 0.08320233970880508 },
   { -0.14811207354068756, -0.03932919353246689, 0.16413825750350952, 0.005133011378347874, -0.1566551774740219, -0.059106238186359406, -0.19029250741004944, -0.012425495311617851, -0.11441855877637863, -0.06303134560585022 },
   { 0.12712949514389038, 0.12334427237510681, 0.02694222703576088, 0.005402321461588144, -0.21609964966773987, -0.11373398452997208, -0.15925320982933044, 0.050448935478925705, -0.07792797684669495, -0.04572715610265732 },
   { 0.10529819130897522, -0.049887701869010925, -0.009920273907482624, -0.011219681240618229, -0.15733088552951813, -0.1200161799788475, 0.009020031429827213, 0.043188851326704025, 0.052827395498752594, 0.04733450710773468 },
   { 0.10593704879283905, 0.030999088659882545, -0.03308386728167534, -0.020118504762649536, 0.08592106401920319, -0.09988729655742645, 0.039853326976299286, 0.00815481785684824, -0.06185300275683403, 0.11418551951646805 },
   { 0.012833714485168457, 0.0020470828749239445, -0.03942590579390526, -0.07469532638788223, -0.07391607761383057, -0.05480377376079559, -0.027732692658901215, 0.009179267100989819, -0.07367914915084839, 0.07806776463985443 },
   { -0.06892501562833786, 0.013277474790811539, -0.015418017283082008, 0.08606153726577759, -0.08673464506864548, -0.09105514734983444, 0.04786517843604088, -0.005085920449346304, -0.1389792561531067, 0.06860922276973724 },
   { -0.031794141978025436, 0.06635713577270508, 0.003980093169957399, 0.11846154928207397, -0.11838755756616592, -0.016668492928147316, -0.014625566080212593, -0.052492957562208176, -0.01564660854637623, -0.04132410138845444 },
   { -0.17343012988567352, -0.04977365583181381, -0.177077516913414, 0.01100215781480074, -0.13147711753845215, -0.02658144012093544, 0.0751180648803711, -0.036658648401498795, 0.06258648633956909, -0.1295604109764099 },
   { -0.24497756361961365, 0.1558583527803421, -0.14999587833881378, -0.06017778068780899, -0.0941404178738594, 0.06177528575062752, 0.05045226216316223, 0.06776072829961777, 0.19624266028404236, 0.056138306856155396 },
   { -0.2546018958091736, 0.18029575049877167, -0.12394041568040848, -0.04441370069980621, 0.11009059101343155, -0.033047303557395935, 0.07022207230329514, 0.07457656413316727, 0.04631238803267479, -0.01893620751798153 },
   { -0.3032381534576416, 0.015478790737688541, -0.07342471182346344, -0.04507517069578171, -0.10091543942689896, 0.06876397132873535, -0.022902904078364372, -0.03859899193048477, 0.008581186644732952, 0.10369370132684708 },
   { -0.12691663205623627, 0.02504323422908783, 0.04355918988585472, -0.23056833446025848, 0.18287768959999084, 0.14503151178359985, -0.1210622638463974, 0.018790990114212036, -0.06387980282306671, 0.04331403225660324 },
   { -0.14523395895957947, -0.07242824882268906, 0.04149946942925453, -0.17238570749759674, 0.04342043399810791, 0.27238142490386963, -0.0031623858958482742, -0.16594961285591125, -0.2032104730606079, -0.06459879130125046 },
   { -0.0693548247218132, 0.04427765682339668, 0.0983525961637497, -0.14683470129966736, -0.10952482372522354, -0.053288836032152176, -0.15026675164699554, -0.09088218957185745, -0.2514503300189972, 0.011798026040196419 },
   { -0.01113201305270195, -0.05927934870123863, -0.10148752480745316, 0.11688990145921707, -0.07007458806037903, 0.12023814767599106, -0.02653597854077816, -0.01144329085946083, -0.11964891105890274, -0.038825925439596176 },
   { -0.042680878192186356, -0.18768449127674103, -0.09884265810251236, 0.09609424322843552, -0.2060501128435135, 0.055630218237638474, -0.1641228199005127, 0.10472839325666428, -0.033204056322574615, -0.06802572309970856 },
   { 0.04640452191233635, 0.00517041701823473, 0.08726081997156143, -0.012725022621452808, -0.043224580585956573, -0.021217916160821915, -0.20716729760169983, 0.09189409017562866, -0.08591379225254059, 0.1169637069106102 },
   { 0.07095656543970108, 0.039253588765859604, -0.0189528688788414, -0.08302434533834457, -0.027889566496014595, 0.04056957736611366, -0.06234920769929886, -0.045141782611608505, -0.09242117404937744, 0.024148037657141685 },
   { -0.09702590107917786, 0.10043670237064362, -0.020685382187366486, 0.07573963701725006, -0.22413522005081177, -0.10341843962669373, -0.01725500263273716, 0.06392061710357666, -0.07957318425178528, 0.1293923556804657 },
   { -0.03517907112836838, -0.039449501782655716, 0.08813886344432831, 0.07943366467952728, -0.18199743330478668, 0.0673666000366211, 0.047516513615846634, -0.07913046330213547, 0.03390810266137123, -0.005573139525949955 },
   { 0.06900183111429214, 0.12007637321949005, 0.15730270743370056, 0.04689003527164459, -0.229728102684021, 0.007311474997550249, 0.07102832943201065, -0.11865871399641037, -0.12312930822372437, 0.053670525550842285 },
   { 0.08452253043651581, 0.1148948073387146, 0.04571746289730072, 0.08924650400876999, -0.1822548508644104, 0.03799492493271828, 0.10423628985881805, -0.20916038751602173, -0.14477956295013428, 0.13061179220676422 },
   { 0.03143221512436867, 0.09012950956821442, -0.043209515511989594, 0.011280123144388199, -0.2022058665752411, 0.055756162852048874, 0.058947060257196426, -0.03943591192364693, -0.06124155595898628, 0.1041787639260292 },
   { 0.055572185665369034, 0.06283033639192581, -0.12389282137155533, 0.05121827498078346, -0.186410591006279, -0.09948462247848511, 0.08464907109737396, -0.05204444006085396, 0.05830669403076172, 0.16603530943393707 },
   { -0.009634803049266338, 0.09411776810884476, 0.07488346844911575, -0.17776592075824738, -0.06193132698535919, -0.12213630974292755, 0.0704779401421547, -0.06718239188194275, 0.04482174664735794, 0.12124631553888321 },
   { 0.007494100369513035, -0.027311209589242935, 0.07101594656705856, -0.2727411985397339, 0.035284023731946945, -0.10552956163883209, 0.02733510360121727, -0.0038281187880784273, 0.09789031744003296, -0.06333952397108078 },
   { -0.004201352596282959, -0.2122815102338791, 0.044857896864414215, -0.24449490010738373, -0.09909972548484802, 0.004097043536603451, -0.18458569049835205, -0.3447346091270447, 0.09991348534822464, 0.08485545217990875 },
   { -0.1978914886713028, -0.025773288682103157, -0.09218817949295044, -0.06928034871816635, 0.05429477617144585, 0.06753620505332947, -0.12001140415668488, -0.07626055181026459, -0.008545123040676117, 0.11227545142173767 },
   { -0.1279604136943817, -0.07199206203222275, -0.15535356104373932, 0.06734447926282883, -0.11589448153972626, -0.10316542536020279, 0.12431617081165314, -0.029369646683335304, -0.0675712451338768, -0.1601356416940689 },
   { -0.09634058177471161, -0.30011841654777527, -0.029784251004457474, 0.05259351059794426, -0.19221387803554535, -0.09873500466346741, 0.25706446170806885, -0.26707759499549866, -0.11843212693929672, -0.17395232617855072 },
   { -0.055216118693351746, 0.020212693139910698, 0.07137452065944672, -0.12473323941230774, -0.03349612280726433, -0.033982597291469574, 0.2123725712299347, -0.36551928520202637, 0.051195163279771805, -0.33893120288848877 },
   { 0.06608852744102478, 0.11323340982198715, 0.0030597015284001827, 0.03315719962120056, -0.19916559755802155, 0.01295213121920824, 0.20766431093215942, -0.5325897932052612, -0.02658909000456333, -0.36298948526382446 },
   { -0.08398500829935074, 0.10815891623497009, 0.006160376593470573, -0.05978497117757797, -0.22713567316532135, -0.0004946851986460388, 0.14653541147708893, -0.1862856149673462, 0.030263163149356842, -0.08324111253023148 },
   { 0.02217588946223259, -0.07409582287073135, 0.01392117328941822, 0.002241892507299781, -0.022808294743299484, 0.0706377774477005, -0.03567114099860191, -0.10498994588851929, 0.0671573355793953, 0.04667429253458977 },
   { -0.1645529568195343, -0.15553241968154907, 0.10621259361505508, 0.07128139585256577, 0.06149076297879219, 0.018296092748641968, 0.016181785613298416, -0.10949523001909256, 0.04859267547726631, -0.07421736419200897 },
   { -0.04586868733167648, -0.1879822462797165, 0.003257535630837083, 0.03761885315179825, -0.09650547057390213, -0.01848711632192135, -0.1283165067434311, -0.22585061192512512, 0.086543969810009, -0.049529749900102615 },
   { -0.009958755224943161, 0.004706324078142643, 0.1165834367275238, 0.14452829957008362, -0.14887695014476776, -0.04864829033613205, -0.0681878998875618, -0.35483458638191223, 0.04105287045240402, -0.026795435696840286 },
   { 0.0014131690841168165, -0.02802971936762333, -0.02418716438114643, 0.08428407460451126, -0.1866464763879776, -0.0957619845867157, 0.017430521547794342, -0.22996306419372559, -0.03472902625799179, -0.01323703583329916 },
   { -0.07872361689805984, -0.10226486623287201, -0.08298759162425995, 0.08209086209535599, -0.10248345881700516, -0.11376092582941055, -0.005360729992389679, -0.06944768130779266, 0.04982335865497589, -0.0602351538836956 },
   { -0.1783497929573059, -0.034048646688461304, -0.0752287432551384, 0.02828626148402691, -0.12265796214342117, 0.00883371103554964, 0.03389190509915352, -0.05813082680106163, -0.010001870803534985, -0.22688676416873932 },
   { -0.06769708544015884, -0.19577902555465698, -0.06840973347425461, -0.09607364982366562, -0.10515586286783218, 0.15780441462993622, 0.12719020247459412, -0.03627200797200203, 0.07703202962875366, -0.2506510317325592 },
   { -0.07324225455522537, -0.12187778949737549, 0.09703482687473297, -0.06019469350576401, -0.0018059872090816498, 0.04847056418657303, 0.0010940018109977245, -0.058945342898368835, -0.04477353394031525, -0.07420482486486435 },
   { -0.2211877703666687, -0.04599094018340111, 0.05516180396080017, 0.1486765444278717, -0.022626342251896858, -0.053231921046972275, 0.1910991668701172, -0.19407011568546295, -0.33772629499435425, -0.25364255905151367 },
   { -0.023868275806307793, 0.018946271389722824, -0.19454213976860046, 0.1325470209121704, 0.01810898259282112, 0.06802738457918167, 0.14902539551258087, 0.13448385894298553, -0.09207790344953537, -0.1970876157283783 },
   { 0.11590389162302017, -0.05861092731356621, -0.10826689004898071, 0.033487334847450256, 0.08103521913290024, 0.039569202810525894, 0.09967094659805298, 0.09649736434221268, -0.028224267065525055, 0.0005896229995414615 },
   { 0.07418867945671082, -0.011482920497655869, -0.14511226117610931, -0.11600583046674728, 0.16548576951026917, 0.10586609691381454, 0.026033813133835793, 0.1259300261735916, -0.012734882533550262, 0.08975674211978912 },
   { -0.00907639879733324, -0.007853993214666843, -0.07568961381912231, -0.04472294822335243, 0.13105927407741547, 0.1119450107216835, -0.04755108803510666, 0.07083306461572647, 0.0650465190410614, 0.016137709841132164 },
   { -0.033869024366140366, -0.038028690963983536, -0.016129745170474052, 0.03667735308408737, 0.020315518602728844, -0.01013206411153078, -0.05382348969578743, -0.00969682540744543, 0.047491654753685, 0.036418281495571136 },
   { -0.06400755792856216, -0.032921090722084045, 0.08342968672513962, -0.0032224429305642843, -0.06063011661171913, -0.07148139923810959, -0.07644768059253693, -0.07998083531856537, 0.07920164614915848, 0.030750352889299393 },
   { -0.06372489780187607, 0.03873291611671448, 0.06964527070522308, 0.06688789278268814, -0.06787346303462982, -0.09977753460407257, -0.05930742248892784, 0.08436142653226852, 0.07694404572248459, -0.007335324306041002 },
   { -0.005904973950237036, 0.07007389515638351, -0.007283422630280256, -0.010813122615218163, -0.13686548173427582, -0.00723270745947957, -0.15053023397922516, 0.021093739196658134, 0.07127994298934937, 0.02695091813802719 },
   { 0.048743732273578644, -0.07243034243583679, 0.11863552778959274, 0.06421182304620743, -0.14199678599834442, -0.06066734343767166, -0.15966375172138214, -0.09486829489469528, -0.01766604743897915, 0.00910903699696064 },
   { 0.044705264270305634, 0.05733828246593475, 0.14053185284137726, 0.06624162942171097, -0.020448489114642143, -0.13204260170459747, -0.09698625653982162, -0.20276543498039246, 0.07010966539382935, 0.007128817029297352 },
   { 0.022736961022019386, 0.14211170375347137, 0.023699583485722542, 0.10372906178236008, -0.13067983090877533, -0.11882590502500534, 0.028156744316220284, -0.22372372448444366, 0.005619427189230919, 0.007553556002676487 },
   { 0.025761423632502556, -0.0831887498497963, 0.012395573779940605, 0.05199872702360153, 0.05640091374516487, -0.0007449674885720015, 0.01623513549566269, -0.24237486720085144, -0.060842759907245636, -0.15572591125965118 },
   { -0.09740635007619858, -0.14745888113975525, -0.12586577236652374, -0.00578515836969018, 0.09090195596218109, 0.127675861120224, 0.014143436215817928, -0.25564756989479065, 0.08589652180671692, -0.2451980710029602 },
   { -0.15057282149791718, -0.041827090084552765, -0.0032193101942539215, 0.0922723338007927, 0.05263276770710945, -0.2080041915178299, 0.2177671492099762, 0.030869420617818832, 0.10783997923135757, -0.24926790595054626 },
   { 0.10764260590076447, -0.21093785762786865, -0.08891402930021286, 0.08174722641706467, 0.246966153383255, -0.0441570021212101, -0.08107419312000275, 0.06926284730434418, 0.01706705242395401, 0.04690413177013397 },
   { -0.04753350466489792, -0.10641282796859741, -0.004456210415810347, -0.13711507618427277, 0.13019481301307678, 0.014016116969287395, -0.08560916036367416, 0.037569209933280945, -0.07125024497509003, 0.11534736305475235 },
   { 0.02429300919175148, -0.08562932163476944, -0.07414238899946213, -0.04560338705778122, 0.1843603551387787, 0.04354393109679222, -0.19537562131881714, 0.07897128909826279, -0.08312900364398956, -0.02497563138604164 },
   { -0.13200050592422485, -0.10822835564613342, 0.015249854885041714, -0.015052974224090576, 0.038078323006629944, -0.05659687519073486, -0.21141622960567474, 0.14123515784740448, -0.0026189798954874277, -0.10441669821739197 },
   { -0.06061319634318352, -0.14921602606773376, 0.034757670015096664, 0.09165575355291367, -0.1662149280309677, 0.016756722703576088, -0.09565703570842743, 0.13103601336479187, 0.046813856810331345, 0.06615731120109558 },
   { 0.07226824760437012, -0.17587319016456604, 0.0013879651669412851, 0.005291374400258064, -0.18856260180473328, -0.0012075371341779828, -0.15354396402835846, -0.005160600412636995, 0.03620532155036926, 0.13799481093883514 },
   { 0.04625999182462692, -0.14103205502033234, 0.009672095999121666, 0.04423650726675987, -0.14024034142494202, -0.041992295533418655, -0.18851681053638458, 0.10409656167030334, 0.1563529074192047, 0.16476218402385712 },
   { 0.09799587726593018, -0.001641725772060454, -0.12640318274497986, -0.010791274718940258, -0.08356072753667831, -0.012017524801194668, -0.1922326385974884, -0.017425261437892914, 0.16563910245895386, 0.20917044579982758 },
   { 0.07904495298862457, 0.013403458520770073, -0.03552474454045296, 0.0072075664065778255, -0.12405725568532944, 0.0042339591309428215, -0.09855938702821732, 0.07355641573667526, 0.06959165632724762, 0.018290340900421143 },
   { 0.14316947758197784, 0.02610340528190136, -0.07021541148424149, 0.03545477241277695, -0.04286082834005356, -0.14052945375442505, -0.12614113092422485, 0.0008015132043510675, 0.07551024109125137, 0.1642182618379593 },
   { 0.15014053881168365, -0.019229065626859665, -0.02383645623922348, 0.002692008391022682, -0.09841176122426987, -0.21313324570655823, -0.06646402180194855, -0.08693141490221024, -0.048301827162504196, 0.04880492389202118 },
   { 0.2308124452829361, -0.06433529406785965, 0.1116243377327919, -0.019899815320968628, 0.04748279228806496, -0.10752880573272705, -0.16121619939804077, -0.09841098636388779, 0.009548170492053032, 0.08889475464820862 },
   { 0.08184412121772766, -0.14113351702690125, -0.04765450209379196, 0.11920876055955887, 0.04643651470541954, 0.09821083396673203, -0.03717070817947388, -0.39173609018325806, 0.02686496078968048, -0.13104499876499176 },
   { 0.05477409437298775, -0.1706669181585312, -0.1084970161318779, -0.06018643453717232, -0.0029796690214425325, -0.1629195213317871, -0.14194348454475403, 0.049112699925899506, 0.24642178416252136, 0.0319226048886776 },
   { 0.04428417235612869, -0.1565842181444168, -0.0466240830719471, 0.04305968061089516, 0.04426060989499092, -0.0361463837325573, -0.17741598188877106, -0.05707291513681412, 0.028907226398587227, -0.01242584828287363 },
   { -0.020441364496946335, -0.013299571350216866, 0.014416876249015331, 0.10050617903470993, -0.07633525133132935, -0.19445684552192688, -0.1801450252532959, -0.0432770811021328, -0.06237100809812546, 0.07718966156244278 },
   { 0.06408042460680008, 0.18528999388217926, -0.19335801899433136, 0.06677894294261932, -0.0003651616279967129, -0.14500942826271057, 0.0364828035235405, 0.17275282740592957, 0.01954689435660839, 0.03739480674266815 },
   { 0.05251873657107353, -0.018071213737130165, -0.13822583854198456, 0.014766044914722443, -0.11631570011377335, -0.10306161642074585, -0.07168201357126236, 0.14570671319961548, 0.13783463835716248, 0.1041846051812172 },
   { -0.04959221929311752, -0.24277837574481964, -0.07233837991952896, -0.08871252089738846, -0.15117022395133972, -0.0252650436013937, -0.03026752546429634, 0.15876299142837524, 0.2789455056190491, 0.08810171484947205 },
   { 0.07397988438606262, 0.13106563687324524, -0.1618221253156662, -0.06042188033461571, -0.1404077261686325, -0.02298644930124283, -0.05184436962008476, 0.059073831886053085, 0.14775943756103516, 0.11140504479408264 },
   { 0.0908876359462738, 0.029615109786391258, 0.07490541785955429, -0.0294246394187212, -0.10367073118686676, 0.05627023056149483, -0.11235260218381882, 0.024633007124066353, 0.04961837828159332, 0.06507079303264618 },
   { 0.05839778110384941, 0.05003729835152626, -0.02091497741639614, -0.05264761671423912, -0.06223716959357262, -0.10948921740055084, -0.12165035307407379, -0.049344196915626526, 0.004116907250136137, 0.058079350739717484 },
   { 0.2128690928220749, -0.006303633097559214, -0.13252153992652893, -0.10872986912727356, -0.08375249803066254, -0.11908085644245148, -0.11538669466972351, 0.004058604594320059, 0.036889348179101944, 0.13409897685050964 },
   { 0.09978875517845154, -0.056809328496456146, -0.07472247630357742, 0.05356452614068985, -0.02596837840974331, -0.07128673046827316, -0.17839562892913818, 0.13627338409423828, 0.10593383014202118, 0.023787343874573708 },
   { 0.013055095449090004, 0.003997397143393755, -0.012411213479936123, -0.03228016570210457, -0.16366858780384064, -0.14893986284732819, -0.16388656198978424, 0.00018547647050581872, 0.10438870638608932, 0.1574094146490097 },
   { 0.1289491206407547, 0.043381065130233765, -0.039056915789842606, -0.03470379486680031, 0.05758030340075493, -0.17361235618591309, -0.1510949432849884, 0.03328888863325119, -0.04395977780222893, 0.052625663578510284 },
   { 0.15760111808776855, -0.21369582414627075, -0.13923239707946777, -0.042802538722753525, 0.07268223166465759, 0.05088237300515175, -0.2647879421710968, -0.19345426559448242, -0.029042499139904976, 0.04945984110236168 },
   { 0.04450713098049164, -0.19920744001865387, -0.4234243929386139, -0.022728219628334045, -0.11468543112277985, -0.022849678993225098, -0.3784843385219574, 0.27311161160469055, 0.1396724283695221, 0.12187110632658005 },
   { -0.023325778543949127, -0.18166646361351013, 0.061919569969177246, 0.011299707926809788, -0.13854463398456573, -0.21743004024028778, -0.24715526401996613, 0.08024024218320847, 0.07989872992038727, 0.06278777122497559 },
   { -0.05437654256820679, -0.007607411593198776, 0.2691721022129059, 0.19950832426548004, -0.04026017338037491, -0.21598169207572937, 0.060220085084438324, -0.06177983433008194, -0.13895384967327118, 0.064874067902565 },
   { -0.075265072286129, -0.0024212475400418043, 0.1043139174580574, 0.01961791142821312, -0.05271444842219353, -0.18903400003910065, 0.07926518470048904, 0.24157372117042542, 0.11446033418178558, -0.01732705719769001 },
   { 0.1043265089392662, -0.155650794506073, -0.3226342499256134, -0.14480039477348328, 0.0557146854698658, -0.008356683887541294, 0.09298244118690491, 0.11597246676683426, 0.19915993511676788, 0.08688352257013321 },
   { -0.052980221807956696, -0.03960980102419853, -0.21534396708011627, -0.23798777163028717, -0.07293812185525894, 0.09122715145349503, 0.14792633056640625, -0.04670295864343643, 0.24766167998313904, 0.10329244285821915 },
   { -0.13824686408042908, 0.10400582104921341, -0.1654920130968094, -0.15350830554962158, -0.09130559116601944, 0.10463888198137283, 0.09581749886274338, -0.017805302515625954, 0.14484453201293945, -0.05176389589905739 },
   { -0.0542929507791996, 0.06934475153684616, -0.1849699169397354, -0.1135098934173584, -0.08788169920444489, 0.047445423901081085, 0.1627351939678192, -0.09643090516328812, 0.12882770597934723, 0.05834652855992317 },
   { 0.020765403285622597, 0.07093758881092072, -0.12111443281173706, 0.03644559532403946, -0.002474391832947731, -0.03406758978962898, 0.055477697402238846, -0.05830439552664757, -0.08223738521337509, 0.07996217906475067 },
   { -0.026767969131469727, 0.013334259390830994, -0.0883989930152893, -0.07727288454771042, 0.04677645489573479, -0.13861791789531708, -0.09826355427503586, 0.08736694604158401, -0.04918160289525986, 0.10241314768791199 },
   { 0.09344489872455597, -0.058205027133226395, -0.03543722257018089, -0.033510249108076096, -0.09424179792404175, -0.16745801270008087, -0.1558225005865097, -0.001086231553927064, -0.05971112474799156, 0.12842091917991638 },
   { 0.03661555424332619, 0.07010214775800705, -0.09540843963623047, -0.11335569620132446, -0.028828926384449005, -0.47429195046424866, 0.1072332039475441, -0.05807597562670708, 0.02868877351284027, 0.2238025665283203 },
   { 0.1002998873591423, 0.06372517347335815, -0.08415160328149796, -0.047023605555295944, -0.034390296787023544, -0.261517733335495, 0.008230134844779968, -0.021036066114902496, 0.006685717962682247, 0.12742307782173157 },
   { 0.13982678949832916, -0.3226930797100067, -0.04233790934085846, 0.020734649151563644, 0.036493685096502304, 0.11022326350212097, -0.19855371117591858, -0.21679465472698212, 0.08262092620134354, 0.00023893191246315837 },
   { 0.1670708954334259, 0.12567298114299774, -0.2559643089771271, -0.07712258398532867, -0.025941310450434685, -0.20457929372787476, -0.3177650570869446, 0.0581696480512619, -0.14329470694065094, 0.21799814701080322 },
   { 0.08691706508398056, 0.010311421938240528, 0.17247498035430908, 0.15628962218761444, -0.03860925883054733, -0.5127937197685242, 0.041070811450481415, 0.10771690309047699, 0.06619039177894592, -0.08659152686595917 },
   { 0.021765395998954773, 0.02844388596713543, 0.5334143042564392, 0.06685558706521988, -0.15082618594169617, -0.3776618242263794, -0.10237710177898407, -0.09411986917257309, -0.26545822620391846, -0.013670672662556171 },
   { 0.04031744226813316, 0.13296808302402496, 0.21150809526443481, -0.1307743489742279, -0.028207462280988693, -0.1520099639892578, 0.04383065551519394, -0.06419150531291962, -0.026567934080958366, 0.016064686700701714 },
   { 0.04008736088871956, -0.18994557857513428, 0.1143457368016243, -0.20628565549850464, 0.06662729382514954, -0.06428985297679901, 0.09815074503421783, -0.1922876089811325, 0.17708967626094818, -0.030106857419013977 },
   { -0.11828656494617462, -0.23580843210220337, 0.04131917282938957, -0.18963995575904846, 0.18858633935451508, 0.0974150225520134, 0.15339282155036926, -0.18386180698871613, 0.10259885340929031, 0.0083339037373662 },
   { -0.20263667404651642, -0.02671625278890133, -0.134464830160141, -0.13900434970855713, 0.08117412775754929, 0.14464671909809113, 0.0882575735449791, -0.1512429565191269, 0.07427586615085602, 0.005458544939756393 },
   { -0.1408623307943344, 0.016252484172582626, -0.07576398551464081, 0.10650426149368286, 0.045920249074697495, 0.03548812493681908, 0.24766188859939575, -0.1044287383556366, -0.05300753191113472, 0.061810560524463654 },
   { -0.1680442988872528, 0.1518620252609253, -0.2163742184638977, 0.03876613825559616, -0.08474800735712051, -0.05648119002580643, 0.08349230885505676, 0.0023289986420422792, 0.019093884155154228, 0.05246851220726967 },
   { -0.024239135906100273, -0.11507416516542435, -0.14207550883293152, 0.05971413850784302, 0.1893635094165802, -0.10073854774236679, -0.0358709879219532, 0.04227055609226227, -0.011745705269277096, 0.035813163965940475 },
   { 0.07590990513563156, -0.12265191227197647, -0.0545189306139946, -0.007996097207069397, -0.08239404112100601, -0.1595853865146637, -0.03656373545527458, 0.014000033028423786, -0.018616817891597748, 0.10693424940109253 },
   { 0.06047409027814865, -0.1254679262638092, -0.13189645111560822, -0.11629833281040192, -0.011769553646445274, -0.26442500948905945, 0.04946326091885567, 0.007895275019109249, -0.044426292181015015, 0.0206642784178257 },
   { 0.12316989153623581, -0.05480492487549782, -0.14512035250663757, 0.08214620500802994, -0.07008733600378036, -0.22978316247463226, 0.1432531476020813, 0.008713636547327042, 0.05304940417408943, 0.042813681066036224 },
   { 0.12029572576284409, -0.12628664076328278, -0.18615157902240753, -0.3128238916397095, -0.13809774816036224, 0.08787356317043304, 0.10293034464120865, -0.23223300278186798, 0.16049526631832123, 0.1119491308927536 },
   { -0.010555408895015717, 0.07842767983675003, 0.07764200866222382, 0.06194375082850456, 0.006169807631522417, -0.07085387408733368, -0.2644737660884857, -0.008686567656695843, -0.2716364860534668, -0.1406666338443756 },
   { -0.034436021000146866, -0.14566117525100708, 0.3000313639640808, 0.07997453957796097, -0.26014742255210876, 0.10932368040084839, -0.14561009407043457, -0.06524164229631424, 0.025319579988718033, -0.23615474998950958 },
   { -0.12316854298114777, -0.08356532454490662, 0.3499387204647064, 0.011257241480052471, -0.09148180484771729, 0.03803844749927521, -0.18244615197181702, -0.1890716701745987, 0.018014198169112206, -0.011485074646770954 },
   { 0.05119410902261734, 0.08020753413438797, 0.059268251061439514, -0.12499441206455231, 0.17614896595478058, -0.18930931389331818, -0.0868750512599945, -0.2804529666900635, 0.0925360918045044, 0.06815575808286667 },
   { 0.011692761443555355, -0.13863497972488403, -0.09605734795331955, -0.23713555932044983, 0.19869019091129303, -0.1736128032207489, -0.014628490433096886, -0.2234809398651123, 0.18218840658664703, 0.19331559538841248 },
   { -0.030696719884872437, -0.29028040170669556, -0.03405535966157913, -0.22188831865787506, 0.15406624972820282, -0.10895994305610657, 0.09087193012237549, -0.2376944124698639, 0.0329907052218914, 0.035999905318021774 },
   { 0.1092759370803833, -0.22434280812740326, -0.05205053091049194, 0.0028351687360554934, 0.05271070823073387, 0.04534679278731346, 0.21796301007270813, -0.23822902143001556, -0.007237383164465427, -0.03183269500732422 },
   { -0.19059474766254425, -0.0010931042488664389, 0.012336972169578075, 0.130366250872612, -0.04337238147854805, 0.08048449456691742, 0.15081213414669037, -0.1514887511730194, 0.12082147598266602, -0.22883722186088562 },
   { -0.1928664743900299, 0.16294434666633606, -0.1412801742553711, 0.06336246430873871, 0.06913620233535767, 0.008397676981985569, 0.05986189842224121, 0.07404761761426926, 0.10074988752603531, -0.18957625329494476 },
   { -0.030663548037409782, -0.022725576534867287, -0.01120968908071518, 0.06371098756790161, 0.10354133695363998, -0.14743076264858246, 0.002494368702173233, 0.08834020048379898, 0.08333931863307953, 0.0172969251871109 },
   { -0.029600799083709717, -0.12763819098472595, -0.03408575803041458, 0.07497689127922058, -0.0029673066455870867, 0.024542296305298805, -0.14194078743457794, 0.09688951820135117, -0.011305919848382473, -0.0432756282389164 },
   { 0.040431179106235504, -0.11625459045171738, -0.16034731268882751, 0.00644330820068717, -0.010624930262565613, -0.0027124728076159954, 0.05933117866516113, 0.010848765261471272, 0.029623165726661682, -0.028166186064481735 },
   { 0.04031022638082504, -0.018755292519927025, -0.11305852234363556, -0.09832550585269928, -5.2639927162090316e-05, -0.17837169766426086, 0.2893888056278229, -0.08189360052347183, 0.016408801078796387, -0.04861225560307503 },
   { 0.19440843164920807, -0.2167934626340866, 0.026103703305125237, -0.09666915237903595, -0.1404324471950531, -0.07117975503206253, 0.2326473593711853, -0.32410603761672974, 0.09548486769199371, -0.10789314657449722 },
   { -0.08611377328634262, -0.1910310536623001, 0.14476874470710754, 0.05546379089355469, -0.009982693940401077, -0.19846577942371368, -0.08793569356203079, -0.1407458782196045, -0.06122061610221863, -0.32115980982780457 },
   { -0.049626246094703674, -0.14167122542858124, 0.17629925906658173, 0.20508620142936707, -0.04053763672709465, 0.18171657621860504, -0.36455345153808594, -0.16552060842514038, 0.15132302045822144, -0.5441284775733948 },
   { -0.25189825892448425, -0.06212431564927101, -0.09285539388656616, 0.1467224657535553, -0.1689085066318512, 0.3594520688056946, -0.21348948776721954, -0.09357955306768417, 0.14755655825138092, -0.08075933903455734 },
   { -0.006130014546215534, -0.0187838077545166, -0.018398266285657883, 0.10767561197280884, -0.03214666619896889, 0.13673841953277588, -0.03402802348136902, -0.17535293102264404, -0.03342030197381973, 0.1027761846780777 },
   { 0.12833915650844574, -0.27472424507141113, -0.14407363533973694, 0.010666185058653355, 0.20449353754520416, -0.04342497140169144, -0.06443001329898834, -0.058276936411857605, -0.020892038941383362, 0.27482762932777405 },
   { 0.07883327454328537, -0.4142236113548279, -0.1753188818693161, -0.0657273679971695, 0.12693439424037933, -0.02097918651998043, -0.07083063572645187, -0.19012095034122467, 0.07696989178657532, 0.16267356276512146 },
   { 0.06553259491920471, -0.2421066015958786, -0.09032198041677475, -0.09558041393756866, 0.08226815611124039, -0.033738214522600174, 0.16157475113868713, -0.20592902600765228, 0.1838725209236145, -0.13110236823558807 },
   { -0.009338979609310627, -0.07190719991922379, -0.06001754850149155, 0.024868259206414223, -0.05742168426513672, -0.007007382344454527, 0.1355489194393158, -0.06426867842674255, 0.1685541570186615, -0.5315171480178833 },
   { -0.24319559335708618, 0.19879747927188873, -0.07863116264343262, 0.026768233627080917, 0.037482134997844696, -0.05093938112258911, -0.05976826697587967, 0.07114528119564056, 0.152762308716774, -0.20516900718212128 },
   { -0.10459628701210022, 0.015972217544913292, 0.029731102287769318, 0.09299270808696747, 0.12250284850597382, -0.014228098094463348, -0.038787681609392166, -0.003089565085247159, 0.027589529752731323, -0.043485332280397415 },
   { -0.08522235602140427, -0.2047293782234192, -0.03153368830680847, 0.0739627331495285, 0.0566912442445755, -0.01885346882045269, -0.015313683077692986, 0.025854285806417465, -0.008858699351549149, -0.07807385921478271 },
   { -0.03599530830979347, 0.022761328145861626, -0.06112661585211754, 0.03155878558754921, 0.1381005197763443, 0.005741278175264597, 0.005058633163571358, 0.10176621377468109, -0.056654613465070724, 0.010960721410810947 },
   { 0.059075139462947845, -0.01734505221247673, -0.17024491727352142, 0.03237390145659447, -0.12787091732025146, 0.08485905081033707, 0.16497400403022766, -0.017580507323145866, -0.022932836785912514, -0.07730716466903687 },
   { 0.10647168755531311, 0.01922757178544998, -0.051905516535043716, 0.038774069398641586, -0.1842159479856491, 0.24035599827766418, 0.035572800785303116, -0.07120241969823837, 0.059767335653305054, -0.30788883566856384 },
   { 0.050971489399671555, -0.05027851462364197, 0.1844087690114975, -0.16229167580604553, 0.19146153330802917, 0.010933749377727509, -0.01128433458507061, -0.18602846562862396, -0.06305219233036041, -0.39687061309814453 },
   { -0.3166063725948334, -0.05482887476682663, 0.007570929359644651, -0.010338438674807549, 0.14277541637420654, 0.18141859769821167, -0.2759816348552704, 0.01993808150291443, -0.03286734223365784, -0.523628830909729 },
   { -0.18887250125408173, 0.059023428708314896, -0.004899719264358282, 0.2500624656677246, -0.13754048943519592, 0.12489915639162064, -0.49862149357795715, 0.03152802586555481, -0.000648182409349829, -0.082021065056324 },
   { 0.08929473161697388, 0.09250226616859436, -0.18188200891017914, 0.17140117287635803, -0.25324746966362, 0.09125169366598129, -0.030890537425875664, 0.012716562487185001, -0.2320222407579422, 0.11991836875677109 },
   { 0.01138061098754406, -0.14327512681484222, -0.12394679337739944, -0.01061620470136404, 0.03757021576166153, 0.10533107817173004, -0.06816799938678741, 0.1306522637605667, -0.11290585249662399, 0.12322373688220978 },
   { 0.14756032824516296, -0.04055016487836838, -0.0751958042383194, 0.09821002930402756, 0.0483008548617363, 0.024162443354725838, -0.04886545613408089, -0.07045482099056244, -0.06196023151278496, -0.03838710859417915 },
   { 0.25080424547195435, -0.014682114124298096, 0.2091580182313919, 0.10758807510137558, -0.01529473252594471, 0.005447986535727978, 0.08365204185247421, -0.26634445786476135, 0.06402048468589783, -0.22416745126247406 },
   { 0.11138260364532471, 0.09075025469064713, 0.09595159441232681, 0.05212591961026192, -0.027235424146056175, -0.10837392508983612, -0.0638296827673912, -0.21005308628082275, 0.15972763299942017, -0.3584444224834442 },
   { -0.08750175684690475, 0.20245784521102905, 0.1042448878288269, -0.054065607488155365, -0.08134936541318893, -0.05321277305483818, -0.1389552503824234, -0.004558606073260307, 0.1136741042137146, -0.048654764890670776 },
   { -0.061729561537504196, 0.03403720259666443, 0.02816067449748516, -0.08672255277633667, 0.061365123838186264, -0.025257069617509842, 0.08184769004583359, 0.03225638344883919, 0.022739475592970848, 0.08673705905675888 },
   { -0.04738360270857811, -0.02080104500055313, 0.0031832968816161156, 0.008525966666638851, -0.035401780158281326, 0.008697867393493652, 0.10355501621961594, 0.15816174447536469, -0.006995019502937794, -0.0235027763992548 },
   { -0.03561541810631752, 0.017727505415678024, -0.09264187514781952, -0.024884488433599472, -0.0363067090511322, -0.015546835958957672, 0.09356242418289185, -0.03725083917379379, -0.11894463002681732, 0.00967429019510746 },
   { -0.012567310594022274, 0.0368519090116024, -0.09837327152490616, -0.023144477978348732, -0.07363535463809967, -0.04734219238162041, 0.17275838553905487, 0.01504890713840723, 0.04311062768101692, 0.01191271934658289 },
   { -0.029636075720191002, -0.004323760513216257, -0.14293073117733002, -0.03067140094935894, -0.10458259284496307, 0.12545357644557953, -0.019713105633854866, -0.22529791295528412, 0.03673424944281578, -0.086613230407238 },
   { -0.18858475983142853, 0.07584001123905182, 0.18106147646903992, 0.003633882850408554, -0.3232169449329376, -0.10693155229091644, -0.1643599271774292, -0.057312753051519394, -0.03597334027290344, -0.21014101803302765 },
   { -0.3114914894104004, 0.22848354279994965, -0.05733731761574745, 0.0199066624045372, -0.021899359300732613, 0.1665828675031662, -0.3560754954814911, 0.043299078941345215, -0.16450020670890808, -0.18078216910362244 },
   { -0.2701632082462311, 0.07797590643167496, -0.2501955032348633, 0.3073359727859497, 0.054746534675359726, 0.14247655868530273, -0.6279342770576477, -0.014823914505541325, -0.13193322718143463, 0.137766495347023 },
   { -0.009833353571593761, -0.014739363454282284, -0.2833026051521301, 0.22291114926338196, 0.050883665680885315, 0.1544407308101654, -0.007139134220778942, -0.04278786480426788, -0.04569237306714058, 0.1431843340396881 },
   { 0.14263057708740234, -0.10935237258672714, -0.1301223635673523, 0.17549699544906616, -0.10295064002275467, 0.0531809963285923, -0.07687397301197052, -0.0041670906357467175, -0.03578709810972214, 0.13229167461395264 },
   { 0.1239171028137207, 0.00109311961568892, 0.03278663009405136, -0.04780369624495506, -0.30349621176719666, -0.00544113339856267, 0.011505097150802612, -0.2141212522983551, -0.061316438019275665, -0.057482991367578506 },
   { 0.15635064244270325, -0.05986761301755905, 0.11386758834123611, -0.13492900133132935, -0.40539276599884033, 0.036634404212236404, 0.10564236342906952, -0.10269883275032043, -0.047435615211725235, 0.011936398223042488 },
   { 0.06864320486783981, 0.0814695656299591, 0.10184789448976517, -0.05323476344347, -0.16903002560138702, -0.11289097368717194, -0.010798905044794083, 0.00858576875180006, 0.08679178357124329, -0.13915899395942688 },
   { -0.015435353852808475, 0.05520261824131012, 0.09886521846055984, -0.150144562125206, -0.03811196982860565, -0.04277127981185913, -0.049391187727451324, 0.0038955523632466793, -0.06975655257701874, -0.09772922098636627 },
   { -0.10640314966440201, 0.02143990620970726, 0.19598880410194397, 0.05532033368945122, -0.03350311517715454, -0.08562783151865005, 0.08887207508087158, -0.058990154415369034, -0.004740907810628414, -0.09510540217161179 },
   { -0.02165190316736698, 0.08696724474430084, 0.10311011970043182, 0.05062633007764816, 0.02446528524160385, -0.00980919785797596, 0.033087827265262604, 0.006169402971863747, -0.15315234661102295, -0.1583322137594223 },
   { 0.05632339045405388, 0.04889262467622757, 0.07195554673671722, -0.09224546700716019, -0.0312703400850296, 0.019915660843253136, -0.0885445773601532, 0.04977314546704292, 0.02884942665696144, 0.06733967363834381 },
   { -0.05668662488460541, -0.06286522001028061, -0.07093054801225662, 0.02534123696386814, -0.035583045333623886, 0.1069161519408226, 0.07213752716779709, -0.15408198535442352, 0.004749656654894352, 0.01846645399928093 },
   { -0.055105846375226974, 0.17566075921058655, -0.02762685716152191, -0.15872669219970703, -0.14776042103767395, 0.13005457818508148, -0.04959980025887489, -0.2840895652770996, 0.10917782038450241, 0.02806667983531952 },
   { -0.2407715767621994, -0.20545439422130585, -0.3128269612789154, 0.23395606875419617, -0.2674948275089264, 0.06195725128054619, -0.08418305218219757, 0.10719285160303116, -0.032670095562934875, 0.03091413900256157 },
   { -0.38531336188316345, 0.016795100644230843, -0.2889109253883362, 0.374103844165802, -0.09290919452905655, 0.18797241151332855, -0.27427437901496887, 0.005775205325335264, -0.3412187993526459, -0.05179211124777794 },
   { -0.27989479899406433, -0.09535239636898041, -0.4012123942375183, 0.4149625301361084, -0.026975052431225777, 0.08363723754882812, -0.44945603609085083, -0.0818122997879982, -0.4183270037174225, 0.1456836462020874 },
   { -0.03423737362027168, -0.1622879058122635, -0.24154064059257507, 0.15354788303375244, -0.1606104075908661, 0.04194694384932518, -0.31546473503112793, -0.08402805030345917, 0.05846158415079117, 0.07925435155630112 },
   { 0.1964757889509201, -0.11147934198379517, 0.006398457568138838, 0.11743635684251785, -0.25401023030281067, 0.06091536208987236, 0.005223904736340046, -0.3283742070198059, 0.0633036196231842, -0.03666813671588898 },
   { 0.09394080936908722, 0.019184788689017296, 0.04202968254685402, 0.08893364667892456, -0.21268659830093384, 0.03299272805452347, 0.035032354295253754, -0.250198096036911, -0.03142951428890228, -0.005127068608999252 },
   { 0.2789625823497772, 0.11816181242465973, -0.06770242750644684, -0.11507725715637207, -0.03627917170524597, -0.03596889227628708, 0.13286052644252777, -0.05445455387234688, -0.003118030494078994, 0.009995515458285809 },
   { 0.09369545429944992, 0.0249762162566185, -0.008535615168511868, 0.008677978999912739, -0.06098391115665436, -0.10582374036312103, 0.15824931859970093, 0.07111775130033493, -0.006570016965270042, -0.04675745964050293 },
   { -0.043148472905159, -0.08955623209476471, 0.16840426623821259, 0.04517475515604019, -0.006929107941687107, 0.07703183591365814, -0.05427119880914688, -0.09697751700878143, -0.026461418718099594, -0.10445362329483032 },
   { -0.005875363480299711, 0.01747302897274494, 0.14044292271137238, 0.05866822227835655, -0.010373006574809551, -0.05395842343568802, 0.010074688121676445, -0.030188333243131638, 0.10721613466739655, 0.01564001850783825 },
   { -0.11266003549098969, 0.14301806688308716, 0.07887148857116699, -0.007361121010035276, 0.0464802049100399, 0.057261042296886444, -0.05499345436692238, -0.04770335182547569, -0.09476854652166367, -0.10831198841333389 },
   { -0.10086200386285782, 0.03615216910839081, 0.09393592178821564, -0.011017831973731518, 0.13957704603672028, 0.03836642578244209, -0.01856411248445511, -0.027332015335559845, -0.020430393517017365, -0.1144706979393959 },
   { -0.04994736239314079, -0.10470786690711975, -0.008038894273340702, -0.043353352695703506, -0.16807766258716583, 0.08332213014364243, 0.024850932881236076, -0.2365320771932602, 0.11709456145763397, -0.04060036316514015 },
   { -0.1188502237200737, 0.12746983766555786, -0.05043625459074974, -0.06968192011117935, -0.18020783364772797, 0.07894543558359146, -0.14382001757621765, -0.1667739450931549, -0.15171800553798676, 0.10074219107627869 },
   { 0.025318961590528488, -0.15197353065013885, -0.37993332743644714, 0.039323799312114716, -0.14733164012432098, -0.07150904089212418, -0.06786876171827316, 0.29049068689346313, -0.4256679117679596, -0.06783490628004074 },
   { -0.2846756875514984, -0.24403679370880127, -0.13085101544857025, 0.24530437588691711, -0.2979887127876282, -0.1881442368030548, -0.04217304661870003, 0.11979664117097855, -0.4608543813228607, 0.13906128704547882 },
   { -0.30169278383255005, -0.15036065876483917, 0.2126353681087494, 0.2424832284450531, -0.23544588685035706, -0.2658223807811737, -0.18200504779815674, 0.08700035512447357, -0.4099665880203247, 0.15039676427841187 },
   { -0.12909051775932312, 0.0935979038476944, -0.07342515140771866, 0.36067575216293335, -0.22946684062480927, 0.03541077300906181, -0.1374749392271042, -0.08329547196626663, -0.0016333261737599969, -0.08521166443824768 },
   { 0.06498120725154877, 0.23029132187366486, -0.08613379299640656, 0.290473997592926, -0.020225543528795242, 0.02564038150012493, -0.27743592858314514, -0.13735659420490265, -0.10889440029859543, -0.1269843429327011 },
   { 0.24906930327415466, 0.20824787020683289, -0.2000773400068283, 0.07415077090263367, 0.11437735706567764, 0.134357750415802, -0.2249399572610855, 0.07016702741384506, -0.11599095165729523, -0.1407672017812729 },
   { 0.07151031494140625, 0.08864155411720276, -0.14926405251026154, -0.001940057147294283, 0.057814035564661026, 0.06559507548809052, -0.235958993434906, 0.14660324156284332, -0.05723140388727188, -0.044872868806123734 },
   { 0.0386391244828701, -0.062155187129974365, -0.11854174733161926, 0.00555562786757946, 0.0883922353386879, -0.004617806524038315, -0.30231720209121704, 0.08439772576093674, 0.07500165700912476, 0.009457141160964966 },
   { -0.07410404831171036, 0.002535842126235366, -0.06298413127660751, -0.06310141831636429, 0.06013760715723038, 0.06750623881816864, -0.14042966067790985, 0.06030571833252907, 0.14847011864185333, -0.025659918785095215 },
   { -0.0410909578204155, -0.22006258368492126, 0.06458284705877304, 0.019709205254912376, -0.008778970688581467, -0.003467664122581482, -0.17216730117797852, -0.03422960266470909, 0.07060322165489197, -0.03765437752008438 },
   { -0.11375067383050919, 0.12903937697410583, 0.12319590151309967, 0.036481454968452454, -0.02293374203145504, -0.011195529252290726, -0.015121927484869957, -0.13582617044448853, 0.037983912974596024, 0.03097117505967617 },
   { -0.00899101234972477, -0.03729064390063286, -0.07584995031356812, -0.033321402966976166, -0.03538701310753822, 0.028744274750351906, 0.10989786684513092, -0.07091186195611954, 0.07540717720985413, 0.0003044065088033676 },
   { -0.0510123111307621, -0.2426702231168747, -0.0457383394241333, -0.04763437435030937, 0.07010672986507416, 0.14956511557102203, -0.18006351590156555, -0.18904127180576324, 0.1828937828540802, 0.10290924459695816 },
   { -0.28394508361816406, -0.03649396821856499, -0.03778291121125221, -0.38028717041015625, -0.22398526966571808, 0.09453234076499939, -0.3323543965816498, -0.4297229051589966, -0.04118026793003082, 0.3058030903339386 },
   { 0.026504268869757652, 0.04920121282339096, 0.08839014172554016, -0.0335988774895668, -0.057750459760427475, -0.10578647255897522, -0.08538451790809631, -0.08557063341140747, -0.07914086431264877, -0.15745951235294342 },
   { -0.08510047197341919, 0.09141837805509567, 0.2598290741443634, -0.1974480152130127, -0.11388031393289566, -0.08786267042160034, -0.06377516686916351, -0.1560787558555603, -0.36034727096557617, 0.15865635871887207 },
   { -0.05634450167417526, 0.04095430672168732, 0.09253980219364166, -0.12191250175237656, 0.06943046301603317, 0.025825314223766327, -0.08253483474254608, 0.021801311522722244, -0.2586575448513031, 0.10311593860387802 },
   { 0.005244328640401363, 0.27095600962638855, -0.22061380743980408, -0.1627248078584671, -0.19932390749454498, 0.06325430423021317, -0.022943593561649323, 0.1807897984981537, -0.29207688570022583, 0.17822463810443878 },
   { -0.009883128106594086, -0.019495651125907898, -0.07929864525794983, -0.16620716452598572, 0.10060397535562515, -0.1671963781118393, 0.04632217809557915, 0.31092914938926697, -0.40218251943588257, 0.24604432284832 },
   { -0.1922084540128708, 0.13385343551635742, -0.3433530628681183, -0.13560877740383148, 0.05943840369582176, 0.04107600823044777, -0.06281521916389465, 0.2888898551464081, -0.3511136770248413, 0.11776909232139587 },
   { -0.2120596319437027, -0.060579750686883926, -0.5179331302642822, 0.12313833832740784, 0.005411843303591013, 0.018344862386584282, -0.18090572953224182, 0.2070310115814209, -0.07300446182489395, 0.15632224082946777 },
   { -0.18982796370983124, -0.022625641897320747, -0.5193347930908203, 0.20911656320095062, 0.025458356365561485, -0.029798265546560287, -0.12653326988220215, 0.10322955995798111, -0.05482301115989685, 0.21591027081012726 },
   { -0.3179348111152649, 0.015677541494369507, -0.3927502930164337, 0.11081437021493912, -0.010310216806828976, 0.09609492123126984, -0.01965261623263359, 0.11440442502498627, 0.11953392624855042, -0.00979416910558939 },
   { -0.12040505558252335, -0.1921776980161667, 0.07051871716976166, 0.13708890974521637, 0.03637149557471275, 0.018723594024777412, -0.08902952820062637, -0.10630228370428085, 0.20016388595104218, -0.006306590512394905 },
   { -0.18366429209709167, -0.026077695190906525, 0.07658396661281586, 0.09775474667549133, 0.07520774751901627, 0.06147448718547821, 0.08970274776220322, -0.08762235939502716, -0.031102877110242844, 0.03532020002603531 },
   { -0.43355032801628113, -0.057978659868240356, -0.07886078953742981, -0.08369714021682739, -0.06334852427244186, 0.024151263758540154, -0.14750927686691284, 0.011142045259475708, 0.05895495414733887, 0.21725374460220337 },
   { -0.2566789984703064, -0.23189835250377655, -0.09732074290513992, -0.13780243694782257, 0.05071298032999039, 0.2372513860464096, -0.23451924324035645, -0.17173485457897186, -0.16044025123119354, 0.06390021741390228 },
   { -0.24467696249485016, -0.11593427509069443, 0.0741555243730545, -0.03909381851553917, 0.030118178576231003, 0.19668802618980408, -0.2958616018295288, -0.28029900789260864, -0.42791157960891724, 0.07586120814085007 },
   { -0.038316939026117325, -0.030420124530792236, -0.02349475398659706, 0.08412034809589386, -0.1129859983921051, -0.03989505022764206, -0.03793487697839737, 0.022310690954327583, 0.0309336856007576, -0.06943824142217636 },
   { -0.03700987622141838, -0.013805008493363857, -0.12665854394435883, -0.025585465133190155, -0.11081043630838394, 0.005472093354910612, -0.12288008630275726, 0.06970738619565964, 0.10524201393127441, -0.07113002240657806 },
   { 0.09591012448072433, 0.13063593208789825, -0.07817627489566803, -0.03115081414580345, -0.061837587505578995, -0.03579074144363403, -0.18968148529529572, 0.23248310387134552, -0.14278466999530792, -0.005681020673364401 },
   { -0.0023846097756177187, 0.019804680719971657, -0.1546335071325302, -0.009778495877981186, 0.021547134965658188, -0.10149990767240524, -0.27585119009017944, 0.11020912230014801, -0.09000854939222336, 0.0697907879948616 },
   { 0.06673534959554672, 0.037902023643255234, -0.1481124609708786, -0.07409770786762238, -0.051649175584316254, -0.10817723721265793, -0.08017697930335999, 0.11712879687547684, -0.05131744593381882, 0.21784017980098724 },
   { 0.04563087970018387, 0.1167747750878334, -0.2569757401943207, 0.004853974562138319, 0.030625317245721817, -0.1561139076948166, -0.03702055662870407, 0.1461896002292633, -0.21255910396575928, 0.09086820483207703 },
   { -0.12694652378559113, -0.019102290272712708, -0.34299716353416443, 0.14001673460006714, -0.002554311417043209, -0.03749309480190277, -0.13262687623500824, 0.12740592658519745, -0.08197436481714249, 0.2880188822746277 },
   { -0.16193732619285583, -0.010122979059815407, -0.3043217062950134, 0.14214032888412476, -0.0999070256948471, 0.044232238084077835, -0.11634823679924011, -0.007731616962701082, -0.003894007997587323, 0.1333332061767578 },
   { -0.20193997025489807, 0.05495662987232208, -0.06499333679676056, -0.061795517802238464, 0.06632799655199051, -0.0935075655579567, -0.14085106551647186, -0.027290459722280502, -0.01148942206054926, 0.19973362982273102 },
   { -0.29177239537239075, 0.10729549080133438, -0.1488894373178482, 0.09779056906700134, -0.08336421847343445, -0.007760657928884029, -0.09860432147979736, -0.13658572733402252, 0.047052912414073944, 0.23829025030136108 },
   { -0.3838294744491577, 0.002561788307502866, -0.19476823508739471, -0.08529525250196457, -0.08870262652635574, -0.08011412620544434, -0.18814775347709656, 0.0008482270059175789, 0.11431882530450821, 0.16776250302791595 },
   { -0.29794085025787354, -0.21349699795246124, -0.2276136577129364, -0.2603369951248169, -0.024336570873856544, -0.033591896295547485, -0.4245297610759735, 0.07381408661603928, -0.11356228590011597, 0.28401604294776917 },
   { -0.16113373637199402, -0.19599878787994385, -0.1978825330734253, -0.33909761905670166, 0.02088141441345215, 0.1779288500547409, -0.2800310552120209, 0.00042624183697625995, -0.21537266671657562, 0.04656624421477318 },
   { -0.1722884476184845, -0.0332549624145031, -0.0009303391561843455, 0.051929641515016556, 0.05915927514433861, 0.047104157507419586, -0.017277220264077187, 0.14307382702827454, -0.1519911140203476, -0.0754394680261612 },
   { -0.031962379813194275, -0.0018118813168257475, -0.08091071248054504, -0.04936926066875458, -0.08238241821527481, -0.04087323695421219, 0.0880134254693985, 0.14442847669124603, -0.05737133324146271, 0.1054782122373581 },
   { -0.11167416721582413, -0.04018218070268631, 0.06566035002470016, -0.08739349991083145, -0.13650932908058167, -0.008501517586410046, 0.08108144998550415, -0.028621412813663483, -0.12356681376695633, 0.03362729027867317 },
   { -0.018821753561496735, 0.16535387933254242, -0.06179898977279663, -0.036501444876194, -0.005758402869105339, -0.046349041163921356, 0.21913744509220123, -0.18305987119674683, 0.08443133533000946, -0.20170708000659943 },
   { -0.00195389986038208, 0.2661089301109314, -0.1124945878982544, -0.07776705175638199, -0.08765396475791931, -0.06419267505407333, 0.2716027796268463, -0.3139205574989319, -0.12621155381202698, -0.07348068058490753 },
   { -0.0844811201095581, 0.15324252843856812, -0.059998590499162674, 0.08091026544570923, 0.15746819972991943, -0.15578344464302063, -0.0051070693880319595, 0.02022172510623932, -0.13857559859752655, 0.0734412893652916 },
   { -0.13874292373657227, -0.03182390704751015, 0.04808477312326431, -0.21251048147678375, 0.1150127574801445, 0.00031315701198764145, 0.024013688787817955, -0.056882817298173904, -0.021477332338690758, -0.03535030037164688 },
   { 0.04358445852994919, 0.018054265528917313, -0.21941719949245453, 0.012058659456670284, -0.03725186735391617, -0.07616555690765381, 0.08978384733200073, -0.16176652908325195, 0.05556244030594826, -0.1781405806541443 },
   { 0.06026953458786011, -0.0025207572616636753, -0.10509113222360611, -0.1791403889656067, -0.0465104877948761, 0.0014454008778557181, -0.04104427993297577, -0.3438860774040222, 0.15479207038879395, 0.007255079690366983 },
   { 0.17790299654006958, 0.07048432528972626, -0.28615227341651917, -0.3598874807357788, 0.04783671349287033, -0.0571976974606514, 0.11438498646020889, -0.22146105766296387, -0.19177570939064026, -0.15060995519161224 },
   { 0.08172557502985, -0.02426605299115181, -0.1291322112083435, -0.16136065125465393, 0.1792462021112442, -0.1944904923439026, 0.15206016600131989, 0.19838780164718628, -0.09711260348558426, -0.14452679455280304 },
   { -0.06761903315782547, 0.028856603428721428, -0.16599246859550476, -0.18380950391292572, 0.04424631595611572, 0.03058028221130371, -0.056106824427843094, 0.13689498603343964, 0.15255071222782135, 0.010653394274413586 },
   { -0.01730363629758358, 0.02615206502377987, -0.042531177401542664, -0.12133830040693283, -0.03910262882709503, 0.008890455588698387, -0.029225189238786697, 0.02791776694357395, -0.013563127256929874, 0.06865039467811584 },
   { 0.09404978156089783, -0.009088428691029549, -0.0627174898982048, 0.0010481768986210227, -0.10344578325748444, -0.2090429961681366, 0.14998261630535126, 0.11459727585315704, -0.10152088105678558, 0.02122599631547928 },
   { 0.05546335130929947, -0.026064956560730934, -0.19624675810337067, -0.022786583751440048, 0.0032221514265984297, -0.04540461301803589, 0.014395816251635551, 0.15209314227104187, -0.028188027441501617, -0.04467783868312836 },
   { -0.09370683133602142, 0.11495156586170197, -0.002798332367092371, 0.09429948031902313, -0.05815216898918152, -0.08111480623483658, 0.20665118098258972, -0.09907462447881699, -0.14413513243198395, -0.10009456425905228 },
   { 0.1667935848236084, 0.09238026291131973, -0.19308418035507202, -0.05216003209352493, 0.09394832700490952, 0.023934800177812576, 0.007795392535626888, 0.07108395546674728, -0.08473948389291763, -0.0896875336766243 },
   { 0.06855383515357971, -0.025792166590690613, -0.15100210905075073, -0.12143103033304214, -0.03408796712756157, 0.08636099100112915, 0.24718086421489716, -0.11789464950561523, -0.006418029312044382, 0.03988325223326683 },
   { -0.0029112733900547028, 0.015243543311953545, -0.1248207688331604, -0.013033444061875343, 0.15198905766010284, 0.012374481186270714, -0.024636443704366684, 0.11132796853780746, 0.09779061377048492, -0.16907785832881927 },
   { -0.03909531608223915, -0.0720914900302887, -0.10469084233045578, 0.03607819974422455, 0.18008124828338623, -0.18187688291072845, 0.013137313537299633, 0.08582594245672226, 0.1399068534374237, -0.16553321480751038 },
   { 0.054461799561977386, -0.0014090933836996555, -0.08613308519124985, -0.04526820406317711, 0.17779873311519623, -0.12987738847732544, 0.039285991340875626, -0.1459542214870453, 0.059793081134557724, -0.19612224400043488 },
   { 0.16567976772785187, 0.023823752999305725, 0.11308732628822327, -0.2388841062784195, 0.11752193421125412, -0.27736955881118774, 0.11238765716552734, -0.22243860363960266, -0.0009315614588558674, -0.17958778142929077 },
   { -0.03472975641489029, 0.08753614872694016, 0.04986120015382767, -0.5134009122848511, -0.054630983620882034, -0.16918674111366272, 0.08450322598218918, -0.2037338763475418, -0.005043085664510727, 0.12399682402610779 },
   { 0.06872789561748505, 0.3328797221183777, -0.0342692993581295, -0.47951602935791016, 0.23997919261455536, -0.2701350748538971, -0.0536414235830307, -0.24218806624412537, -0.06627766042947769, -0.15965628623962402 },
   { 0.13541695475578308, 0.48872724175453186, -0.14819824695587158, -0.39005693793296814, 0.14375650882720947, 0.030066851526498795, -0.152479887008667, -0.09206746518611908, -0.28704825043678284, -0.15935589373111725 },
   { 0.037781521677970886, 0.17384733259677887, -0.011542938649654388, -0.4136927127838135, 0.04515058919787407, 0.08208565413951874, 0.134325310587883, -0.15796805918216705, -0.017230981960892677, -0.2545276880264282 },
   { 0.0012533999979496002, 0.0459989570081234, -0.07586301118135452, -0.1543966680765152, -0.0818943902850151, 0.11434390395879745, 0.19864581525325775, -0.05011940002441406, 0.020464684814214706, -0.1538642793893814 },
   { 0.00935613177716732, 0.09345449507236481, -0.057689983397722244, 0.026908153668045998, -0.1589939147233963, -0.14484557509422302, 0.003842624370008707, 0.1950262188911438, 0.12887154519557953, 0.048732876777648926 },
   { 0.0755380392074585, 0.19088280200958252, -0.06979864835739136, -0.0960693284869194, 0.037371598184108734, 0.03132518380880356, -0.010656879283487797, 0.04719443991780281, -0.029890278354287148, -0.062418170273303986 },
   { -0.1189618781208992, 0.0002066341257886961, 0.012836837209761143, -0.017244579270482063, -0.001642198651097715, -0.1121278926730156, 0.15778912603855133, -0.09098558872938156, 0.08514849841594696, -0.05973357707262039 },
   { 0.020224690437316895, -0.14859938621520996, -0.18355073034763336, -0.013196318410336971, -0.03919082134962082, -0.020102165639400482, -0.034520141780376434, -0.01025614608079195, 0.11518944054841995, 0.09116112440824509 },
   { 0.06822967529296875, -0.09317821264266968, 0.0336156003177166, -0.08751998841762543, 0.08010808378458023, -0.10364722460508347, 0.14905858039855957, 0.01844513975083828, 0.03237985074520111, -0.019096963107585907 },
   { -0.14565801620483398, -0.11475800722837448, 0.1417536437511444, 0.024232931435108185, -0.02166224643588066, -0.24401652812957764, -0.029888195917010307, 0.014643840491771698, 0.15508528053760529, -0.013586998917162418 },
   { -0.19139160215854645, -0.2210218757390976, 0.17625710368156433, 0.1743258833885193, 0.20842245221138, -0.09875594079494476, -0.22166936099529266, -0.31988072395324707, 0.12240223586559296, 0.0191662460565567 },
   { -0.13723979890346527, -0.2140507698059082, 0.2783466875553131, 0.10179893672466278, -0.03661361709237099, -0.3629387617111206, -0.28892016410827637, -0.6855797171592712, 0.21404187381267548, 0.38370904326438904 },
   { 0.08175773918628693, -0.22969287633895874, 0.24095256626605988, 0.2517560124397278, -0.23162433505058289, -0.26457273960113525, -0.25147637724876404, -0.6067431569099426, 0.005100091453641653, 0.39454928040504456 },
   { -0.043170295655727386, 0.19077058136463165, -0.028778420761227608, 0.17429426312446594, -0.29105037450790405, -0.09874828159809113, -0.16570089757442474, -0.4113087058067322, -0.2539834976196289, -0.01235934253782034 },
   { -0.02239448018372059, 0.1581721156835556, -0.03215688839554787, 0.06587348133325577, -0.10048474371433258, 0.04975380003452301, 0.09016185253858566, -0.35672473907470703, -0.24014821648597717, -0.14578627049922943 },
   { -0.022027259692549706, -0.11700163781642914, -0.21077394485473633, -0.30166566371917725, 0.012681661173701286, 0.15326757729053497, 0.021010583266615868, -0.06274265050888062, -0.19365450739860535, -0.3108954429626465 },
   { -0.1401730477809906, -0.1622987985610962, -0.05061768740415573, -0.4567340016365051, 0.019135352224111557, 0.12029136717319489, -0.08393538743257523, -0.006048786453902721, 0.09851116687059402, -0.11539902538061142 },
   { -0.07801071554422379, -0.19351601600646973, -0.21799740195274353, -0.2356722503900528, -0.2572970986366272, 0.10908273607492447, 0.11909899860620499, -0.2260809689760208, 0.05857590585947037, -0.1431664675474167 },
   { -0.04380086809396744, -0.1872776746749878, -0.2793929874897003, -0.06728240102529526, -0.3617560565471649, 0.10790625959634781, -4.4517677451949567e-05, 0.05484001711010933, 0.01982729509472847, -0.07006847858428955 },
   { 0.09152784943580627, 0.046320315450429916, 0.02451915480196476, 0.04712417349219322, -0.31139251589775085, 0.2012299746274948, -0.17717330157756805, 0.1909455507993698, -0.1315513402223587, 0.1268211156129837 },
   { -0.08206532895565033, -0.0778997391462326, -0.1491435468196869, 0.12302415817975998, 0.00032407615799456835, -0.1570858508348465, 0.18290840089321136, -0.029230443760752678, 0.12510710954666138, 0.01596570387482643 },
   { 0.11841069906949997, 0.15731686353683472, -0.1590294986963272, -0.003432932775467634, -0.09688171744346619, 0.018296169117093086, -0.04596630111336708, 0.04978850111365318, -0.07256362587213516, 0.06134955957531929 },
   { -0.05864925682544708, 0.03264110907912254, 0.02912255935370922, 0.07167907804250717, 0.021050339564681053, -0.1686944216489792, 0.05862211808562279, -0.00866366270929575, -0.01458475086838007, -0.022037865594029427 },
   { -0.20526468753814697, 0.08502994477748871, 0.13568389415740967, 0.15382270514965057, -0.09068063646554947, -0.19545772671699524, -0.0749916061758995, -0.0613129697740078, -0.020875653252005577, 0.006719701457768679 },
   { -0.3305284082889557, 0.0899544432759285, 0.05453019589185715, 0.24447937309741974, 0.007791133597493172, -0.30328819155693054, -0.34650692343711853, 0.06797865778207779, -0.15249694883823395, -0.039235152304172516 },
   { -0.35770848393440247, -0.09571103751659393, 0.19100213050842285, 0.23695696890354156, -0.12411654740571976, -0.18137896060943604, -0.31833091378211975, 0.25078240036964417, -0.16522742807865143, -0.00820715632289648 },
   { -0.10882844030857086, -0.27605360746383667, 0.21424247324466705, 0.2867029905319214, -0.4196653366088867, 0.10075527429580688, -0.32528889179229736, 0.24324218928813934, -0.1811620444059372, -0.07792139798402786 },
   { 0.06400080025196075, -0.03653009980916977, -0.022354185581207275, -0.0017190638463944197, -0.6071564555168152, 0.17175063490867615, -0.23409537971019745, 0.2126728594303131, -0.1828213483095169, 0.08488290011882782 },
   { -0.00680074468255043, -0.17404784262180328, -0.09094735234975815, -0.060416821390390396, -0.48312699794769287, 0.13472513854503632, -0.06024915724992752, 0.1451290398836136, -0.1338428407907486, 0.10403021425008774 },
   { -0.20539963245391846, -0.3224829137325287, 0.03530131280422211, -0.1819465309381485, -0.25181859731674194, 0.22409765422344208, -0.007613244466483593, 0.0015208902768790722, 0.017924049869179726, 0.062303684651851654 },
   { -0.4430031478404999, -0.6207911968231201, -0.33097589015960693, -0.40409785509109497, -0.35936087369918823, 0.17360994219779968, 0.16261260211467743, -0.26517027616500854, 0.22328022122383118, 0.04556305706501007 },
   { -0.3347659707069397, -0.46233299374580383, -0.7934560775756836, -0.3603467345237732, -0.10837968438863754, 0.2995292842388153, 0.05001422017812729, -0.019140245392918587, 0.20264111459255219, -0.055039405822753906 },
   { -0.11160086840391159, -0.2789599895477295, -0.5002519488334656, -0.4067551791667938, 0.053776271641254425, 0.15223902463912964, 0.058162156492471695, -0.014872778207063675, 0.16644521057605743, -0.5275096893310547 },
   { -0.25317883491516113, -0.10918449610471725, -0.1519453376531601, -0.20227482914924622, -0.030147884041070938, 0.15920805931091309, 0.09470304101705551, -0.09134433418512344, 0.09746269881725311, -0.07794054597616196 },
   { -0.05263512581586838, 0.0004268215561751276, -0.05882572382688522, -0.05650721490383148, -0.08310186862945557, -0.08456984907388687, 0.13140501081943512, 0.045146647840738297, 0.17306974530220032, -0.06033961474895477 },
   { 0.10627236217260361, -0.026003768667578697, -0.0392611101269722, -0.015780743211507797, 0.02268742211163044, -0.08955185115337372, -0.09661281853914261, 0.04642152786254883, 0.011118965223431587, 0.010215087793767452 },
   { -0.08579526841640472, -0.18773308396339417, 0.03003726713359356, 0.022472485899925232, 0.10343018174171448, -0.1322258710861206, -0.05641096457839012, -0.03393978998064995, 0.018465442582964897, -0.17408433556556702 },
   { -0.06313680857419968, -0.0038655486423522234, 0.21218985319137573, 0.1697644740343094, 0.030687997117638588, -0.08275467902421951, -0.21709823608398438, 0.05348917469382286, -0.10342933982610703, -0.3074292540550232 },
   { -0.11740435659885406, -0.00589464558288455, 0.21045105159282684, 0.2596701383590698, -0.3172607421875, -0.19906076788902283, -0.4081241190433502, 0.10995341092348099, -0.11548981815576553, -0.3183056116104126 },
   { -0.07030598819255829, -0.0021517756395041943, 0.14535462856292725, 0.13524024188518524, -0.7481080293655396, -0.20370829105377197, -0.24544912576675415, 0.26172173023223877, -0.2480115294456482, -0.0724705159664154 },
   { -0.1204366609454155, -0.14271238446235657, 0.16616354882717133, 0.16422966122627258, -0.7125881910324097, -0.02761705406010151, -0.2227877825498581, 0.2821511924266815, -0.1568312644958496, -0.06334050744771957 },
   { 0.008867585100233555, -0.22713778913021088, 0.1581546664237976, 0.15095001459121704, -0.6684061288833618, 0.14922375977039337, -0.016819745302200317, 0.11621971428394318, -0.0559455007314682, -0.009574199095368385 },
   { -0.07431425899267197, -0.19297568500041962, 0.07415257394313812, -0.05770363286137581, -0.48168402910232544, 0.33905094861984253, 0.09429996460676193, 0.18400004506111145, -0.1330662965774536, -0.03203980252146721 },
   { -0.048740509897470474, -0.5544599294662476, -0.12323953956365585, -0.15038317441940308, -0.6166236996650696, 0.36128759384155273, 0.20746789872646332, -0.18529634177684784, -0.06327895075082779, 0.0030893106013536453 },
   { -0.06291431933641434, -0.47059231996536255, -0.38939017057418823, -0.5211635231971741, -0.5082768201828003, 0.29114586114883423, 0.20432542264461517, -0.1528337597846985, 0.04837314411997795, -0.0788985937833786 },
   { -0.28646746277809143, -0.047947779297828674, -0.6325092315673828, -0.37956273555755615, -0.13240474462509155, 0.33357474207878113, 0.3357556462287903, -0.2670498788356781, 0.002723848447203636, -0.024537065997719765 },
   { -0.17975756525993347, -0.09907205402851105, -0.30760303139686584, -0.3191256523132324, 0.07838668674230576, 0.20957301557064056, 0.24429593980312347, -0.23149393498897552, -0.11913986504077911, -0.0715755745768547 },
   { -0.09668880701065063, -0.20185142755508423, -0.12032001465559006, -0.21139346063137054, 0.1488693207502365, 0.20391568541526794, 0.1851252168416977, -0.2680954039096832, -0.06844521313905716, -0.25631412863731384 },
   { 0.0831977128982544, 0.027822645381093025, -0.16164465248584747, -0.10366540402173996, 0.005536153446882963, -0.12867121398448944, 0.10349491238594055, 0.11359256505966187, 0.1669389307498932, 0.06805839389562607 },
   { 0.19285620748996735, -0.07340433448553085, -0.10486699640750885, -0.0249280147254467, 0.18248802423477173, -0.02710043452680111, 0.193390354514122, 0.01955864578485489, 0.08132176101207733, -0.04700780659914017 },
   { -0.06486786156892776, 0.05262533575296402, -0.004285190720111132, 0.11557761579751968, 0.13464467227458954, -0.12570777535438538, 0.026906976476311684, 0.05620861425995827, -0.12404702603816986, -0.1746484339237213 },
   { -0.05383410304784775, 0.07040311396121979, 0.1474071890115738, 0.19327208399772644, -0.046050988137722015, -0.12965127825737, -0.1878501921892166, 0.09378174692392349, -0.23037366569042206, -0.33138319849967957 },
   { -0.16625528037548065, 0.0007998627843335271, 0.17922864854335785, 0.23917098343372345, -0.2609708607196808, -0.04282402992248535, -0.5970873832702637, 0.19270507991313934, -0.11328154057264328, -0.2360999882221222 },
   { -0.11270688474178314, 0.1411750316619873, 0.25914567708969116, 0.14309068024158478, -0.5690752863883972, 0.0623835064470768, -0.4314963221549988, 0.2681284546852112, -0.15906506776809692, -0.1286926418542862 },
   { -0.12584581971168518, -0.19745802879333496, 0.17273443937301636, 0.1524980217218399, -0.31996431946754456, 0.038047272711992264, -0.11902549862861633, 0.18520033359527588, -0.17822639644145966, -0.09680049866437912 },
   { -0.08927813917398453, -0.10367519408464432, 0.11545135825872421, 0.10302618891000748, -0.16361621022224426, 0.041473716497421265, -0.17644590139389038, 0.16743317246437073, -0.009061064571142197, -0.21081505715847015 },
   { -0.10592866688966751, -0.23327027261257172, -0.01922089233994484, 0.003529480891302228, -0.12043900042772293, 0.23759222030639648, 0.029889168217778206, -0.008365606889128685, 0.10254982858896255, -0.05362466350197792 },
   { -0.10157474130392075, -0.5849277973175049, 0.04219663888216019, -0.21999576687812805, -0.5065509676933289, 0.264022558927536, 0.26693621277809143, -0.017453091219067574, 0.04923266917467117, 0.000954475486651063 },
   { -0.1689203679561615, -0.3204841911792755, -0.1701280176639557, -0.17655660212039948, -0.43138587474823, 0.2624470889568329, 0.2806311845779419, 0.018762927502393723, 0.021675636991858482, 0.0010446563828736544 },
   { -0.5143447518348694, -0.03058292344212532, -0.14647552371025085, -0.202324777841568, -0.13404342532157898, 0.35833385586738586, 0.20002497732639313, -0.19285956025123596, -0.035462476313114166, -0.15956297516822815 },
   { -0.21003466844558716, -0.06684193760156631, -0.0635114386677742, -0.17981567978858948, 0.022032754495739937, 0.23944808542728424, 0.072412870824337, -0.142427459359169, -0.1603824496269226, 0.014733698219060898 },
   { -0.0025392856914550066, -0.11989473551511765, -0.010655935853719711, 0.06566327810287476, 0.07489093393087387, 0.26295995712280273, -0.19014903903007507, -0.12252839654684067, -0.20688752830028534, -0.07241019606590271 },
   { 0.020383965224027634, 0.030418412759900093, -0.1850714236497879, -0.13552695512771606, -0.06872818619012833, 0.064371258020401, -0.06321632862091064, 0.16953834891319275, 0.14760980010032654, 0.036292701959609985 },
   { 0.0066527267917990685, -0.11040802299976349, 0.02345210872590542, 0.027862822636961937, -0.13893897831439972, 0.08945519477128983, -0.04438675567507744, 0.051991093903779984, -0.044571202248334885, 0.008025230839848518 },
   { -0.04665858671069145, -0.04264668747782707, 0.12195020169019699, -0.011318136006593704, -0.06494862586259842, -0.03452048823237419, -0.18087448179721832, 0.028111081570386887, -0.03493548184633255, -0.08254573494195938 },
   { -0.27480417490005493, -0.004034462384879589, 0.30616533756256104, 0.12096848338842392, -0.20779241621494293, 0.11785559356212616, -0.22658175230026245, 0.06750158965587616, -0.15379072725772858, -0.2477024346590042 },
   { -0.2532571852207184, 0.008553098887205124, 0.3858582079410553, 0.006305541843175888, -0.19616007804870605, -0.023449841886758804, -0.6924011707305908, 0.21735161542892456, -0.09360935539007187, -0.24409164488315582 },
   { -0.3308124840259552, 0.047748491168022156, 0.11456912010908127, -0.040691301226615906, -0.10067437589168549, 0.011459073051810265, -0.6475753784179688, 0.16440898180007935, -0.1043170839548111, -0.06895839422941208 },
   { -0.18918311595916748, -0.07201996445655823, 0.1496346890926361, 0.11037888377904892, -0.12453605979681015, 0.054976288229227066, -0.2367822229862213, 0.10713514685630798, -0.24151648581027985, 0.1269616186618805 },
   { -0.12526006996631622, -0.38764894008636475, -0.07493359595537186, 0.20329074561595917, -0.2672647535800934, 0.12427080422639847, -0.10753024369478226, 0.010289057157933712, 0.058205850422382355, 0.055109910666942596 },
   { -0.07243254780769348, -0.4959602653980255, -0.0030707488767802715, 0.006702538579702377, -0.4695257842540741, 0.2729334235191345, 0.04993101581931114, 0.003312099492177367, -0.17083154618740082, 0.09096461534500122 },
   { -0.037918783724308014, -0.447898805141449, -0.028204450383782387, 0.06991612166166306, -0.19493670761585236, 0.1757633537054062, 0.2793901264667511, -0.0724477767944336, -0.11099720746278763, -0.1705428510904312 },
   { -0.09050574153661728, -0.12447802722454071, -0.2332574725151062, 0.10166770219802856, -0.35414648056030273, 0.19869017601013184, 0.17411945760250092, -0.08837506920099258, 0.10385920852422714, -0.2827126681804657 },
   { -0.44011732935905457, -0.027467938140034676, -0.10281231254339218, 0.12241694331169128, -0.2028302252292633, 0.2970718741416931, -0.10037912428379059, 0.01268529798835516, 0.04611380770802498, -0.2388477474451065 },
   { -0.34622231125831604, -0.03279884159564972, -0.10459636896848679, 0.15209443867206573, -0.07790464907884598, 0.2036598175764084, -0.21725937724113464, -0.03055686503648758, 0.010121963918209076, -0.1231638491153717 },
   { -0.11751259118318558, 0.06902004778385162, 0.044520653784275055, 0.09514904022216797, -0.19934922456741333, 0.1076599657535553, -0.4200640618801117, -0.16106514632701874, 0.07735756784677505, -0.09519541263580322 },
   { 0.16876108944416046, 0.1568772792816162, -0.19011472165584564, -0.07675326615571976, 0.0056464048102498055, -0.16169539093971252, -0.06124056503176689, 0.2684175670146942, 0.060775209218263626, 0.08385045826435089 },
   { 0.08137988299131393, -1.7995927919400856e-05, -0.1694461554288864, -0.22991080582141876, -0.029534880071878433, 0.09819856286048889, 0.029348457232117653, 0.03091117925941944, 0.11311263591051102, -0.10585449635982513 },
   { -0.10927299410104752, 0.006349530536681414, -0.043667662888765335, -0.01640843041241169, -0.017249809578061104, 0.18913553655147552, -0.08980090916156769, 0.09462667256593704, 0.058423809707164764, 0.00023106668959371746 },
   { -0.2610692083835602, -0.08132760971784592, -0.041072506457567215, -0.020087700337171555, -0.010286957025527954, 0.22874541580677032, -0.25937965512275696, 0.12945516407489777, 0.02866651490330696, -0.12319567054510117 },
   { -0.4730841815471649, -0.10242020338773727, -0.03845049813389778, 0.00580922607332468, 0.040175583213567734, 0.08574791997671127, -0.46872663497924805, 0.15918351709842682, 0.004336788319051266, -0.0835936889052391 },
   { -0.2542453706264496, 0.041703931987285614, 0.12081832438707352, 0.12789912521839142, 0.12899227440357208, 0.07998844981193542, -0.6207292079925537, -0.022580856457352638, -0.12663576006889343, 0.03529144078493118 },
   { -0.33184781670570374, -0.15658698976039886, -0.19178679585456848, 0.1838831603527069, 0.030003182590007782, 0.09776311367750168, -0.20528601109981537, -0.09198032319545746, -0.12319451570510864, 0.19393183290958405 },
   { -0.25993385910987854, -0.3841574788093567, -0.22237572073936462, 0.13700318336486816, -0.13147759437561035, 0.06380661576986313, -0.07631593197584152, -0.24496319890022278, -0.08808335661888123, 0.26939135789871216 },
   { -0.1541426032781601, -0.12544672191143036, -0.09181572496891022, 0.06344989687204361, -0.17408552765846252, 0.12481753528118134, 0.0956072211265564, 0.024374132975935936, 0.09558606892824173, -0.0035356776788830757 },
   { 0.10027029365301132, -0.13308705389499664, 0.000689985987264663, 0.11854501068592072, 0.14541691541671753, -0.024560315534472466, -0.10245426744222641, 0.07377532869577408, 0.017824430018663406, -0.20911648869514465 },
   { -0.2101667821407318, 0.046462319791316986, -0.12342442572116852, 0.017713308334350586, 0.06857940554618835, 0.05352792888879776, -0.19586913287639618, -0.0618155263364315, 0.17372426390647888, -0.17677494883537292 },
   { -0.19987840950489044, 0.02922143042087555, 0.01801362819969654, 0.08656752109527588, 0.0620759017765522, 0.09448911249637604, -0.23397350311279297, -0.11861849576234818, 0.16685587167739868, -0.06139098107814789 },
   { -0.10549056529998779, 0.04862650856375694, 0.1784944385290146, -0.10757523030042648, -0.054151348769664764, -0.09705221652984619, -0.24543175101280212, -0.010023827664554119, 0.1339481920003891, 0.07178523391485214 },
   { -0.09386086463928223, 0.008717773482203484, 0.15735988318920135, -0.21678268909454346, -0.15677614510059357, -0.15437479317188263, -0.031231997534632683, -0.12384258210659027, 0.17408522963523865, 0.1670263558626175 },
   { 0.16826032102108002, 0.24653232097625732, -0.06341361254453659, -0.26300379633903503, 0.018138812854886055, -0.06895803660154343, -0.19566254317760468, 0.05376387760043144, -0.14653661847114563, 0.12008904665708542 },
   { 0.07914786785840988, -0.013363910838961601, -0.21995946764945984, -0.29047608375549316, 0.07793325185775757, 0.14011983573436737, -0.021774867549538612, -0.022474730387330055, 0.07955951988697052, -0.0068978494964540005 },
   { -0.030709225684404373, 0.34367579221725464, -0.29956135153770447, -0.13792487978935242, 0.1582130789756775, 0.04881284385919571, -0.1490727812051773, -0.013624305836856365, 0.055718664079904556, -0.11189192533493042 },
   { -0.012302061542868614, 0.026262659579515457, -0.18743276596069336, 0.07666685432195663, -0.0006502358592115343, 0.117115817964077, -0.14895203709602356, 0.142163947224617, 0.014012383297085762, -0.07149121165275574 },
   { -0.3374190330505371, -0.25080448389053345, -0.16918803751468658, 0.08326928317546844, 0.11754880845546722, 0.28109198808670044, -0.3089478313922882, 0.1511506289243698, -0.10260490328073502, 0.0611124224960804 },
   { -0.3937950134277344, 0.31660357117652893, -0.16847042739391327, 0.17047721147537231, 0.07676549255847931, 0.15828953683376312, -0.4630470871925354, -0.11744235455989838, -0.278495728969574, 0.23624928295612335 },
   { -0.49589598178863525, -0.03422082960605621, 0.0030755773186683655, 0.17787767946720123, 0.03380553424358368, 0.0335017628967762, -0.314365416765213, -0.2555922567844391, -0.15793947875499725, 0.21726606786251068 },
   { -0.46784424781799316, -0.22014711797237396, -0.13712354004383087, 0.06310829520225525, 0.1025574654340744, 0.05614160746335983, -0.11714629083871841, -0.24686136841773987, -0.1357010453939438, 0.10450621694326401 },
   { -0.18513426184654236, 0.022052232176065445, -0.10199424624443054, 0.002035339130088687, 0.04899361729621887, -0.05668729543685913, -0.032296761870384216, -0.008151248097419739, -0.04096737504005432, -0.020307738333940506 },
   { -0.039356376975774765, -0.10804779082536697, -0.036070555448532104, 0.032399825751781464, 0.0797329917550087, -0.07778263837099075, -0.09904187172651291, 0.04615747183561325, 0.18482252955436707, -0.09233395755290985 },
   { -0.004310119431465864, -0.09481141716241837, 0.0467032752931118, -0.18482297658920288, 0.1130722388625145, -0.07094503194093704, -0.04844450578093529, 0.09137113392353058, 0.09517589956521988, -0.2149507999420166 },
   { 0.06854776293039322, -0.22275982797145844, 0.3033944070339203, -0.15203788876533508, 0.050317130982875824, -0.2579710781574249, -0.0009145181975327432, 0.012901687063276768, 0.030998174101114273, -0.26969411969184875 },
   { -0.09852983057498932, -0.0006085038767196238, 0.29117757081985474, -0.47797495126724243, -0.06654668599367142, -0.17846140265464783, 0.019269946962594986, -0.05283696576952934, -0.01669745333492756, -0.1514454036951065 },
   { -6.894367834320292e-05, 0.07051340490579605, 0.3044513463973999, -0.1455109417438507, -0.15883399546146393, -0.15965041518211365, 0.040632374584674835, -0.19806517660617828, -0.008025872521102428, -0.16750916838645935 },
   { 0.07816494256258011, 0.1703045517206192, 0.032016556710004807, -0.025336353108286858, -0.09033026546239853, -0.1649639755487442, -0.15698093175888062, -0.01909760572016239, -0.1319834440946579, 0.025803688913583755 },
   { -0.025395192205905914, 0.10053223371505737, 0.0011222459143027663, 0.00494177034124732, 0.009454233571887016, 0.0624423623085022, -0.0973624587059021, -0.04809890687465668, 0.1707116812467575, 0.010295980609953403 },
   { 0.02095021679997444, 0.09754689037799835, 0.036588214337825775, -0.023748302832245827, 0.046129386872053146, 0.11564629524946213, -0.004272689111530781, -0.02097207121551037, -0.007240917533636093, -0.017488213256001472 },
   { -0.05811931937932968, -0.1035478264093399, -0.05687699466943741, -0.11615859717130661, 0.04557376354932785, 0.1228160560131073, -0.08108128607273102, -0.0694451630115509, -0.08252381533384323, 0.02238340489566326 },
   { -0.052883632481098175, -0.26878008246421814, -0.18870232999324799, 0.1404801309108734, -0.05156944319605827, 0.2433519959449768, -0.1543291062116623, 0.010460767894983292, -0.18898333609104156, 0.1070384755730629 },
   { -0.1399843394756317, 0.16337589919567108, -0.12196360528469086, 0.2269160896539688, -0.07978399842977524, 0.18617680668830872, -0.23732833564281464, -0.10960792005062103, -0.2784050405025482, 0.15400831401348114 },
   { -0.3219544291496277, 0.0235745832324028, -0.015799740329384804, 0.2576099634170532, 0.07789523899555206, 0.150682732462883, -0.2847384810447693, -0.133263498544693, -0.23426097631454468, 0.09752622991800308 },
   { -0.047325797379016876, 0.01329528447240591, -0.01242883875966072, 0.1668270379304886, -0.013237942941486835, -0.03909182548522949, -0.003684254828840494, -0.14092135429382324, -0.14747469127178192, 0.10410668700933456 },
   { 0.03000621125102043, -0.07208579778671265, -0.07730626314878464, 0.13635246455669403, -0.06248556077480316, -0.0002540712303016335, 0.004716518800705671, -0.008359706960618496, -0.060762565582990646, -0.051542334258556366 },
   { 0.10483414679765701, -0.23330660164356232, 0.13511252403259277, -0.06233234703540802, -0.0007904588710516691, -0.1018606498837471, 0.10306812077760696, 0.031074868515133858, 0.02986210770905018, -0.18538567423820496 },
   { 0.045286547392606735, -0.3484788239002228, 0.20403850078582764, -0.20101238787174225, 0.04326003044843674, -0.0563691109418869, 0.12066362798213959, 0.006622378248721361, 0.07538728415966034, -0.3343186378479004 },
   { 0.06771815568208694, 0.01627902314066887, 0.22674748301506042, -0.20273521542549133, -0.04352287948131561, -0.20218521356582642, 0.027305174618959427, 0.0230956319719553, -0.2317955493927002, -0.4316757917404175 },
   { 0.05238537862896919, -0.026046590879559517, 0.2522239089012146, -0.25799378752708435, 0.034962963312864304, -0.14705531299114227, 0.12482892721891403, -0.02615368366241455, -0.12173259258270264, -0.23795118927955627 },
   { 0.07439135015010834, -0.057439882308244705, 0.20543360710144043, -0.09170140326023102, 0.014050502330064774, 0.017779702320694923, 0.15016545355319977, -0.07003387063741684, -0.21200226247310638, -0.25870874524116516 },
   { -0.0046715401113033295, -0.1329745203256607, 0.12974350154399872, 0.08982396125793457, -0.05728699266910553, -0.17860087752342224, -0.09159056842327118, 0.008448164910078049, -0.0422993078827858, -0.03799877315759659 },
   { -0.049574315547943115, -0.07509220391511917, -0.05418641120195389, 0.08835621923208237, -0.01596633717417717, -0.04138000309467316, -0.06685701012611389, -0.11961819231510162, 0.08596593141555786, -0.15110580623149872 },
   { -0.1994144767522812, -0.03018559142947197, -0.05347307398915291, 0.11200285702943802, 0.0293047484010458, 0.18075008690357208, -0.12499083578586578, -0.11092629283666611, -0.0980551540851593, -0.03290962055325508 },
   { -0.016182078048586845, 0.0047586639411747456, -0.10390150547027588, 0.1608268916606903, 0.10523734986782074, 0.18083158135414124, 0.0033629003446549177, -0.16880390048027039, -0.19733542203903198, 0.12347006797790527 },
   { 0.009242522530257702, -0.11298972368240356, -0.05893417075276375, 0.04041332006454468, 0.0035653028171509504, 0.07674151659011841, -0.0985436737537384, -0.1169559508562088, -0.18962305784225464, 0.28100916743278503 },
   { 0.010588212870061398, -0.03553890809416771, -0.034313496202230453, 0.10505087673664093, -0.12497386336326599, 0.20726896822452545, -0.09377946704626083, -0.21884441375732422, -0.2078631967306137, 0.2725079357624054 },
   { -0.08948824554681778, -0.047837041318416595, 0.030159108340740204, 0.16227887570858002, -0.027907559648156166, 0.022288283333182335, -0.06897344440221786, -0.13030417263507843, -0.23307181894779205, 0.16293056309223175 },
   { 0.009496426209807396, -0.05478791147470474, -0.02465093322098255, 0.09307903796434402, 0.00352326687425375, 0.013759699650108814, 0.11512615531682968, -0.1299545019865036, -0.025327371433377266, 0.04017987102270126 },
   { -0.06542006880044937, 0.007102317176759243, 0.09809742122888565, 0.13503089547157288, -0.061628978699445724, -0.06370484083890915, 0.10325808078050613, -0.14474143087863922, -0.13032317161560059, -0.1404542624950409 },
   { -0.04191703349351883, -0.06936974823474884, 0.23725062608718872, -0.11070019006729126, -0.03643370419740677, -0.07222951203584671, 0.04258605092763901, -0.11555595695972443, -0.0940554141998291, -0.16135239601135254 },
   { 0.06117454171180725, 0.025732800364494324, 0.266415536403656, -0.2159566581249237, 0.16587311029434204, -0.16799913346767426, 0.08477906882762909, 0.02598549984395504, -0.18632124364376068, -0.3560660779476166 },
   { -0.007385385688394308, 0.18000982701778412, 0.17722122371196747, -0.2101784646511078, -0.07423682510852814, -0.08564327657222748, 0.10742520540952682, 0.08335261046886444, -0.022380484268069267, -0.27629151940345764 },
   { -0.09246424585580826, 0.18717049062252045, 0.20522236824035645, -0.20869293808937073, 0.0124357333406806, -0.04611843079328537, 0.02990083023905754, -0.09552203118801117, -0.08982552587985992, -0.18786916136741638 },
   { 0.02868444286286831, 0.123563252389431, -0.06307291984558105, 0.055731844156980515, -0.002406273502856493, -0.07998733222484589, 0.06782996654510498, -0.09108227491378784, 0.0021270932629704475, 0.04091862961649895 },
   { 0.10139376670122147, 0.11018649488687515, 0.17250508069992065, -0.0312187559902668, 0.01898682303726673, -0.24501098692417145, 0.11525499820709229, -0.15534082055091858, -0.0647699236869812, -0.007205160800367594 },
   { -0.021049920469522476, 0.08322910219430923, -0.0578925646841526, 0.05036158859729767, 0.06644156575202942, -0.05231332406401634, -0.15913762152194977, -0.14319102466106415, 0.03840520232915878, -0.05482077971100807 },
   { -0.04925026372075081, 0.07881657034158707, -0.0518905408680439, 0.05850839242339134, 0.06241618096828461, -0.0024327519349753857, -0.01979335956275463, -0.13640910387039185, 7.720444409642369e-05, -0.01806223951280117 },
   { -0.0586414597928524, 0.1122695803642273, -0.015372537076473236, 0.07460576295852661, -0.03368649631738663, -0.020374741405248642, -0.013161799870431423, -0.1805758774280548, -0.06921041756868362, -0.04659710451960564 },
   { 0.11208155006170273, -0.01212923601269722, -0.02829243615269661, 0.037116821855306625, -0.08386595547199249, 0.006967027205973864, 0.06820321083068848, -0.21366526186466217, -0.09064924716949463, 0.022656232118606567 },
   { 0.13590259850025177, 0.04154641553759575, -0.022839948534965515, 0.12235381454229355, -0.2156185358762741, 0.0068739126436412334, 0.09754969924688339, -0.25765764713287354, -0.06687968224287033, -0.06775537133216858 },
   { -0.03645399212837219, 0.15112413465976715, -0.09839605540037155, 0.07513454556465149, -0.1552802473306656, -0.05759618431329727, -0.027068860828876495, -0.20821352303028107, -0.018320834264159203, -0.09104951471090317 },
   { 0.003109188051894307, 0.04172041639685631, 0.030802281573414803, 0.027902910485863686, -0.15414369106292725, 0.011277706362307072, 0.08230899274349213, -0.2555595636367798, -0.00344810145907104, -0.12108509987592697 },
   { -0.10872134566307068, 0.10380208492279053, 0.07931214570999146, 0.03243641182780266, -0.055505573749542236, -0.05826985090970993, 0.06013081595301628, -0.21639738976955414, -0.023407623171806335, -0.10851502418518066 },
   { -0.0717664510011673, -0.030925054103136063, 0.2835181653499603, -0.038931868970394135, 0.07947676628828049, -0.014728227630257607, 0.020984262228012085, -0.2968118488788605, -0.0939503014087677, -0.014696527272462845 },
   { -0.06710878759622574, 0.07690784335136414, 0.23010170459747314, -0.14162345230579376, -0.08566801249980927, -0.058906588703393936, -0.012680214829742908, -0.255606472492218, 0.037454962730407715, -0.182699054479599 },
   { -0.03564363345503807, 0.14655576646327972, 0.08638065308332443, -0.10212302953004837, -0.016088193282485008, -0.06823243200778961, 0.0010146892163902521, -0.047052208334207535, -0.10856256633996964, 0.06496280431747437 },
   { -0.07152704149484634, 0.07095255702733994, 0.08414887636899948, -0.11203358322381973, -0.06800785660743713, 0.10501933097839355, -0.06988734006881714, -0.1323915421962738, -0.019555170089006424, 0.005482256878167391 },
   { -0.14330138266086578, 0.21919336915016174, 0.03502489998936653, 0.011402471922338009, -0.15893115103244781, 0.019627034664154053, 0.031071588397026062, -0.2487671822309494, -0.009945028461515903, 0.11896513402462006 },
   { 0.019006777554750443, 0.05999057739973068, 0.1326790302991867, -0.1225418671965599, -0.21468524634838104, 0.06416881829500198, -0.11774394661188126, 0.05335428565740585, -0.0896265059709549, -0.013972336426377296 },
   { 0.06221620738506317, 0.000707701314240694, 0.0469171367585659, -0.0634952038526535, -0.026155369356274605, -0.010383362881839275, -0.4078952670097351, 0.038318898528814316, 0.03951361030340195, -0.09066078811883926 },
   { 0.07512280344963074, 0.07161315530538559, -0.03357550874352455, -0.07350555062294006, -0.0336034819483757, -0.1472569853067398, -0.0524059422314167, 0.013478897511959076, 0.004018961451947689, 0.045507438480854034 },
   { 0.15297505259513855, 0.09536967426538467, 0.0009669898427091539, 0.053688518702983856, -0.030844246968626976, -0.07512525469064713, -0.12468325346708298, -0.09809345752000809, -0.11967703700065613, 0.03889645263552666 },
   { 0.12586145102977753, 0.1197197288274765, 0.07221793383359909, 0.022356655448675156, -0.0851556584239006, 0.08961077779531479, -0.084260955452919, -0.08054478466510773, -0.01921211928129196, -0.06978178769350052 },
   { 0.03213142231106758, -0.02162717655301094, -0.017203327268362045, 0.0034122164361178875, -0.06040892004966736, 0.04933347925543785, 0.03967718780040741, -0.07648439705371857, 0.022120848298072815, -0.0018474337412044406 },
   { 0.050216369330883026, -0.0269378200173378, -0.0063234129920601845, 0.06961916387081146, -0.0259933490306139, 0.029965735971927643, 0.020129824057221413, -0.119004987180233, 0.011399883776903152, -0.05883209779858589 },
   { 0.07971717417240143, 0.08227596431970596, 0.07127907872200012, -0.07743076980113983, -0.0010109307477250695, 0.07136106491088867, 0.02651996910572052, -0.023947274312376976, -0.044791270047426224, -0.03037519007921219 },
   { 0.08294545114040375, 0.06799805164337158, 0.06351888179779053, -0.09925397485494614, -0.1377507448196411, -0.12471619248390198, 0.03218124061822891, -0.09361276030540466, 0.033551353961229324, -0.08251330256462097 },
   { 0.023948317393660545, 0.19025489687919617, 0.18848685920238495, -0.020149076357483864, 0.0622200071811676, -0.11067434400320053, -0.04872250184416771, -0.14161744713783264, 0.03538541495800018, -0.12729816138744354 },
   { -0.06641720980405807, 0.0484217144548893, 0.17407482862472534, -0.05742652341723442, 0.17525866627693176, -0.10490766912698746, 0.026833031326532364, -0.269907146692276, 0.10421337932348251, 0.013879465870559216 },
   { -0.014316912740468979, -0.12369698286056519, 0.13458499312400818, -0.10216228663921356, 0.11146803200244904, -0.0742330551147461, -0.10691292583942413, -0.23290269076824188, -0.07815400511026382, -0.00976095162332058 },
   { -0.006871347781270742, -0.03262167051434517, -0.04831860959529877, -0.03913132846355438, -0.050549011677503586, 0.15062853693962097, -0.14940853416919708, -0.31614696979522705, 0.10552362352609634, 0.09069113433361053 },
   { -0.15487724542617798, 0.027930406853556633, 0.11495546996593475, -0.09262478351593018, -0.25076234340667725, 0.20526157319545746, -0.23097628355026245, -0.256657212972641, 0.020189112052321434, 0.19306987524032593 },
   { -0.14382709562778473, -0.11035691201686859, -0.23109249770641327, 0.17610572278499603, -0.0962773934006691, 0.09801533818244934, -0.03302621468901634, 0.11398083716630936, -0.30033978819847107, 0.038606468588113785 },
   { -0.19175636768341064, -0.06855269521474838, -0.08515472710132599, 0.0818769782781601, -0.2189251333475113, 0.14009490609169006, -0.17305243015289307, 0.1949344277381897, -0.048338063061237335, 0.05088883265852928 },
   { -0.04610535502433777, -0.04379500076174736, -0.1209474503993988, 0.10248301923274994, -0.09208182245492935, -0.07563290745019913, -0.3881007134914398, 0.12717562913894653, -0.03994220867753029, 0.07694119960069656 },
   { -0.10549960285425186, 0.06538847088813782, -0.09429459273815155, -0.02285393513739109, 0.09080064296722412, -0.08813997358083725, -0.09722724556922913, 0.10712888091802597, -0.041506119072437286, 0.022090425714850426 },
   { -0.0391392856836319, -0.025969762355089188, -0.07317354530096054, 0.05414244532585144, 0.08960213512182236, 0.08502090722322464, -0.0611596442759037, -0.0002340454375371337, -0.019704965874552727, 0.02264520525932312 },
   { 0.04934782534837723, 0.06720515340566635, 0.04300308600068092, 0.0669005960226059, 0.029164744541049004, 0.08394618332386017, -0.021748770028352737, -0.010263945907354355, -0.1265621930360794, -0.007435769774019718 },
   { -0.047853145748376846, 0.01972280442714691, 0.14666084945201874, -0.0017115871887654066, -0.07062676548957825, 0.02206953428685665, 0.0388624407351017, -0.10157284885644913, 0.06873925775289536, -0.06526666134595871 },
   { -0.030247898772358894, 0.02564578503370285, 0.07562922686338425, 0.05686451867222786, -0.14185300469398499, 0.09054124355316162, 0.06408779323101044, -0.09089336544275284, 0.010387935675680637, -0.12471742182970047 },
   { -0.011675305664539337, 0.13656562566757202, 0.10434026271104813, 0.006492087617516518, -0.03447181358933449, 0.01436254195868969, 0.1228870302438736, -0.07530266791582108, 0.07700122892856598, 0.03994894400238991 },
   { -0.07167983800172806, 0.02599954977631569, 0.11317727714776993, -0.10100390762090683, 0.015210434794425964, 0.015109290368855, 0.16730044782161713, -0.07357880473136902, -0.05829031020402908, 0.12322210520505905 },
   { -0.1917278915643692, 0.004572729580104351, -0.0408223420381546, -0.060347605496644974, -0.04931674152612686, -0.04084409773349762, -0.1214919164776802, -0.11717738211154938, 0.034311093389987946, 0.04130302369594574 },
   { -0.3489219546318054, 0.05471363663673401, -0.08194661140441895, -0.24662834405899048, -0.011675095185637474, 0.09417238086462021, -0.014930862002074718, -0.055585090070962906, 0.16024337708950043, 0.17205272614955902 },
   { -0.23409906029701233, -0.08612601459026337, 0.02984105981886387, -0.25933343172073364, 0.09558963775634766, 0.049453794956207275, -0.06037816032767296, -0.21161285042762756, -0.0013114811154082417, 0.14802804589271545 },
   { -0.13311955332756042, -0.15718500316143036, -0.07855086028575897, -0.10779355466365814, -0.2384956330060959, 0.26025205850601196, -0.1212991401553154, -0.2573351263999939, 0.0632217675447464, 0.1623251736164093 }
  };


float dense_biases [10] = { 0.06637410074472427, 0.2002762109041214, -0.03613702952861786, -0.03232784941792488, -0.10314123332500458, 0.06916825473308563, -0.045289188623428345, -0.03229064866900444, -0.04806031659245491, -0.0002710323315113783 };
# 3 "CNN/src/dense.cpp" 2
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3

# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 236 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 39 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 394 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 395 "/usr/include/features.h" 2 3 4
# 480 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 481 "/usr/include/features.h" 2 3 4
# 502 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 576 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 577 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 578 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 503 "/usr/include/features.h" 2 3 4
# 526 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 527 "/usr/include/features.h" 2 3 4
# 40 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 2 3
# 509 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 512 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 42 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 1 3
# 36 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
# 67 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 1 3
# 33 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbit (double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinf (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnan (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) noexcept (true);


extern int __issignaling (double __value) noexcept (true)
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double acos (double __x) noexcept (true); extern double __acos (double __x) noexcept (true);

 extern double asin (double __x) noexcept (true); extern double __asin (double __x) noexcept (true);

 extern double atan (double __x) noexcept (true); extern double __atan (double __x) noexcept (true);

 extern double atan2 (double __y, double __x) noexcept (true); extern double __atan2 (double __y, double __x) noexcept (true);


 extern double cos (double __x) noexcept (true); extern double __cos (double __x) noexcept (true);

 extern double sin (double __x) noexcept (true); extern double __sin (double __x) noexcept (true);

 extern double tan (double __x) noexcept (true); extern double __tan (double __x) noexcept (true);




 extern double cosh (double __x) noexcept (true); extern double __cosh (double __x) noexcept (true);

 extern double sinh (double __x) noexcept (true); extern double __sinh (double __x) noexcept (true);

 extern double tanh (double __x) noexcept (true); extern double __tanh (double __x) noexcept (true);



 extern void sincos (double __x, double *__sinx, double *__cosx) noexcept (true); extern void __sincos (double __x, double *__sinx, double *__cosx) noexcept (true);





 extern double acosh (double __x) noexcept (true); extern double __acosh (double __x) noexcept (true);

 extern double asinh (double __x) noexcept (true); extern double __asinh (double __x) noexcept (true);

 extern double atanh (double __x) noexcept (true); extern double __atanh (double __x) noexcept (true);





 extern double exp (double __x) noexcept (true); extern double __exp (double __x) noexcept (true);


extern double frexp (double __x, int *__exponent) noexcept (true); extern double __frexp (double __x, int *__exponent) noexcept (true);


extern double ldexp (double __x, int __exponent) noexcept (true); extern double __ldexp (double __x, int __exponent) noexcept (true);


 extern double log (double __x) noexcept (true); extern double __log (double __x) noexcept (true);


 extern double log10 (double __x) noexcept (true); extern double __log10 (double __x) noexcept (true);


extern double modf (double __x, double *__iptr) noexcept (true); extern double __modf (double __x, double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern double exp10 (double __x) noexcept (true); extern double __exp10 (double __x) noexcept (true);




 extern double expm1 (double __x) noexcept (true); extern double __expm1 (double __x) noexcept (true);


 extern double log1p (double __x) noexcept (true); extern double __log1p (double __x) noexcept (true);


extern double logb (double __x) noexcept (true); extern double __logb (double __x) noexcept (true);




 extern double exp2 (double __x) noexcept (true); extern double __exp2 (double __x) noexcept (true);


 extern double log2 (double __x) noexcept (true); extern double __log2 (double __x) noexcept (true);






 extern double pow (double __x, double __y) noexcept (true); extern double __pow (double __x, double __y) noexcept (true);


extern double sqrt (double __x) noexcept (true); extern double __sqrt (double __x) noexcept (true);



 extern double hypot (double __x, double __y) noexcept (true); extern double __hypot (double __x, double __y) noexcept (true);




 extern double cbrt (double __x) noexcept (true); extern double __cbrt (double __x) noexcept (true);






extern double ceil (double __x) noexcept (true) __attribute__ ((__const__)); extern double __ceil (double __x) noexcept (true) __attribute__ ((__const__));


extern double fabs (double __x) noexcept (true) __attribute__ ((__const__)); extern double __fabs (double __x) noexcept (true) __attribute__ ((__const__));


extern double floor (double __x) noexcept (true) __attribute__ ((__const__)); extern double __floor (double __x) noexcept (true) __attribute__ ((__const__));


extern double fmod (double __x, double __y) noexcept (true); extern double __fmod (double __x, double __y) noexcept (true);
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern double drem (double __x, double __y) noexcept (true); extern double __drem (double __x, double __y) noexcept (true);



extern double significand (double __x) noexcept (true); extern double __significand (double __x) noexcept (true);






extern double copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double nan (const char *__tagb) noexcept (true); extern double __nan (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) noexcept (true); extern double __j0 (double) noexcept (true);
extern double j1 (double) noexcept (true); extern double __j1 (double) noexcept (true);
extern double jn (int, double) noexcept (true); extern double __jn (int, double) noexcept (true);
extern double y0 (double) noexcept (true); extern double __y0 (double) noexcept (true);
extern double y1 (double) noexcept (true); extern double __y1 (double) noexcept (true);
extern double yn (int, double) noexcept (true); extern double __yn (int, double) noexcept (true);





 extern double erf (double) noexcept (true); extern double __erf (double) noexcept (true);
 extern double erfc (double) noexcept (true); extern double __erfc (double) noexcept (true);
extern double lgamma (double) noexcept (true); extern double __lgamma (double) noexcept (true);




extern double tgamma (double) noexcept (true); extern double __tgamma (double) noexcept (true);





extern double gamma (double) noexcept (true); extern double __gamma (double) noexcept (true);







extern double lgamma_r (double, int *__signgamp) noexcept (true); extern double __lgamma_r (double, int *__signgamp) noexcept (true);






extern double rint (double __x) noexcept (true); extern double __rint (double __x) noexcept (true);


extern double nextafter (double __x, double __y) noexcept (true); extern double __nextafter (double __x, double __y) noexcept (true);

extern double nexttoward (double __x, long double __y) noexcept (true); extern double __nexttoward (double __x, long double __y) noexcept (true);




extern double nextdown (double __x) noexcept (true); extern double __nextdown (double __x) noexcept (true);

extern double nextup (double __x) noexcept (true); extern double __nextup (double __x) noexcept (true);



extern double remainder (double __x, double __y) noexcept (true); extern double __remainder (double __x, double __y) noexcept (true);



extern double scalbn (double __x, int __n) noexcept (true); extern double __scalbn (double __x, int __n) noexcept (true);



extern int ilogb (double __x) noexcept (true); extern int __ilogb (double __x) noexcept (true);




extern long int llogb (double __x) noexcept (true); extern long int __llogb (double __x) noexcept (true);




extern double scalbln (double __x, long int __n) noexcept (true); extern double __scalbln (double __x, long int __n) noexcept (true);



extern double nearbyint (double __x) noexcept (true); extern double __nearbyint (double __x) noexcept (true);



extern double round (double __x) noexcept (true) __attribute__ ((__const__)); extern double __round (double __x) noexcept (true) __attribute__ ((__const__));



extern double trunc (double __x) noexcept (true) __attribute__ ((__const__)); extern double __trunc (double __x) noexcept (true) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) noexcept (true); extern double __remquo (double __x, double __y, int *__quo) noexcept (true);






extern long int lrint (double __x) noexcept (true); extern long int __lrint (double __x) noexcept (true);
__extension__
extern long long int llrint (double __x) noexcept (true); extern long long int __llrint (double __x) noexcept (true);



extern long int lround (double __x) noexcept (true); extern long int __lround (double __x) noexcept (true);
__extension__
extern long long int llround (double __x) noexcept (true); extern long long int __llround (double __x) noexcept (true);



extern double fdim (double __x, double __y) noexcept (true); extern double __fdim (double __x, double __y) noexcept (true);



extern double fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) noexcept (true); extern double __fma (double __x, double __y, double __z) noexcept (true);




extern double roundeven (double __x) noexcept (true) __attribute__ ((__const__)); extern double __roundeven (double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalize (double *__cx, const double *__x) noexcept (true);






extern double fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) noexcept (true); extern double __getpayload (const double *__x) noexcept (true);


extern int setpayload (double *__x, double __payload) noexcept (true);


extern int setpayloadsig (double *__x, double __payload) noexcept (true);







extern double scalb (double __x, double __n) noexcept (true); extern double __scalb (double __x, double __n) noexcept (true);
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf (float __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) noexcept (true);


extern int __issignalingf (float __value) noexcept (true)
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float acosf (float __x) noexcept (true); extern float __acosf (float __x) noexcept (true);

 extern float asinf (float __x) noexcept (true); extern float __asinf (float __x) noexcept (true);

 extern float atanf (float __x) noexcept (true); extern float __atanf (float __x) noexcept (true);

 extern float atan2f (float __y, float __x) noexcept (true); extern float __atan2f (float __y, float __x) noexcept (true);


 extern float cosf (float __x) noexcept (true); extern float __cosf (float __x) noexcept (true);

 extern float sinf (float __x) noexcept (true); extern float __sinf (float __x) noexcept (true);

 extern float tanf (float __x) noexcept (true); extern float __tanf (float __x) noexcept (true);




 extern float coshf (float __x) noexcept (true); extern float __coshf (float __x) noexcept (true);

 extern float sinhf (float __x) noexcept (true); extern float __sinhf (float __x) noexcept (true);

 extern float tanhf (float __x) noexcept (true); extern float __tanhf (float __x) noexcept (true);



 extern void sincosf (float __x, float *__sinx, float *__cosx) noexcept (true); extern void __sincosf (float __x, float *__sinx, float *__cosx) noexcept (true);





 extern float acoshf (float __x) noexcept (true); extern float __acoshf (float __x) noexcept (true);

 extern float asinhf (float __x) noexcept (true); extern float __asinhf (float __x) noexcept (true);

 extern float atanhf (float __x) noexcept (true); extern float __atanhf (float __x) noexcept (true);





 extern float expf (float __x) noexcept (true); extern float __expf (float __x) noexcept (true);


extern float frexpf (float __x, int *__exponent) noexcept (true); extern float __frexpf (float __x, int *__exponent) noexcept (true);


extern float ldexpf (float __x, int __exponent) noexcept (true); extern float __ldexpf (float __x, int __exponent) noexcept (true);


 extern float logf (float __x) noexcept (true); extern float __logf (float __x) noexcept (true);


 extern float log10f (float __x) noexcept (true); extern float __log10f (float __x) noexcept (true);


extern float modff (float __x, float *__iptr) noexcept (true); extern float __modff (float __x, float *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern float exp10f (float __x) noexcept (true); extern float __exp10f (float __x) noexcept (true);




 extern float expm1f (float __x) noexcept (true); extern float __expm1f (float __x) noexcept (true);


 extern float log1pf (float __x) noexcept (true); extern float __log1pf (float __x) noexcept (true);


extern float logbf (float __x) noexcept (true); extern float __logbf (float __x) noexcept (true);




 extern float exp2f (float __x) noexcept (true); extern float __exp2f (float __x) noexcept (true);


 extern float log2f (float __x) noexcept (true); extern float __log2f (float __x) noexcept (true);






 extern float powf (float __x, float __y) noexcept (true); extern float __powf (float __x, float __y) noexcept (true);


extern float sqrtf (float __x) noexcept (true); extern float __sqrtf (float __x) noexcept (true);



 extern float hypotf (float __x, float __y) noexcept (true); extern float __hypotf (float __x, float __y) noexcept (true);




 extern float cbrtf (float __x) noexcept (true); extern float __cbrtf (float __x) noexcept (true);






extern float ceilf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __ceilf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fabsf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __fabsf (float __x) noexcept (true) __attribute__ ((__const__));


extern float floorf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __floorf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) noexcept (true); extern float __fmodf (float __x, float __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) noexcept (true); extern float __dremf (float __x, float __y) noexcept (true);



extern float significandf (float __x) noexcept (true); extern float __significandf (float __x) noexcept (true);






extern float copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float nanf (const char *__tagb) noexcept (true); extern float __nanf (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));





extern float j0f (float) noexcept (true); extern float __j0f (float) noexcept (true);
extern float j1f (float) noexcept (true); extern float __j1f (float) noexcept (true);
extern float jnf (int, float) noexcept (true); extern float __jnf (int, float) noexcept (true);
extern float y0f (float) noexcept (true); extern float __y0f (float) noexcept (true);
extern float y1f (float) noexcept (true); extern float __y1f (float) noexcept (true);
extern float ynf (int, float) noexcept (true); extern float __ynf (int, float) noexcept (true);





 extern float erff (float) noexcept (true); extern float __erff (float) noexcept (true);
 extern float erfcf (float) noexcept (true); extern float __erfcf (float) noexcept (true);
extern float lgammaf (float) noexcept (true); extern float __lgammaf (float) noexcept (true);




extern float tgammaf (float) noexcept (true); extern float __tgammaf (float) noexcept (true);





extern float gammaf (float) noexcept (true); extern float __gammaf (float) noexcept (true);







extern float lgammaf_r (float, int *__signgamp) noexcept (true); extern float __lgammaf_r (float, int *__signgamp) noexcept (true);






extern float rintf (float __x) noexcept (true); extern float __rintf (float __x) noexcept (true);


extern float nextafterf (float __x, float __y) noexcept (true); extern float __nextafterf (float __x, float __y) noexcept (true);

extern float nexttowardf (float __x, long double __y) noexcept (true); extern float __nexttowardf (float __x, long double __y) noexcept (true);




extern float nextdownf (float __x) noexcept (true); extern float __nextdownf (float __x) noexcept (true);

extern float nextupf (float __x) noexcept (true); extern float __nextupf (float __x) noexcept (true);



extern float remainderf (float __x, float __y) noexcept (true); extern float __remainderf (float __x, float __y) noexcept (true);



extern float scalbnf (float __x, int __n) noexcept (true); extern float __scalbnf (float __x, int __n) noexcept (true);



extern int ilogbf (float __x) noexcept (true); extern int __ilogbf (float __x) noexcept (true);




extern long int llogbf (float __x) noexcept (true); extern long int __llogbf (float __x) noexcept (true);




extern float scalblnf (float __x, long int __n) noexcept (true); extern float __scalblnf (float __x, long int __n) noexcept (true);



extern float nearbyintf (float __x) noexcept (true); extern float __nearbyintf (float __x) noexcept (true);



extern float roundf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundf (float __x) noexcept (true) __attribute__ ((__const__));



extern float truncf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __truncf (float __x) noexcept (true) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) noexcept (true); extern float __remquof (float __x, float __y, int *__quo) noexcept (true);






extern long int lrintf (float __x) noexcept (true); extern long int __lrintf (float __x) noexcept (true);
__extension__
extern long long int llrintf (float __x) noexcept (true); extern long long int __llrintf (float __x) noexcept (true);



extern long int lroundf (float __x) noexcept (true); extern long int __lroundf (float __x) noexcept (true);
__extension__
extern long long int llroundf (float __x) noexcept (true); extern long long int __llroundf (float __x) noexcept (true);



extern float fdimf (float __x, float __y) noexcept (true); extern float __fdimf (float __x, float __y) noexcept (true);



extern float fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) noexcept (true); extern float __fmaf (float __x, float __y, float __z) noexcept (true);




extern float roundevenf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundevenf (float __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef (float *__cx, const float *__x) noexcept (true);






extern float fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) noexcept (true); extern float __getpayloadf (const float *__x) noexcept (true);


extern int setpayloadf (float *__x, float __payload) noexcept (true);


extern int setpayloadsigf (float *__x, float __payload) noexcept (true);







extern float scalbf (float __x, float __n) noexcept (true); extern float __scalbf (float __x, float __n) noexcept (true);
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitl (long double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) noexcept (true);


extern int __issignalingl (long double __value) noexcept (true)
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) noexcept (true); extern long double __acosl (long double __x) noexcept (true);

 extern long double asinl (long double __x) noexcept (true); extern long double __asinl (long double __x) noexcept (true);

 extern long double atanl (long double __x) noexcept (true); extern long double __atanl (long double __x) noexcept (true);

 extern long double atan2l (long double __y, long double __x) noexcept (true); extern long double __atan2l (long double __y, long double __x) noexcept (true);


 extern long double cosl (long double __x) noexcept (true); extern long double __cosl (long double __x) noexcept (true);

 extern long double sinl (long double __x) noexcept (true); extern long double __sinl (long double __x) noexcept (true);

 extern long double tanl (long double __x) noexcept (true); extern long double __tanl (long double __x) noexcept (true);




 extern long double coshl (long double __x) noexcept (true); extern long double __coshl (long double __x) noexcept (true);

 extern long double sinhl (long double __x) noexcept (true); extern long double __sinhl (long double __x) noexcept (true);

 extern long double tanhl (long double __x) noexcept (true); extern long double __tanhl (long double __x) noexcept (true);



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true);





 extern long double acoshl (long double __x) noexcept (true); extern long double __acoshl (long double __x) noexcept (true);

 extern long double asinhl (long double __x) noexcept (true); extern long double __asinhl (long double __x) noexcept (true);

 extern long double atanhl (long double __x) noexcept (true); extern long double __atanhl (long double __x) noexcept (true);





 extern long double expl (long double __x) noexcept (true); extern long double __expl (long double __x) noexcept (true);


extern long double frexpl (long double __x, int *__exponent) noexcept (true); extern long double __frexpl (long double __x, int *__exponent) noexcept (true);


extern long double ldexpl (long double __x, int __exponent) noexcept (true); extern long double __ldexpl (long double __x, int __exponent) noexcept (true);


 extern long double logl (long double __x) noexcept (true); extern long double __logl (long double __x) noexcept (true);


 extern long double log10l (long double __x) noexcept (true); extern long double __log10l (long double __x) noexcept (true);


extern long double modfl (long double __x, long double *__iptr) noexcept (true); extern long double __modfl (long double __x, long double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern long double exp10l (long double __x) noexcept (true); extern long double __exp10l (long double __x) noexcept (true);




 extern long double expm1l (long double __x) noexcept (true); extern long double __expm1l (long double __x) noexcept (true);


 extern long double log1pl (long double __x) noexcept (true); extern long double __log1pl (long double __x) noexcept (true);


extern long double logbl (long double __x) noexcept (true); extern long double __logbl (long double __x) noexcept (true);




 extern long double exp2l (long double __x) noexcept (true); extern long double __exp2l (long double __x) noexcept (true);


 extern long double log2l (long double __x) noexcept (true); extern long double __log2l (long double __x) noexcept (true);






 extern long double powl (long double __x, long double __y) noexcept (true); extern long double __powl (long double __x, long double __y) noexcept (true);


extern long double sqrtl (long double __x) noexcept (true); extern long double __sqrtl (long double __x) noexcept (true);



 extern long double hypotl (long double __x, long double __y) noexcept (true); extern long double __hypotl (long double __x, long double __y) noexcept (true);




 extern long double cbrtl (long double __x) noexcept (true); extern long double __cbrtl (long double __x) noexcept (true);






extern long double ceill (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __ceill (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fabsl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __fabsl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double floorl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __floorl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) noexcept (true); extern long double __fmodl (long double __x, long double __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) noexcept (true); extern long double __dreml (long double __x, long double __y) noexcept (true);



extern long double significandl (long double __x) noexcept (true); extern long double __significandl (long double __x) noexcept (true);






extern long double copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) noexcept (true); extern long double __nanl (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));





extern long double j0l (long double) noexcept (true); extern long double __j0l (long double) noexcept (true);
extern long double j1l (long double) noexcept (true); extern long double __j1l (long double) noexcept (true);
extern long double jnl (int, long double) noexcept (true); extern long double __jnl (int, long double) noexcept (true);
extern long double y0l (long double) noexcept (true); extern long double __y0l (long double) noexcept (true);
extern long double y1l (long double) noexcept (true); extern long double __y1l (long double) noexcept (true);
extern long double ynl (int, long double) noexcept (true); extern long double __ynl (int, long double) noexcept (true);





 extern long double erfl (long double) noexcept (true); extern long double __erfl (long double) noexcept (true);
 extern long double erfcl (long double) noexcept (true); extern long double __erfcl (long double) noexcept (true);
extern long double lgammal (long double) noexcept (true); extern long double __lgammal (long double) noexcept (true);




extern long double tgammal (long double) noexcept (true); extern long double __tgammal (long double) noexcept (true);





extern long double gammal (long double) noexcept (true); extern long double __gammal (long double) noexcept (true);







extern long double lgammal_r (long double, int *__signgamp) noexcept (true); extern long double __lgammal_r (long double, int *__signgamp) noexcept (true);






extern long double rintl (long double __x) noexcept (true); extern long double __rintl (long double __x) noexcept (true);


extern long double nextafterl (long double __x, long double __y) noexcept (true); extern long double __nextafterl (long double __x, long double __y) noexcept (true);

extern long double nexttowardl (long double __x, long double __y) noexcept (true); extern long double __nexttowardl (long double __x, long double __y) noexcept (true);




extern long double nextdownl (long double __x) noexcept (true); extern long double __nextdownl (long double __x) noexcept (true);

extern long double nextupl (long double __x) noexcept (true); extern long double __nextupl (long double __x) noexcept (true);



extern long double remainderl (long double __x, long double __y) noexcept (true); extern long double __remainderl (long double __x, long double __y) noexcept (true);



extern long double scalbnl (long double __x, int __n) noexcept (true); extern long double __scalbnl (long double __x, int __n) noexcept (true);



extern int ilogbl (long double __x) noexcept (true); extern int __ilogbl (long double __x) noexcept (true);




extern long int llogbl (long double __x) noexcept (true); extern long int __llogbl (long double __x) noexcept (true);




extern long double scalblnl (long double __x, long int __n) noexcept (true); extern long double __scalblnl (long double __x, long int __n) noexcept (true);



extern long double nearbyintl (long double __x) noexcept (true); extern long double __nearbyintl (long double __x) noexcept (true);



extern long double roundl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundl (long double __x) noexcept (true) __attribute__ ((__const__));



extern long double truncl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __truncl (long double __x) noexcept (true) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) noexcept (true); extern long double __remquol (long double __x, long double __y, int *__quo) noexcept (true);






extern long int lrintl (long double __x) noexcept (true); extern long int __lrintl (long double __x) noexcept (true);
__extension__
extern long long int llrintl (long double __x) noexcept (true); extern long long int __llrintl (long double __x) noexcept (true);



extern long int lroundl (long double __x) noexcept (true); extern long int __lroundl (long double __x) noexcept (true);
__extension__
extern long long int llroundl (long double __x) noexcept (true); extern long long int __llroundl (long double __x) noexcept (true);



extern long double fdiml (long double __x, long double __y) noexcept (true); extern long double __fdiml (long double __x, long double __y) noexcept (true);



extern long double fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) noexcept (true); extern long double __fmal (long double __x, long double __y, long double __z) noexcept (true);




extern long double roundevenl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizel (long double *__cx, const long double *__x) noexcept (true);






extern long double fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) noexcept (true); extern long double __getpayloadl (const long double *__x) noexcept (true);


extern int setpayloadl (long double *__x, long double __payload) noexcept (true);


extern int setpayloadsigl (long double *__x, long double __payload) noexcept (true);







extern long double scalbl (long double __x, long double __n) noexcept (true); extern long double __scalbl (long double __x, long double __n) noexcept (true);
# 400 "/usr/include/math.h" 2 3 4
# 450 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32 acosf32 (_Float32 __x) noexcept (true); extern _Float32 __acosf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinf32 (_Float32 __x) noexcept (true); extern _Float32 __asinf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanf32 (_Float32 __x) noexcept (true); extern _Float32 __atanf32 (_Float32 __x) noexcept (true);

 extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) noexcept (true);


 extern _Float32 cosf32 (_Float32 __x) noexcept (true); extern _Float32 __cosf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinf32 (_Float32 __x) noexcept (true); extern _Float32 __sinf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanf32 (_Float32 __x) noexcept (true); extern _Float32 __tanf32 (_Float32 __x) noexcept (true);




 extern _Float32 coshf32 (_Float32 __x) noexcept (true); extern _Float32 __coshf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinhf32 (_Float32 __x) noexcept (true); extern _Float32 __sinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanhf32 (_Float32 __x) noexcept (true); extern _Float32 __tanhf32 (_Float32 __x) noexcept (true);



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true);





 extern _Float32 acoshf32 (_Float32 __x) noexcept (true); extern _Float32 __acoshf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinhf32 (_Float32 __x) noexcept (true); extern _Float32 __asinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanhf32 (_Float32 __x) noexcept (true); extern _Float32 __atanhf32 (_Float32 __x) noexcept (true);





 extern _Float32 expf32 (_Float32 __x) noexcept (true); extern _Float32 __expf32 (_Float32 __x) noexcept (true);


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) noexcept (true); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) noexcept (true);


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) noexcept (true); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) noexcept (true);


 extern _Float32 logf32 (_Float32 __x) noexcept (true); extern _Float32 __logf32 (_Float32 __x) noexcept (true);


 extern _Float32 log10f32 (_Float32 __x) noexcept (true); extern _Float32 __log10f32 (_Float32 __x) noexcept (true);


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32 exp10f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10f32 (_Float32 __x) noexcept (true);




 extern _Float32 expm1f32 (_Float32 __x) noexcept (true); extern _Float32 __expm1f32 (_Float32 __x) noexcept (true);


 extern _Float32 log1pf32 (_Float32 __x) noexcept (true); extern _Float32 __log1pf32 (_Float32 __x) noexcept (true);


extern _Float32 logbf32 (_Float32 __x) noexcept (true); extern _Float32 __logbf32 (_Float32 __x) noexcept (true);




 extern _Float32 exp2f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2f32 (_Float32 __x) noexcept (true);


 extern _Float32 log2f32 (_Float32 __x) noexcept (true); extern _Float32 __log2f32 (_Float32 __x) noexcept (true);






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 sqrtf32 (_Float32 __x) noexcept (true); extern _Float32 __sqrtf32 (_Float32 __x) noexcept (true);



 extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) noexcept (true);




 extern _Float32 cbrtf32 (_Float32 __x) noexcept (true); extern _Float32 __cbrtf32 (_Float32 __x) noexcept (true);






extern _Float32 ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) noexcept (true); extern _Float32 __nanf32 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) noexcept (true); extern _Float32 __j0f32 (_Float32) noexcept (true);
extern _Float32 j1f32 (_Float32) noexcept (true); extern _Float32 __j1f32 (_Float32) noexcept (true);
extern _Float32 jnf32 (int, _Float32) noexcept (true); extern _Float32 __jnf32 (int, _Float32) noexcept (true);
extern _Float32 y0f32 (_Float32) noexcept (true); extern _Float32 __y0f32 (_Float32) noexcept (true);
extern _Float32 y1f32 (_Float32) noexcept (true); extern _Float32 __y1f32 (_Float32) noexcept (true);
extern _Float32 ynf32 (int, _Float32) noexcept (true); extern _Float32 __ynf32 (int, _Float32) noexcept (true);





 extern _Float32 erff32 (_Float32) noexcept (true); extern _Float32 __erff32 (_Float32) noexcept (true);
 extern _Float32 erfcf32 (_Float32) noexcept (true); extern _Float32 __erfcf32 (_Float32) noexcept (true);
extern _Float32 lgammaf32 (_Float32) noexcept (true); extern _Float32 __lgammaf32 (_Float32) noexcept (true);




extern _Float32 tgammaf32 (_Float32) noexcept (true); extern _Float32 __tgammaf32 (_Float32) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) noexcept (true); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) noexcept (true);






extern _Float32 rintf32 (_Float32 __x) noexcept (true); extern _Float32 __rintf32 (_Float32 __x) noexcept (true);


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true);






extern _Float32 nextdownf32 (_Float32 __x) noexcept (true); extern _Float32 __nextdownf32 (_Float32 __x) noexcept (true);

extern _Float32 nextupf32 (_Float32 __x) noexcept (true); extern _Float32 __nextupf32 (_Float32 __x) noexcept (true);



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 scalbnf32 (_Float32 __x, int __n) noexcept (true); extern _Float32 __scalbnf32 (_Float32 __x, int __n) noexcept (true);



extern int ilogbf32 (_Float32 __x) noexcept (true); extern int __ilogbf32 (_Float32 __x) noexcept (true);




extern long int llogbf32 (_Float32 __x) noexcept (true); extern long int __llogbf32 (_Float32 __x) noexcept (true);




extern _Float32 scalblnf32 (_Float32 __x, long int __n) noexcept (true); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) noexcept (true);



extern _Float32 nearbyintf32 (_Float32 __x) noexcept (true); extern _Float32 __nearbyintf32 (_Float32 __x) noexcept (true);



extern _Float32 roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true);






extern long int lrintf32 (_Float32 __x) noexcept (true); extern long int __lrintf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llrintf32 (_Float32 __x) noexcept (true); extern long long int __llrintf32 (_Float32 __x) noexcept (true);



extern long int lroundf32 (_Float32 __x) noexcept (true); extern long int __lroundf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llroundf32 (_Float32 __x) noexcept (true); extern long long int __llroundf32 (_Float32 __x) noexcept (true);



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));



extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true);




extern _Float32 roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) noexcept (true);






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) noexcept (true); extern _Float32 __getpayloadf32 (const _Float32 *__x) noexcept (true);


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) noexcept (true);


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) noexcept (true);
# 451 "/usr/include/math.h" 2 3 4
# 467 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64 acosf64 (_Float64 __x) noexcept (true); extern _Float64 __acosf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinf64 (_Float64 __x) noexcept (true); extern _Float64 __asinf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanf64 (_Float64 __x) noexcept (true); extern _Float64 __atanf64 (_Float64 __x) noexcept (true);

 extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) noexcept (true);


 extern _Float64 cosf64 (_Float64 __x) noexcept (true); extern _Float64 __cosf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinf64 (_Float64 __x) noexcept (true); extern _Float64 __sinf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanf64 (_Float64 __x) noexcept (true); extern _Float64 __tanf64 (_Float64 __x) noexcept (true);




 extern _Float64 coshf64 (_Float64 __x) noexcept (true); extern _Float64 __coshf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinhf64 (_Float64 __x) noexcept (true); extern _Float64 __sinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanhf64 (_Float64 __x) noexcept (true); extern _Float64 __tanhf64 (_Float64 __x) noexcept (true);



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true);





 extern _Float64 acoshf64 (_Float64 __x) noexcept (true); extern _Float64 __acoshf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinhf64 (_Float64 __x) noexcept (true); extern _Float64 __asinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanhf64 (_Float64 __x) noexcept (true); extern _Float64 __atanhf64 (_Float64 __x) noexcept (true);





 extern _Float64 expf64 (_Float64 __x) noexcept (true); extern _Float64 __expf64 (_Float64 __x) noexcept (true);


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) noexcept (true); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) noexcept (true);


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) noexcept (true); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) noexcept (true);


 extern _Float64 logf64 (_Float64 __x) noexcept (true); extern _Float64 __logf64 (_Float64 __x) noexcept (true);


 extern _Float64 log10f64 (_Float64 __x) noexcept (true); extern _Float64 __log10f64 (_Float64 __x) noexcept (true);


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64 exp10f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10f64 (_Float64 __x) noexcept (true);




 extern _Float64 expm1f64 (_Float64 __x) noexcept (true); extern _Float64 __expm1f64 (_Float64 __x) noexcept (true);


 extern _Float64 log1pf64 (_Float64 __x) noexcept (true); extern _Float64 __log1pf64 (_Float64 __x) noexcept (true);


extern _Float64 logbf64 (_Float64 __x) noexcept (true); extern _Float64 __logbf64 (_Float64 __x) noexcept (true);




 extern _Float64 exp2f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2f64 (_Float64 __x) noexcept (true);


 extern _Float64 log2f64 (_Float64 __x) noexcept (true); extern _Float64 __log2f64 (_Float64 __x) noexcept (true);






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 sqrtf64 (_Float64 __x) noexcept (true); extern _Float64 __sqrtf64 (_Float64 __x) noexcept (true);



 extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) noexcept (true);




 extern _Float64 cbrtf64 (_Float64 __x) noexcept (true); extern _Float64 __cbrtf64 (_Float64 __x) noexcept (true);






extern _Float64 ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) noexcept (true); extern _Float64 __nanf64 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) noexcept (true); extern _Float64 __j0f64 (_Float64) noexcept (true);
extern _Float64 j1f64 (_Float64) noexcept (true); extern _Float64 __j1f64 (_Float64) noexcept (true);
extern _Float64 jnf64 (int, _Float64) noexcept (true); extern _Float64 __jnf64 (int, _Float64) noexcept (true);
extern _Float64 y0f64 (_Float64) noexcept (true); extern _Float64 __y0f64 (_Float64) noexcept (true);
extern _Float64 y1f64 (_Float64) noexcept (true); extern _Float64 __y1f64 (_Float64) noexcept (true);
extern _Float64 ynf64 (int, _Float64) noexcept (true); extern _Float64 __ynf64 (int, _Float64) noexcept (true);





 extern _Float64 erff64 (_Float64) noexcept (true); extern _Float64 __erff64 (_Float64) noexcept (true);
 extern _Float64 erfcf64 (_Float64) noexcept (true); extern _Float64 __erfcf64 (_Float64) noexcept (true);
extern _Float64 lgammaf64 (_Float64) noexcept (true); extern _Float64 __lgammaf64 (_Float64) noexcept (true);




extern _Float64 tgammaf64 (_Float64) noexcept (true); extern _Float64 __tgammaf64 (_Float64) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) noexcept (true); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) noexcept (true);






extern _Float64 rintf64 (_Float64 __x) noexcept (true); extern _Float64 __rintf64 (_Float64 __x) noexcept (true);


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true);






extern _Float64 nextdownf64 (_Float64 __x) noexcept (true); extern _Float64 __nextdownf64 (_Float64 __x) noexcept (true);

extern _Float64 nextupf64 (_Float64 __x) noexcept (true); extern _Float64 __nextupf64 (_Float64 __x) noexcept (true);



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 scalbnf64 (_Float64 __x, int __n) noexcept (true); extern _Float64 __scalbnf64 (_Float64 __x, int __n) noexcept (true);



extern int ilogbf64 (_Float64 __x) noexcept (true); extern int __ilogbf64 (_Float64 __x) noexcept (true);




extern long int llogbf64 (_Float64 __x) noexcept (true); extern long int __llogbf64 (_Float64 __x) noexcept (true);




extern _Float64 scalblnf64 (_Float64 __x, long int __n) noexcept (true); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) noexcept (true);



extern _Float64 nearbyintf64 (_Float64 __x) noexcept (true); extern _Float64 __nearbyintf64 (_Float64 __x) noexcept (true);



extern _Float64 roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true);






extern long int lrintf64 (_Float64 __x) noexcept (true); extern long int __lrintf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llrintf64 (_Float64 __x) noexcept (true); extern long long int __llrintf64 (_Float64 __x) noexcept (true);



extern long int lroundf64 (_Float64 __x) noexcept (true); extern long int __lroundf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llroundf64 (_Float64 __x) noexcept (true); extern long long int __llroundf64 (_Float64 __x) noexcept (true);



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));



extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);




extern _Float64 roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) noexcept (true);






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) noexcept (true); extern _Float64 __getpayloadf64 (const _Float64 *__x) noexcept (true);


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) noexcept (true);


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) noexcept (true);
# 468 "/usr/include/math.h" 2 3 4
# 501 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32x acosf32x (_Float32x __x) noexcept (true); extern _Float32x __acosf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinf32x (_Float32x __x) noexcept (true); extern _Float32x __asinf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanf32x (_Float32x __x) noexcept (true); extern _Float32x __atanf32x (_Float32x __x) noexcept (true);

 extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) noexcept (true);


 extern _Float32x cosf32x (_Float32x __x) noexcept (true); extern _Float32x __cosf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinf32x (_Float32x __x) noexcept (true); extern _Float32x __sinf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanf32x (_Float32x __x) noexcept (true); extern _Float32x __tanf32x (_Float32x __x) noexcept (true);




 extern _Float32x coshf32x (_Float32x __x) noexcept (true); extern _Float32x __coshf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinhf32x (_Float32x __x) noexcept (true); extern _Float32x __sinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanhf32x (_Float32x __x) noexcept (true); extern _Float32x __tanhf32x (_Float32x __x) noexcept (true);



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true);





 extern _Float32x acoshf32x (_Float32x __x) noexcept (true); extern _Float32x __acoshf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinhf32x (_Float32x __x) noexcept (true); extern _Float32x __asinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanhf32x (_Float32x __x) noexcept (true); extern _Float32x __atanhf32x (_Float32x __x) noexcept (true);





 extern _Float32x expf32x (_Float32x __x) noexcept (true); extern _Float32x __expf32x (_Float32x __x) noexcept (true);


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) noexcept (true); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) noexcept (true);


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) noexcept (true); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) noexcept (true);


 extern _Float32x logf32x (_Float32x __x) noexcept (true); extern _Float32x __logf32x (_Float32x __x) noexcept (true);


 extern _Float32x log10f32x (_Float32x __x) noexcept (true); extern _Float32x __log10f32x (_Float32x __x) noexcept (true);


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32x exp10f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10f32x (_Float32x __x) noexcept (true);




 extern _Float32x expm1f32x (_Float32x __x) noexcept (true); extern _Float32x __expm1f32x (_Float32x __x) noexcept (true);


 extern _Float32x log1pf32x (_Float32x __x) noexcept (true); extern _Float32x __log1pf32x (_Float32x __x) noexcept (true);


extern _Float32x logbf32x (_Float32x __x) noexcept (true); extern _Float32x __logbf32x (_Float32x __x) noexcept (true);




 extern _Float32x exp2f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2f32x (_Float32x __x) noexcept (true);


 extern _Float32x log2f32x (_Float32x __x) noexcept (true); extern _Float32x __log2f32x (_Float32x __x) noexcept (true);






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x sqrtf32x (_Float32x __x) noexcept (true); extern _Float32x __sqrtf32x (_Float32x __x) noexcept (true);



 extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) noexcept (true);




 extern _Float32x cbrtf32x (_Float32x __x) noexcept (true); extern _Float32x __cbrtf32x (_Float32x __x) noexcept (true);






extern _Float32x ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) noexcept (true); extern _Float32x __nanf32x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) noexcept (true); extern _Float32x __j0f32x (_Float32x) noexcept (true);
extern _Float32x j1f32x (_Float32x) noexcept (true); extern _Float32x __j1f32x (_Float32x) noexcept (true);
extern _Float32x jnf32x (int, _Float32x) noexcept (true); extern _Float32x __jnf32x (int, _Float32x) noexcept (true);
extern _Float32x y0f32x (_Float32x) noexcept (true); extern _Float32x __y0f32x (_Float32x) noexcept (true);
extern _Float32x y1f32x (_Float32x) noexcept (true); extern _Float32x __y1f32x (_Float32x) noexcept (true);
extern _Float32x ynf32x (int, _Float32x) noexcept (true); extern _Float32x __ynf32x (int, _Float32x) noexcept (true);





 extern _Float32x erff32x (_Float32x) noexcept (true); extern _Float32x __erff32x (_Float32x) noexcept (true);
 extern _Float32x erfcf32x (_Float32x) noexcept (true); extern _Float32x __erfcf32x (_Float32x) noexcept (true);
extern _Float32x lgammaf32x (_Float32x) noexcept (true); extern _Float32x __lgammaf32x (_Float32x) noexcept (true);




extern _Float32x tgammaf32x (_Float32x) noexcept (true); extern _Float32x __tgammaf32x (_Float32x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true);






extern _Float32x rintf32x (_Float32x __x) noexcept (true); extern _Float32x __rintf32x (_Float32x __x) noexcept (true);


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true);






extern _Float32x nextdownf32x (_Float32x __x) noexcept (true); extern _Float32x __nextdownf32x (_Float32x __x) noexcept (true);

extern _Float32x nextupf32x (_Float32x __x) noexcept (true); extern _Float32x __nextupf32x (_Float32x __x) noexcept (true);



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x scalbnf32x (_Float32x __x, int __n) noexcept (true); extern _Float32x __scalbnf32x (_Float32x __x, int __n) noexcept (true);



extern int ilogbf32x (_Float32x __x) noexcept (true); extern int __ilogbf32x (_Float32x __x) noexcept (true);




extern long int llogbf32x (_Float32x __x) noexcept (true); extern long int __llogbf32x (_Float32x __x) noexcept (true);




extern _Float32x scalblnf32x (_Float32x __x, long int __n) noexcept (true); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) noexcept (true);



extern _Float32x nearbyintf32x (_Float32x __x) noexcept (true); extern _Float32x __nearbyintf32x (_Float32x __x) noexcept (true);



extern _Float32x roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true);






extern long int lrintf32x (_Float32x __x) noexcept (true); extern long int __lrintf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llrintf32x (_Float32x __x) noexcept (true); extern long long int __llrintf32x (_Float32x __x) noexcept (true);



extern long int lroundf32x (_Float32x __x) noexcept (true); extern long int __lroundf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llroundf32x (_Float32x __x) noexcept (true); extern long long int __llroundf32x (_Float32x __x) noexcept (true);



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));



extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);




extern _Float32x roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) noexcept (true);






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) noexcept (true); extern _Float32x __getpayloadf32x (const _Float32x *__x) noexcept (true);


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) noexcept (true);


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) noexcept (true);
# 502 "/usr/include/math.h" 2 3 4
# 518 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64x acosf64x (_Float64x __x) noexcept (true); extern _Float64x __acosf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinf64x (_Float64x __x) noexcept (true); extern _Float64x __asinf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanf64x (_Float64x __x) noexcept (true); extern _Float64x __atanf64x (_Float64x __x) noexcept (true);

 extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) noexcept (true);


 extern _Float64x cosf64x (_Float64x __x) noexcept (true); extern _Float64x __cosf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinf64x (_Float64x __x) noexcept (true); extern _Float64x __sinf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanf64x (_Float64x __x) noexcept (true); extern _Float64x __tanf64x (_Float64x __x) noexcept (true);




 extern _Float64x coshf64x (_Float64x __x) noexcept (true); extern _Float64x __coshf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinhf64x (_Float64x __x) noexcept (true); extern _Float64x __sinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanhf64x (_Float64x __x) noexcept (true); extern _Float64x __tanhf64x (_Float64x __x) noexcept (true);



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true);





 extern _Float64x acoshf64x (_Float64x __x) noexcept (true); extern _Float64x __acoshf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinhf64x (_Float64x __x) noexcept (true); extern _Float64x __asinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanhf64x (_Float64x __x) noexcept (true); extern _Float64x __atanhf64x (_Float64x __x) noexcept (true);





 extern _Float64x expf64x (_Float64x __x) noexcept (true); extern _Float64x __expf64x (_Float64x __x) noexcept (true);


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) noexcept (true); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) noexcept (true);


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) noexcept (true); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) noexcept (true);


 extern _Float64x logf64x (_Float64x __x) noexcept (true); extern _Float64x __logf64x (_Float64x __x) noexcept (true);


 extern _Float64x log10f64x (_Float64x __x) noexcept (true); extern _Float64x __log10f64x (_Float64x __x) noexcept (true);


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64x exp10f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10f64x (_Float64x __x) noexcept (true);




 extern _Float64x expm1f64x (_Float64x __x) noexcept (true); extern _Float64x __expm1f64x (_Float64x __x) noexcept (true);


 extern _Float64x log1pf64x (_Float64x __x) noexcept (true); extern _Float64x __log1pf64x (_Float64x __x) noexcept (true);


extern _Float64x logbf64x (_Float64x __x) noexcept (true); extern _Float64x __logbf64x (_Float64x __x) noexcept (true);




 extern _Float64x exp2f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2f64x (_Float64x __x) noexcept (true);


 extern _Float64x log2f64x (_Float64x __x) noexcept (true); extern _Float64x __log2f64x (_Float64x __x) noexcept (true);






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x sqrtf64x (_Float64x __x) noexcept (true); extern _Float64x __sqrtf64x (_Float64x __x) noexcept (true);



 extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) noexcept (true);




 extern _Float64x cbrtf64x (_Float64x __x) noexcept (true); extern _Float64x __cbrtf64x (_Float64x __x) noexcept (true);






extern _Float64x ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) noexcept (true); extern _Float64x __nanf64x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) noexcept (true); extern _Float64x __j0f64x (_Float64x) noexcept (true);
extern _Float64x j1f64x (_Float64x) noexcept (true); extern _Float64x __j1f64x (_Float64x) noexcept (true);
extern _Float64x jnf64x (int, _Float64x) noexcept (true); extern _Float64x __jnf64x (int, _Float64x) noexcept (true);
extern _Float64x y0f64x (_Float64x) noexcept (true); extern _Float64x __y0f64x (_Float64x) noexcept (true);
extern _Float64x y1f64x (_Float64x) noexcept (true); extern _Float64x __y1f64x (_Float64x) noexcept (true);
extern _Float64x ynf64x (int, _Float64x) noexcept (true); extern _Float64x __ynf64x (int, _Float64x) noexcept (true);





 extern _Float64x erff64x (_Float64x) noexcept (true); extern _Float64x __erff64x (_Float64x) noexcept (true);
 extern _Float64x erfcf64x (_Float64x) noexcept (true); extern _Float64x __erfcf64x (_Float64x) noexcept (true);
extern _Float64x lgammaf64x (_Float64x) noexcept (true); extern _Float64x __lgammaf64x (_Float64x) noexcept (true);




extern _Float64x tgammaf64x (_Float64x) noexcept (true); extern _Float64x __tgammaf64x (_Float64x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true);






extern _Float64x rintf64x (_Float64x __x) noexcept (true); extern _Float64x __rintf64x (_Float64x __x) noexcept (true);


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true);






extern _Float64x nextdownf64x (_Float64x __x) noexcept (true); extern _Float64x __nextdownf64x (_Float64x __x) noexcept (true);

extern _Float64x nextupf64x (_Float64x __x) noexcept (true); extern _Float64x __nextupf64x (_Float64x __x) noexcept (true);



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x scalbnf64x (_Float64x __x, int __n) noexcept (true); extern _Float64x __scalbnf64x (_Float64x __x, int __n) noexcept (true);



extern int ilogbf64x (_Float64x __x) noexcept (true); extern int __ilogbf64x (_Float64x __x) noexcept (true);




extern long int llogbf64x (_Float64x __x) noexcept (true); extern long int __llogbf64x (_Float64x __x) noexcept (true);




extern _Float64x scalblnf64x (_Float64x __x, long int __n) noexcept (true); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) noexcept (true);



extern _Float64x nearbyintf64x (_Float64x __x) noexcept (true); extern _Float64x __nearbyintf64x (_Float64x __x) noexcept (true);



extern _Float64x roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true);






extern long int lrintf64x (_Float64x __x) noexcept (true); extern long int __lrintf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llrintf64x (_Float64x __x) noexcept (true); extern long long int __llrintf64x (_Float64x __x) noexcept (true);



extern long int lroundf64x (_Float64x __x) noexcept (true); extern long int __lroundf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llroundf64x (_Float64x __x) noexcept (true); extern long long int __llroundf64x (_Float64x __x) noexcept (true);



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));



extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);




extern _Float64x roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) noexcept (true);






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) noexcept (true); extern _Float64x __getpayloadf64x (const _Float64x *__x) noexcept (true);


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) noexcept (true);


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) noexcept (true);
# 519 "/usr/include/math.h" 2 3 4
# 566 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) noexcept (true);


extern float fdiv (double __x, double __y) noexcept (true);


extern float ffma (double __x, double __y, double __z) noexcept (true);


extern float fmul (double __x, double __y) noexcept (true);


extern float fsqrt (double __x) noexcept (true);


extern float fsub (double __x, double __y) noexcept (true);
# 567 "/usr/include/math.h" 2 3 4
# 587 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) noexcept (true);


extern float fdivl (long double __x, long double __y) noexcept (true);


extern float ffmal (long double __x, long double __y, long double __z) noexcept (true);


extern float fmull (long double __x, long double __y) noexcept (true);


extern float fsqrtl (long double __x) noexcept (true);


extern float fsubl (long double __x, long double __y) noexcept (true);
# 588 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) noexcept (true);


extern double ddivl (long double __x, long double __y) noexcept (true);


extern double dfmal (long double __x, long double __y, long double __z) noexcept (true);


extern double dmull (long double __x, long double __y) noexcept (true);


extern double dsqrtl (long double __x) noexcept (true);


extern double dsubl (long double __x, long double __y) noexcept (true);
# 617 "/usr/include/math.h" 2 3 4
# 697 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32sqrtf32x (_Float32x __x) noexcept (true);


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 698 "/usr/include/math.h" 2 3 4
# 707 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32sqrtf64 (_Float64 __x) noexcept (true);


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 708 "/usr/include/math.h" 2 3 4
# 717 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32sqrtf64x (_Float64x __x) noexcept (true);


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 718 "/usr/include/math.h" 2 3 4
# 747 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xfmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xsqrtf64 (_Float64 __x) noexcept (true);


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 748 "/usr/include/math.h" 2 3 4
# 757 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xfmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xsqrtf64x (_Float64x __x) noexcept (true);


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 758 "/usr/include/math.h" 2 3 4
# 787 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64sqrtf64x (_Float64x __x) noexcept (true);


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 788 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1055 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     noexcept (true) __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 1056 "/usr/include/math.h" 2 3 4
# 1067 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1098 "/usr/include/math.h" 3 4
extern "C++" {
# 1129 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1364 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1455 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 1 3
# 34 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3




# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 62 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 159 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern long int strtol (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtol")


     __attribute__ ((__nonnull__ (1)));
extern unsigned long int strtoul (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoul")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoll (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));
# 278 "/usr/include/stdlib.h" 3 4
extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 298 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 316 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 338 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 339 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));





extern long int strtol_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtol_l")



     __attribute__ ((__nonnull__ (1, 4)));
extern unsigned long int strtoul_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoul_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern long long int strtoll_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoll_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoull_l")




     __attribute__ ((__nonnull__ (1, 4)));
# 415 "/usr/include/stdlib.h" 3 4
extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 436 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 457 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;





# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 515 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern __uint32_t arc4random (void)
     noexcept (true) ;


extern void arc4random_buf (void *__buf, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __uint32_t arc4random_uniform (__uint32_t __upper_bound)
     noexcept (true) ;




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) ;


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))

                       ;


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) ;




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 707 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
                                         ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 749 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 827 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 837 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 849 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 859 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 881 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 891 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 901 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 913 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 923 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
                              ;
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
                                      ;

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)

                                    ;






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1156 "/usr/include/stdlib.h" 2 3 4
# 1167 "/usr/include/stdlib.h" 3 4
}
# 39 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 2 3







extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 48 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 77 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
}





}
# 4 "CNN/src/dense.cpp" 2



void dense_layer_soft_max(hls::stream<float> dense_to_softmax_streams[4], float prediction[10])
{
  float sum;
  float exp_sum = 0.0;

  dense_soft_max_for_dense_size:
  for (int d = 0; d < 10; ++d)
  {
    sum = dense_biases[d];

    dense_soft_max_for_filters:
    for (int f = 0; f < 4; ++f)
    {
      sum += dense_to_softmax_streams[f].read();
    }

    exp_sum += prediction[d] = expf(sum);
  }

  dense_soft_max_for_digits:
  for (int p = 0; p < 10; ++p)
  {
    prediction[p] = prediction[p] / exp_sum;
  }
}

void dense (hls::stream<float> & flat_to_dense_stream, int filter, hls::stream<float> & dense_to_softmax_stream)
{
  float flat_value;
  float dense_array[10] = { 0 };

  dense_for_flat:
  for (int i = 0; i < (4 * (28 / 2) * (28 / 2)) / 4; ++i)
  {
    flat_value = flat_to_dense_stream.read();

    VITIS_LOOP_43_1: for (int d = 0; d < 10; ++d)
    {
      int index = filter * ((4 * (28 / 2) * (28 / 2)) / 4) + i;
        dense_array[d] += dense_weights[index][d] * flat_value;
    }
  }

  VITIS_LOOP_50_2: for (int j = 0; j < 10; ++j)
  {
    dense_to_softmax_stream.write(dense_array[j]);
  }
}

void dense_layer(hls::stream<float> flat_to_dense_streams[4], hls::stream<float> dense_to_softmax_streams[4])
{
  dense(flat_to_dense_streams[0], 0, dense_to_softmax_streams[0]);
  dense(flat_to_dense_streams[1], 1, dense_to_softmax_streams[1]);
  dense(flat_to_dense_streams[2], 2, dense_to_softmax_streams[2]);
  dense(flat_to_dense_streams[3], 3, dense_to_softmax_streams[3]);
}
