-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_max_pooling is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_to_pool_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_to_pool_streams_0_empty_n : IN STD_LOGIC;
    conv_to_pool_streams_0_read : OUT STD_LOGIC;
    pool_to_flat_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pool_to_flat_streams_0_full_n : IN STD_LOGIC;
    pool_to_flat_streams_0_write : OUT STD_LOGIC );
end;


architecture behav of cnn_max_pooling is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal icmp_ln9_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv_to_pool_streams_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal pool_to_flat_streams_0_blk_n : STD_LOGIC;
    signal reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln9_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_104_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln9_reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_1_fu_139_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_2_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_1_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_1_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_6_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_7_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_7_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_3_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_3_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_to_pool_streams_0_read_3_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_10_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_10_reg_442_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_11_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_11_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_11_reg_447_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal value_2_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_2_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_5_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_5_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_3_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_3_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_7_fu_355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_7_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten_fu_48 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal grp_fu_65_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_70_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_fu_115_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln22_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_65_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_1_fu_146_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln22_3_fu_161_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln22_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_174_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_2_fu_184_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_5_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_1_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_2_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_2_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_5_fu_228_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln22_1_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_246_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_4_fu_256_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_9_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_8_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_3_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_4_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_3_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_4_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln22_2_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_6_fu_317_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln22_13_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_12_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_5_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_6_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_5_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_6_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_65_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage2 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U400 : component cnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_65_p0,
        din1 => grp_fu_65_p1,
        ce => grp_fu_65_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_65_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten_fu_48 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_fu_48 <= add_ln9_reg_376;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln9_reg_376 <= add_ln9_fu_104_p2;
                icmp_ln22_10_reg_442_pp0_iter2_reg <= icmp_ln22_10_reg_442;
                icmp_ln22_11_reg_447 <= icmp_ln22_11_fu_232_p2;
                icmp_ln22_11_reg_447_pp0_iter2_reg <= icmp_ln22_11_reg_447;
                icmp_ln9_reg_372 <= icmp_ln9_fu_98_p2;
                icmp_ln9_reg_372_pp0_iter1_reg <= icmp_ln9_reg_372;
                pool_3_reg_430 <= pool_3_fu_222_p3;
                value_3_reg_465 <= value_3_fu_300_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_to_pool_streams_0_read_3_reg_437 <= conv_to_pool_streams_0_dout;
                icmp_ln22_10_reg_442 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln22_1_reg_392 <= icmp_ln22_1_fu_119_p2;
                pool_7_reg_471 <= pool_7_fu_355_p3;
                value_reg_381 <= value_fu_110_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln22_2_reg_404 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln22_3_reg_409 <= icmp_ln22_3_fu_150_p2;
                pool_1_reg_397 <= pool_1_fu_139_p3;
                value_2_reg_452 <= value_2_fu_238_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln22_6_reg_420 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln22_7_reg_425 <= icmp_ln22_7_fu_165_p2;
                pool_5_reg_458 <= pool_5_fu_294_p3;
                value_1_reg_414 <= value_1_fu_156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln22_reg_387 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_86 <= conv_to_pool_streams_0_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter1_stage2, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln9_fu_104_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    and_ln22_1_fu_210_p2 <= (or_ln22_2_fu_204_p2 and or_ln22_1_fu_188_p2);
    and_ln22_2_fu_216_p2 <= (grp_fu_65_p2 and and_ln22_1_fu_210_p2);
    and_ln22_3_fu_282_p2 <= (or_ln22_4_fu_276_p2 and or_ln22_3_fu_260_p2);
    and_ln22_4_fu_288_p2 <= (grp_fu_65_p2 and and_ln22_3_fu_282_p2);
    and_ln22_5_fu_343_p2 <= (or_ln22_6_fu_337_p2 and or_ln22_5_fu_321_p2);
    and_ln22_6_fu_349_p2 <= (grp_fu_65_p2 and and_ln22_5_fu_343_p2);
    and_ln22_fu_133_p2 <= (or_ln22_fu_129_p2 and grp_fu_65_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_00001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_00001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_00001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage2_iter0, ap_block_state11_pp0_stage2_iter2)
    begin
                ap_block_pp0_stage2_00001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage2_iter2)));
    end process;


    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage2_iter0, ap_block_state11_pp0_stage2_iter2)
    begin
                ap_block_pp0_stage2_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage2_iter2)));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage2_iter0, ap_block_state11_pp0_stage2_iter2)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage2_iter2)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage2_iter0, ap_block_state11_pp0_stage2_iter2)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage2_iter2)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_00001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_00001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_state11_pp0_stage2_iter2_assign_proc : process(pool_to_flat_streams_0_full_n)
    begin
                ap_block_state11_pp0_stage2_iter2 <= (pool_to_flat_streams_0_full_n = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(conv_to_pool_streams_0_empty_n, icmp_ln9_reg_372)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln9_reg_372 = ap_const_lv1_0) and (conv_to_pool_streams_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(conv_to_pool_streams_0_empty_n, icmp_ln9_reg_372)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((icmp_ln9_reg_372 = ap_const_lv1_0) and (conv_to_pool_streams_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(conv_to_pool_streams_0_empty_n, icmp_ln9_reg_372)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((icmp_ln9_reg_372 = ap_const_lv1_0) and (conv_to_pool_streams_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(conv_to_pool_streams_0_empty_n)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (conv_to_pool_streams_0_empty_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, icmp_ln9_reg_372, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln9_reg_372 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln9_reg_372_pp0_iter1_reg, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln9_reg_372_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_fu_48, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_48;
        end if; 
    end process;

    bitcast_ln22_1_fu_243_p1 <= pool_3_reg_430;
    bitcast_ln22_2_fu_304_p1 <= pool_5_reg_458;
    bitcast_ln22_fu_171_p1 <= pool_1_reg_397;

    conv_to_pool_streams_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_to_pool_streams_0_empty_n, icmp_ln9_reg_372, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_to_pool_streams_0_blk_n <= conv_to_pool_streams_0_empty_n;
        else 
            conv_to_pool_streams_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv_to_pool_streams_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, icmp_ln9_reg_372, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln9_reg_372 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            conv_to_pool_streams_0_read <= ap_const_logic_1;
        else 
            conv_to_pool_streams_0_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_65_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_65_ce <= ap_const_logic_1;
        else 
            grp_fu_65_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_65_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0, value_fu_110_p1, value_1_fu_156_p1, value_2_fu_238_p1, value_3_fu_300_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_65_p0 <= value_3_fu_300_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_65_p0 <= value_2_fu_238_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_65_p0 <= value_1_fu_156_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_65_p0 <= value_fu_110_p1;
        else 
            grp_fu_65_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_65_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0, pool_1_reg_397, pool_3_reg_430, pool_5_reg_458)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_65_p1 <= pool_5_reg_458;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_65_p1 <= pool_3_reg_430;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_65_p1 <= pool_1_reg_397;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_65_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_65_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_70_p4 <= conv_to_pool_streams_0_dout(30 downto 23);
    grp_fu_80_p2 <= "0" when (grp_fu_70_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_11_fu_232_p2 <= "1" when (trunc_ln22_5_fu_228_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_12_fu_325_p2 <= "0" when (tmp_9_fu_307_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_13_fu_331_p2 <= "1" when (trunc_ln22_6_fu_317_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_1_fu_119_p2 <= "1" when (trunc_ln22_fu_115_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_3_fu_150_p2 <= "1" when (trunc_ln22_1_fu_146_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_4_fu_192_p2 <= "0" when (tmp_3_fu_174_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_5_fu_198_p2 <= "1" when (trunc_ln22_2_fu_184_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_7_fu_165_p2 <= "1" when (trunc_ln22_3_fu_161_p1 = ap_const_lv23_0) else "0";
    icmp_ln22_8_fu_264_p2 <= "0" when (tmp_6_fu_246_p4 = ap_const_lv8_FF) else "1";
    icmp_ln22_9_fu_270_p2 <= "1" when (trunc_ln22_4_fu_256_p1 = ap_const_lv23_0) else "0";
    icmp_ln9_fu_98_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_C4) else "0";
    or_ln22_1_fu_188_p2 <= (icmp_ln22_3_reg_409 or icmp_ln22_2_reg_404);
    or_ln22_2_fu_204_p2 <= (icmp_ln22_5_fu_198_p2 or icmp_ln22_4_fu_192_p2);
    or_ln22_3_fu_260_p2 <= (icmp_ln22_7_reg_425 or icmp_ln22_6_reg_420);
    or_ln22_4_fu_276_p2 <= (icmp_ln22_9_fu_270_p2 or icmp_ln22_8_fu_264_p2);
    or_ln22_5_fu_321_p2 <= (icmp_ln22_11_reg_447_pp0_iter2_reg or icmp_ln22_10_reg_442_pp0_iter2_reg);
    or_ln22_6_fu_337_p2 <= (icmp_ln22_13_fu_331_p2 or icmp_ln22_12_fu_325_p2);
    or_ln22_fu_129_p2 <= (icmp_ln22_reg_387 or icmp_ln22_1_reg_392);
    pool_1_fu_139_p3 <= 
        value_reg_381 when (and_ln22_fu_133_p2(0) = '1') else 
        ap_const_lv32_800000;
    pool_3_fu_222_p3 <= 
        value_1_reg_414 when (and_ln22_2_fu_216_p2(0) = '1') else 
        pool_1_reg_397;
    pool_5_fu_294_p3 <= 
        value_2_reg_452 when (and_ln22_4_fu_288_p2(0) = '1') else 
        pool_3_reg_430;
    pool_7_fu_355_p3 <= 
        value_3_reg_465 when (and_ln22_6_fu_349_p2(0) = '1') else 
        pool_5_reg_458;

    pool_to_flat_streams_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, pool_to_flat_streams_0_full_n, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            pool_to_flat_streams_0_blk_n <= pool_to_flat_streams_0_full_n;
        else 
            pool_to_flat_streams_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pool_to_flat_streams_0_din <= pool_7_reg_471;

    pool_to_flat_streams_0_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            pool_to_flat_streams_0_write <= ap_const_logic_1;
        else 
            pool_to_flat_streams_0_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_174_p4 <= bitcast_ln22_fu_171_p1(30 downto 23);
    tmp_6_fu_246_p4 <= bitcast_ln22_1_fu_243_p1(30 downto 23);
    tmp_9_fu_307_p4 <= bitcast_ln22_2_fu_304_p1(30 downto 23);
    trunc_ln22_1_fu_146_p1 <= conv_to_pool_streams_0_dout(23 - 1 downto 0);
    trunc_ln22_2_fu_184_p1 <= bitcast_ln22_fu_171_p1(23 - 1 downto 0);
    trunc_ln22_3_fu_161_p1 <= conv_to_pool_streams_0_dout(23 - 1 downto 0);
    trunc_ln22_4_fu_256_p1 <= bitcast_ln22_1_fu_243_p1(23 - 1 downto 0);
    trunc_ln22_5_fu_228_p1 <= conv_to_pool_streams_0_dout(23 - 1 downto 0);
    trunc_ln22_6_fu_317_p1 <= bitcast_ln22_2_fu_304_p1(23 - 1 downto 0);
    trunc_ln22_fu_115_p1 <= conv_to_pool_streams_0_dout(23 - 1 downto 0);
    value_1_fu_156_p1 <= reg_86;
    value_2_fu_238_p1 <= reg_86;
    value_3_fu_300_p1 <= conv_to_pool_streams_0_read_3_reg_437;
    value_fu_110_p1 <= conv_to_pool_streams_0_dout;
end behav;
