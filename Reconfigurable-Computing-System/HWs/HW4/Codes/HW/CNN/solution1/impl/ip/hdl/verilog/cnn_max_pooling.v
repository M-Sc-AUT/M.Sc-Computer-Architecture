// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_max_pooling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_to_pool_streams_0_dout,
        conv_to_pool_streams_0_empty_n,
        conv_to_pool_streams_0_read,
        pool_to_flat_streams_0_din,
        pool_to_flat_streams_0_full_n,
        pool_to_flat_streams_0_write
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] conv_to_pool_streams_0_dout;
input   conv_to_pool_streams_0_empty_n;
output   conv_to_pool_streams_0_read;
output  [31:0] pool_to_flat_streams_0_din;
input   pool_to_flat_streams_0_full_n;
output   pool_to_flat_streams_0_write;

reg ap_idle;
reg conv_to_pool_streams_0_read;
reg pool_to_flat_streams_0_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg   [0:0] icmp_ln9_reg_372;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv_to_pool_streams_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg    pool_to_flat_streams_0_blk_n;
reg   [31:0] reg_86;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state11_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln9_fu_98_p2;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln9_reg_372_pp0_iter1_reg;
wire   [7:0] add_ln9_fu_104_p2;
reg   [7:0] add_ln9_reg_376;
wire   [31:0] value_fu_110_p1;
reg   [31:0] value_reg_381;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] grp_fu_80_p2;
reg   [0:0] icmp_ln22_reg_387;
wire   [0:0] icmp_ln22_1_fu_119_p2;
reg   [0:0] icmp_ln22_1_reg_392;
wire   [31:0] pool_1_fu_139_p3;
reg   [31:0] pool_1_reg_397;
reg   [0:0] icmp_ln22_2_reg_404;
wire   [0:0] icmp_ln22_3_fu_150_p2;
reg   [0:0] icmp_ln22_3_reg_409;
wire   [31:0] value_1_fu_156_p1;
reg   [31:0] value_1_reg_414;
reg   [0:0] icmp_ln22_6_reg_420;
wire   [0:0] icmp_ln22_7_fu_165_p2;
reg   [0:0] icmp_ln22_7_reg_425;
wire   [31:0] pool_3_fu_222_p3;
reg   [31:0] pool_3_reg_430;
reg   [31:0] conv_to_pool_streams_0_read_3_reg_437;
reg   [0:0] icmp_ln22_10_reg_442;
reg   [0:0] icmp_ln22_10_reg_442_pp0_iter2_reg;
wire   [0:0] icmp_ln22_11_fu_232_p2;
reg   [0:0] icmp_ln22_11_reg_447;
reg   [0:0] icmp_ln22_11_reg_447_pp0_iter2_reg;
wire   [31:0] value_2_fu_238_p1;
reg   [31:0] value_2_reg_452;
wire   [31:0] pool_5_fu_294_p3;
reg   [31:0] pool_5_reg_458;
wire   [31:0] value_3_fu_300_p1;
reg   [31:0] value_3_reg_465;
wire   [31:0] pool_7_fu_355_p3;
reg   [31:0] pool_7_reg_471;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
reg   [7:0] indvar_flatten_fu_48;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage2_01001;
reg   [31:0] grp_fu_65_p0;
reg   [31:0] grp_fu_65_p1;
wire   [7:0] grp_fu_70_p4;
wire   [22:0] trunc_ln22_fu_115_p1;
wire   [0:0] or_ln22_fu_129_p2;
wire   [0:0] grp_fu_65_p2;
wire   [0:0] and_ln22_fu_133_p2;
wire   [22:0] trunc_ln22_1_fu_146_p1;
wire   [22:0] trunc_ln22_3_fu_161_p1;
wire   [31:0] bitcast_ln22_fu_171_p1;
wire   [7:0] tmp_3_fu_174_p4;
wire   [22:0] trunc_ln22_2_fu_184_p1;
wire   [0:0] icmp_ln22_5_fu_198_p2;
wire   [0:0] icmp_ln22_4_fu_192_p2;
wire   [0:0] or_ln22_1_fu_188_p2;
wire   [0:0] or_ln22_2_fu_204_p2;
wire   [0:0] and_ln22_1_fu_210_p2;
wire   [0:0] and_ln22_2_fu_216_p2;
wire   [22:0] trunc_ln22_5_fu_228_p1;
wire   [31:0] bitcast_ln22_1_fu_243_p1;
wire   [7:0] tmp_6_fu_246_p4;
wire   [22:0] trunc_ln22_4_fu_256_p1;
wire   [0:0] icmp_ln22_9_fu_270_p2;
wire   [0:0] icmp_ln22_8_fu_264_p2;
wire   [0:0] or_ln22_3_fu_260_p2;
wire   [0:0] or_ln22_4_fu_276_p2;
wire   [0:0] and_ln22_3_fu_282_p2;
wire   [0:0] and_ln22_4_fu_288_p2;
wire   [31:0] bitcast_ln22_2_fu_304_p1;
wire   [7:0] tmp_9_fu_307_p4;
wire   [22:0] trunc_ln22_6_fu_317_p1;
wire   [0:0] icmp_ln22_13_fu_331_p2;
wire   [0:0] icmp_ln22_12_fu_325_p2;
wire   [0:0] or_ln22_5_fu_321_p2;
wire   [0:0] or_ln22_6_fu_337_p2;
wire   [0:0] and_ln22_5_fu_343_p2;
wire   [0:0] and_ln22_6_fu_349_p2;
reg    grp_fu_65_ce;
reg    ap_block_pp0_stage1_00001;
reg    ap_block_pp0_stage3_00001;
reg    ap_block_pp0_stage2_00001;
reg    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 indvar_flatten_fu_48 = 8'd0;
#0 ap_done_reg = 1'b0;
end

cnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U400(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_65_p0),
    .din1(grp_fu_65_p1),
    .ce(grp_fu_65_ce),
    .opcode(5'd2),
    .dout(grp_fu_65_p2)
);

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_48 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_fu_48 <= add_ln9_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln9_reg_376 <= add_ln9_fu_104_p2;
        icmp_ln22_10_reg_442_pp0_iter2_reg <= icmp_ln22_10_reg_442;
        icmp_ln22_11_reg_447 <= icmp_ln22_11_fu_232_p2;
        icmp_ln22_11_reg_447_pp0_iter2_reg <= icmp_ln22_11_reg_447;
        icmp_ln9_reg_372 <= icmp_ln9_fu_98_p2;
        icmp_ln9_reg_372_pp0_iter1_reg <= icmp_ln9_reg_372;
        pool_3_reg_430 <= pool_3_fu_222_p3;
        value_3_reg_465 <= value_3_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_to_pool_streams_0_read_3_reg_437 <= conv_to_pool_streams_0_dout;
        icmp_ln22_10_reg_442 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln22_1_reg_392 <= icmp_ln22_1_fu_119_p2;
        pool_7_reg_471 <= pool_7_fu_355_p3;
        value_reg_381 <= value_fu_110_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln22_2_reg_404 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln22_3_reg_409 <= icmp_ln22_3_fu_150_p2;
        pool_1_reg_397 <= pool_1_fu_139_p3;
        value_2_reg_452 <= value_2_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln22_6_reg_420 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln22_7_reg_425 <= icmp_ln22_7_fu_165_p2;
        pool_5_reg_458 <= pool_5_fu_294_p3;
        value_1_reg_414 <= value_1_fu_156_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln22_reg_387 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_86 <= conv_to_pool_streams_0_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln9_reg_372 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln9_reg_372_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_48;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_to_pool_streams_0_blk_n = conv_to_pool_streams_0_empty_n;
    end else begin
        conv_to_pool_streams_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln9_reg_372 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        conv_to_pool_streams_0_read = 1'b1;
    end else begin
        conv_to_pool_streams_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_65_ce = 1'b1;
    end else begin
        grp_fu_65_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_65_p0 = value_3_fu_300_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_65_p0 = value_2_fu_238_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_65_p0 = value_1_fu_156_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_65_p0 = value_fu_110_p1;
    end else begin
        grp_fu_65_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_65_p1 = pool_5_reg_458;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_65_p1 = pool_3_reg_430;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_65_p1 = pool_1_reg_397;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_65_p1 = 32'd8388608;
    end else begin
        grp_fu_65_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pool_to_flat_streams_0_blk_n = pool_to_flat_streams_0_full_n;
    end else begin
        pool_to_flat_streams_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pool_to_flat_streams_0_write = 1'b1;
    end else begin
        pool_to_flat_streams_0_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln9_fu_104_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln22_1_fu_210_p2 = (or_ln22_2_fu_204_p2 & or_ln22_1_fu_188_p2);

assign and_ln22_2_fu_216_p2 = (grp_fu_65_p2 & and_ln22_1_fu_210_p2);

assign and_ln22_3_fu_282_p2 = (or_ln22_4_fu_276_p2 & or_ln22_3_fu_260_p2);

assign and_ln22_4_fu_288_p2 = (grp_fu_65_p2 & and_ln22_3_fu_282_p2);

assign and_ln22_5_fu_343_p2 = (or_ln22_6_fu_337_p2 & or_ln22_5_fu_321_p2);

assign and_ln22_6_fu_349_p2 = (grp_fu_65_p2 & and_ln22_5_fu_343_p2);

assign and_ln22_fu_133_p2 = (or_ln22_fu_129_p2 & grp_fu_65_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage2_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage2_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage2_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage2_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage2_iter2)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_00001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0));
end

always @ (*) begin
    ap_block_state11_pp0_stage2_iter2 = (pool_to_flat_streams_0_full_n == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln9_reg_372 == 1'd0) & (conv_to_pool_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln9_reg_372 == 1'd0) & (conv_to_pool_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln9_reg_372 == 1'd0) & (conv_to_pool_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (conv_to_pool_streams_0_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln22_1_fu_243_p1 = pool_3_reg_430;

assign bitcast_ln22_2_fu_304_p1 = pool_5_reg_458;

assign bitcast_ln22_fu_171_p1 = pool_1_reg_397;

assign grp_fu_70_p4 = {{conv_to_pool_streams_0_dout[30:23]}};

assign grp_fu_80_p2 = ((grp_fu_70_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_11_fu_232_p2 = ((trunc_ln22_5_fu_228_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_12_fu_325_p2 = ((tmp_9_fu_307_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_13_fu_331_p2 = ((trunc_ln22_6_fu_317_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_119_p2 = ((trunc_ln22_fu_115_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_150_p2 = ((trunc_ln22_1_fu_146_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_4_fu_192_p2 = ((tmp_3_fu_174_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_5_fu_198_p2 = ((trunc_ln22_2_fu_184_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_7_fu_165_p2 = ((trunc_ln22_3_fu_161_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_8_fu_264_p2 = ((tmp_6_fu_246_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_9_fu_270_p2 = ((trunc_ln22_4_fu_256_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_98_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign or_ln22_1_fu_188_p2 = (icmp_ln22_3_reg_409 | icmp_ln22_2_reg_404);

assign or_ln22_2_fu_204_p2 = (icmp_ln22_5_fu_198_p2 | icmp_ln22_4_fu_192_p2);

assign or_ln22_3_fu_260_p2 = (icmp_ln22_7_reg_425 | icmp_ln22_6_reg_420);

assign or_ln22_4_fu_276_p2 = (icmp_ln22_9_fu_270_p2 | icmp_ln22_8_fu_264_p2);

assign or_ln22_5_fu_321_p2 = (icmp_ln22_11_reg_447_pp0_iter2_reg | icmp_ln22_10_reg_442_pp0_iter2_reg);

assign or_ln22_6_fu_337_p2 = (icmp_ln22_13_fu_331_p2 | icmp_ln22_12_fu_325_p2);

assign or_ln22_fu_129_p2 = (icmp_ln22_reg_387 | icmp_ln22_1_reg_392);

assign pool_1_fu_139_p3 = ((and_ln22_fu_133_p2[0:0] == 1'b1) ? value_reg_381 : 32'd8388608);

assign pool_3_fu_222_p3 = ((and_ln22_2_fu_216_p2[0:0] == 1'b1) ? value_1_reg_414 : pool_1_reg_397);

assign pool_5_fu_294_p3 = ((and_ln22_4_fu_288_p2[0:0] == 1'b1) ? value_2_reg_452 : pool_3_reg_430);

assign pool_7_fu_355_p3 = ((and_ln22_6_fu_349_p2[0:0] == 1'b1) ? value_3_reg_465 : pool_5_reg_458);

assign pool_to_flat_streams_0_din = pool_7_reg_471;

assign tmp_3_fu_174_p4 = {{bitcast_ln22_fu_171_p1[30:23]}};

assign tmp_6_fu_246_p4 = {{bitcast_ln22_1_fu_243_p1[30:23]}};

assign tmp_9_fu_307_p4 = {{bitcast_ln22_2_fu_304_p1[30:23]}};

assign trunc_ln22_1_fu_146_p1 = conv_to_pool_streams_0_dout[22:0];

assign trunc_ln22_2_fu_184_p1 = bitcast_ln22_fu_171_p1[22:0];

assign trunc_ln22_3_fu_161_p1 = conv_to_pool_streams_0_dout[22:0];

assign trunc_ln22_4_fu_256_p1 = bitcast_ln22_1_fu_243_p1[22:0];

assign trunc_ln22_5_fu_228_p1 = conv_to_pool_streams_0_dout[22:0];

assign trunc_ln22_6_fu_317_p1 = bitcast_ln22_2_fu_304_p1[22:0];

assign trunc_ln22_fu_115_p1 = conv_to_pool_streams_0_dout[22:0];

assign value_1_fu_156_p1 = reg_86;

assign value_2_fu_238_p1 = reg_86;

assign value_3_fu_300_p1 = conv_to_pool_streams_0_read_3_reg_437;

assign value_fu_110_p1 = conv_to_pool_streams_0_dout;

endmodule //cnn_max_pooling
