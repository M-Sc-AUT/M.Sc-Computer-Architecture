// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_dataflow_section_Pipeline_dense_soft_max_for_dense_size (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_to_softmax_streams_dout,
        dense_to_softmax_streams_empty_n,
        dense_to_softmax_streams_read,
        dense_to_softmax_streams_1_dout,
        dense_to_softmax_streams_1_empty_n,
        dense_to_softmax_streams_1_read,
        dense_to_softmax_streams_2_dout,
        dense_to_softmax_streams_2_empty_n,
        dense_to_softmax_streams_2_read,
        dense_to_softmax_streams_3_dout,
        dense_to_softmax_streams_3_empty_n,
        dense_to_softmax_streams_3_read,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        exp_sum_out,
        exp_sum_out_ap_vld,
        grp_fu_684_p_din0,
        grp_fu_684_p_din1,
        grp_fu_684_p_opcode,
        grp_fu_684_p_dout0,
        grp_fu_684_p_ce,
        grp_fu_688_p_din0,
        grp_fu_688_p_din1,
        grp_fu_688_p_opcode,
        grp_fu_688_p_dout0,
        grp_fu_688_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] dense_to_softmax_streams_dout;
input   dense_to_softmax_streams_empty_n;
output   dense_to_softmax_streams_read;
input  [31:0] dense_to_softmax_streams_1_dout;
input   dense_to_softmax_streams_1_empty_n;
output   dense_to_softmax_streams_1_read;
input  [31:0] dense_to_softmax_streams_2_dout;
input   dense_to_softmax_streams_2_empty_n;
output   dense_to_softmax_streams_2_read;
input  [31:0] dense_to_softmax_streams_3_dout;
input   dense_to_softmax_streams_3_empty_n;
output   dense_to_softmax_streams_3_read;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [31:0] exp_sum_out;
output   exp_sum_out_ap_vld;
output  [31:0] grp_fu_684_p_din0;
output  [31:0] grp_fu_684_p_din1;
output  [1:0] grp_fu_684_p_opcode;
input  [31:0] grp_fu_684_p_dout0;
output   grp_fu_684_p_ce;
output  [31:0] grp_fu_688_p_din0;
output  [31:0] grp_fu_688_p_din1;
output  [1:0] grp_fu_688_p_opcode;
input  [31:0] grp_fu_688_p_dout0;
output   grp_fu_688_p_ce;

reg ap_idle;
reg dense_to_softmax_streams_read;
reg dense_to_softmax_streams_1_read;
reg dense_to_softmax_streams_2_read;
reg dense_to_softmax_streams_3_read;
reg prediction_ce0;
reg prediction_we0;
reg exp_sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln13_reg_214;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] dense_biases_address0;
reg    dense_biases_ce0;
wire   [31:0] dense_biases_q0;
reg    dense_to_softmax_streams_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    dense_to_softmax_streams_1_blk_n;
reg    dense_to_softmax_streams_2_blk_n;
reg    dense_to_softmax_streams_3_blk_n;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln13_fu_145_p2;
reg   [0:0] icmp_ln13_reg_214_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_214_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_214_pp0_iter3_reg;
reg   [0:0] icmp_ln13_reg_214_pp0_iter4_reg;
reg   [0:0] icmp_ln13_reg_214_pp0_iter5_reg;
reg   [0:0] icmp_ln13_reg_214_pp0_iter6_reg;
wire   [63:0] zext_ln13_fu_157_p1;
reg   [63:0] zext_ln13_reg_218;
reg   [63:0] zext_ln13_reg_218_pp0_iter1_reg;
reg   [63:0] zext_ln13_reg_218_pp0_iter2_reg;
reg   [63:0] zext_ln13_reg_218_pp0_iter3_reg;
reg   [63:0] zext_ln13_reg_218_pp0_iter4_reg;
reg   [63:0] zext_ln13_reg_218_pp0_iter5_reg;
reg   [63:0] zext_ln13_reg_218_pp0_iter6_reg;
reg   [31:0] sum_reg_228;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] dense_to_softmax_streams_read_reg_233;
reg   [31:0] dense_to_softmax_streams_1_read_reg_238;
reg   [31:0] dense_to_softmax_streams_1_read_reg_238_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_2_read_reg_243;
reg   [31:0] dense_to_softmax_streams_2_read_reg_243_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_2_read_reg_243_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_3_read_reg_248;
reg   [31:0] dense_to_softmax_streams_3_read_reg_248_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_3_read_reg_248_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_3_read_reg_248_pp0_iter3_reg;
wire   [31:0] bitcast_ln20_fu_167_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] sum_1_reg_258;
wire   [31:0] bitcast_ln20_1_fu_171_p1;
reg   [31:0] sum_2_reg_268;
wire   [31:0] bitcast_ln20_2_fu_175_p1;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] sum_3_reg_278;
wire   [31:0] bitcast_ln20_3_fu_179_p1;
reg   [31:0] sum_4_reg_288;
wire   [31:0] grp_fu_127_p2;
reg   [31:0] tmp_reg_293;
reg   [31:0] exp_sum_1_reg_304;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage3;
reg   [31:0] exp_sum_fu_54;
reg   [31:0] ap_sig_allocacmp_exp_sum_load;
wire    ap_loop_init;
reg   [3:0] d_fu_58;
wire   [3:0] add_ln13_fu_151_p2;
reg   [3:0] ap_sig_allocacmp_d_1;
wire    ap_block_pp0_stage0_01001;
reg   [31:0] grp_fu_119_p0;
reg   [31:0] grp_fu_119_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_123_p0;
reg   [31:0] grp_fu_123_p1;
reg    grp_fu_119_ce;
reg    grp_fu_123_ce;
reg    grp_fu_127_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter7_stage0;
reg    ap_idle_pp0_0to6;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to8;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 exp_sum_fu_54 = 32'd0;
#0 d_fu_58 = 4'd0;
#0 ap_done_reg = 1'b0;
end

cnn_dataflow_section_Pipeline_dense_soft_max_for_dense_size_dense_biases_ROM_AUTObkb #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_biases_address0),
    .ce0(dense_biases_ce0),
    .q0(dense_biases_q0)
);

cnn_fexp_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_8_full_dsp_1_U437(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(sum_4_reg_288),
    .ce(grp_fu_127_ce),
    .dout(grp_fu_127_p2)
);

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_145_p2 == 1'd0))) begin
            d_fu_58 <= add_ln13_fu_151_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            d_fu_58 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            exp_sum_fu_54 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            exp_sum_fu_54 <= exp_sum_1_reg_304;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_1_read_reg_238 <= dense_to_softmax_streams_1_dout;
        dense_to_softmax_streams_1_read_reg_238_pp0_iter1_reg <= dense_to_softmax_streams_1_read_reg_238;
        dense_to_softmax_streams_2_read_reg_243 <= dense_to_softmax_streams_2_dout;
        dense_to_softmax_streams_2_read_reg_243_pp0_iter1_reg <= dense_to_softmax_streams_2_read_reg_243;
        dense_to_softmax_streams_2_read_reg_243_pp0_iter2_reg <= dense_to_softmax_streams_2_read_reg_243_pp0_iter1_reg;
        dense_to_softmax_streams_3_read_reg_248 <= dense_to_softmax_streams_3_dout;
        dense_to_softmax_streams_3_read_reg_248_pp0_iter1_reg <= dense_to_softmax_streams_3_read_reg_248;
        dense_to_softmax_streams_3_read_reg_248_pp0_iter2_reg <= dense_to_softmax_streams_3_read_reg_248_pp0_iter1_reg;
        dense_to_softmax_streams_3_read_reg_248_pp0_iter3_reg <= dense_to_softmax_streams_3_read_reg_248_pp0_iter2_reg;
        dense_to_softmax_streams_read_reg_233 <= dense_to_softmax_streams_dout;
        sum_reg_228 <= dense_biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_sum_1_reg_304 <= grp_fu_684_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_214 <= icmp_ln13_fu_145_p2;
        icmp_ln13_reg_214_pp0_iter1_reg <= icmp_ln13_reg_214;
        icmp_ln13_reg_214_pp0_iter2_reg <= icmp_ln13_reg_214_pp0_iter1_reg;
        icmp_ln13_reg_214_pp0_iter3_reg <= icmp_ln13_reg_214_pp0_iter2_reg;
        icmp_ln13_reg_214_pp0_iter4_reg <= icmp_ln13_reg_214_pp0_iter3_reg;
        icmp_ln13_reg_214_pp0_iter5_reg <= icmp_ln13_reg_214_pp0_iter4_reg;
        icmp_ln13_reg_214_pp0_iter6_reg <= icmp_ln13_reg_214_pp0_iter5_reg;
        zext_ln13_reg_218[3 : 0] <= zext_ln13_fu_157_p1[3 : 0];
        zext_ln13_reg_218_pp0_iter1_reg[3 : 0] <= zext_ln13_reg_218[3 : 0];
        zext_ln13_reg_218_pp0_iter2_reg[3 : 0] <= zext_ln13_reg_218_pp0_iter1_reg[3 : 0];
        zext_ln13_reg_218_pp0_iter3_reg[3 : 0] <= zext_ln13_reg_218_pp0_iter2_reg[3 : 0];
        zext_ln13_reg_218_pp0_iter4_reg[3 : 0] <= zext_ln13_reg_218_pp0_iter3_reg[3 : 0];
        zext_ln13_reg_218_pp0_iter5_reg[3 : 0] <= zext_ln13_reg_218_pp0_iter4_reg[3 : 0];
        zext_ln13_reg_218_pp0_iter6_reg[3 : 0] <= zext_ln13_reg_218_pp0_iter5_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_1_reg_258 <= grp_fu_684_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_2_reg_268 <= grp_fu_688_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_3_reg_278 <= grp_fu_684_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_4_reg_288 <= grp_fu_688_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_reg_293 <= grp_fu_127_p2;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_214_pp0_iter6_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter7_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter7_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to8 = 1'b1;
    end else begin
        ap_idle_pp0_1to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_d_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_d_1 = d_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_exp_sum_load = exp_sum_1_reg_304;
    end else begin
        ap_sig_allocacmp_exp_sum_load = exp_sum_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_biases_ce0 = 1'b1;
    end else begin
        dense_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_1_blk_n = dense_to_softmax_streams_1_empty_n;
    end else begin
        dense_to_softmax_streams_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_1_read = 1'b1;
    end else begin
        dense_to_softmax_streams_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_2_blk_n = dense_to_softmax_streams_2_empty_n;
    end else begin
        dense_to_softmax_streams_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_2_read = 1'b1;
    end else begin
        dense_to_softmax_streams_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_3_blk_n = dense_to_softmax_streams_3_empty_n;
    end else begin
        dense_to_softmax_streams_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_3_read = 1'b1;
    end else begin
        dense_to_softmax_streams_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_blk_n = dense_to_softmax_streams_empty_n;
    end else begin
        dense_to_softmax_streams_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_214 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_read = 1'b1;
    end else begin
        dense_to_softmax_streams_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_214_pp0_iter6_reg == 1'd1))) begin
        exp_sum_out_ap_vld = 1'b1;
    end else begin
        exp_sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_119_ce = 1'b1;
    end else begin
        grp_fu_119_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_119_p0 = ap_sig_allocacmp_exp_sum_load;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_119_p0 = sum_2_reg_268;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_119_p0 = sum_reg_228;
    end else begin
        grp_fu_119_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_119_p1 = tmp_reg_293;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_119_p1 = bitcast_ln20_2_fu_175_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_119_p1 = bitcast_ln20_fu_167_p1;
    end else begin
        grp_fu_119_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_123_ce = 1'b1;
    end else begin
        grp_fu_123_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_123_p0 = sum_3_reg_278;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_123_p0 = sum_1_reg_258;
    end else begin
        grp_fu_123_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_123_p1 = bitcast_ln20_3_fu_179_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_123_p1 = bitcast_ln20_1_fu_171_p1;
    end else begin
        grp_fu_123_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_127_ce = 1'b1;
    end else begin
        grp_fu_127_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to6 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter7_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to8 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_151_p2 = (ap_sig_allocacmp_d_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((dense_to_softmax_streams_3_empty_n == 1'b0) & (icmp_ln13_reg_214 == 1'd0)) | ((dense_to_softmax_streams_2_empty_n == 1'b0) & (icmp_ln13_reg_214 == 1'd0)) | ((dense_to_softmax_streams_1_empty_n == 1'b0) & (icmp_ln13_reg_214 == 1'd0)) | ((dense_to_softmax_streams_empty_n == 1'b0) & (icmp_ln13_reg_214 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln20_1_fu_171_p1 = dense_to_softmax_streams_1_read_reg_238_pp0_iter1_reg;

assign bitcast_ln20_2_fu_175_p1 = dense_to_softmax_streams_2_read_reg_243_pp0_iter2_reg;

assign bitcast_ln20_3_fu_179_p1 = dense_to_softmax_streams_3_read_reg_248_pp0_iter3_reg;

assign bitcast_ln20_fu_167_p1 = dense_to_softmax_streams_read_reg_233;

assign dense_biases_address0 = zext_ln13_fu_157_p1;

assign exp_sum_out = exp_sum_fu_54;

assign grp_fu_684_p_ce = grp_fu_119_ce;

assign grp_fu_684_p_din0 = grp_fu_119_p0;

assign grp_fu_684_p_din1 = grp_fu_119_p1;

assign grp_fu_684_p_opcode = 2'd0;

assign grp_fu_688_p_ce = grp_fu_123_ce;

assign grp_fu_688_p_din0 = grp_fu_123_p0;

assign grp_fu_688_p_din1 = grp_fu_123_p1;

assign grp_fu_688_p_opcode = 2'd0;

assign icmp_ln13_fu_145_p2 = ((ap_sig_allocacmp_d_1 == 4'd10) ? 1'b1 : 1'b0);

assign prediction_address0 = zext_ln13_reg_218_pp0_iter6_reg;

assign prediction_d0 = tmp_reg_293;

assign zext_ln13_fu_157_p1 = ap_sig_allocacmp_d_1;

always @ (posedge ap_clk) begin
    zext_ln13_reg_218[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_218_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_218_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_218_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_218_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_218_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_218_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_dataflow_section_Pipeline_dense_soft_max_for_dense_size
