// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolve_convolve_Pipeline_VITIS_LOOP_18_1_VITIS_LOOP_21_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        x,
        w_2,
        w_5,
        w_1,
        w_8,
        w,
        w_6,
        w_4,
        w_3,
        w_7,
        output_r
);

parameter    ap_ST_fsm_pp0_stage0 = 9'd1;
parameter    ap_ST_fsm_pp0_stage1 = 9'd2;
parameter    ap_ST_fsm_pp0_stage2 = 9'd4;
parameter    ap_ST_fsm_pp0_stage3 = 9'd8;
parameter    ap_ST_fsm_pp0_stage4 = 9'd16;
parameter    ap_ST_fsm_pp0_stage5 = 9'd32;
parameter    ap_ST_fsm_pp0_stage6 = 9'd64;
parameter    ap_ST_fsm_pp0_stage7 = 9'd128;
parameter    ap_ST_fsm_pp0_stage8 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] x;
input  [31:0] w_2;
input  [31:0] w_5;
input  [31:0] w_1;
input  [31:0] w_8;
input  [31:0] w;
input  [31:0] w_6;
input  [31:0] w_4;
input  [31:0] w_3;
input  [31:0] w_7;
input  [63:0] output_r;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_block_state18_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_subdone;
reg   [0:0] icmp_ln18_reg_758;
reg    ap_condition_exit_pp0_iter0_stage8;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage8;
reg    gmem_blk_n_B;
reg   [0:0] icmp_ln21_1_reg_790;
reg   [0:0] icmp_ln21_1_reg_790_pp0_iter2_reg;
reg    gmem_blk_n_W;
reg    gmem_blk_n_AW;
reg   [0:0] or_ln14_reg_762;
reg  signed [31:0] reg_263;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_predicate_op116_writereq_state2;
reg    ap_block_state2_io;
reg    ap_block_state11_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state12_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_259_p2;
reg   [31:0] reg_268;
reg    ap_block_state13_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state15_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg  signed [31:0] reg_272;
reg    ap_block_state5_io;
reg    ap_block_state14_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg  signed [31:0] reg_277;
reg    ap_block_state16_pp0_stage6_iter1;
reg    ap_block_state25_pp0_stage6_iter2;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_state8_io;
reg    ap_block_state17_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_pp0_stage8_11001;
wire   [0:0] icmp_ln18_fu_313_p2;
reg   [0:0] icmp_ln18_reg_758_pp0_iter1_reg;
wire   [0:0] or_ln14_fu_343_p2;
reg   [63:0] gmem_addr_reg_766;
reg   [63:0] gmem_addr_1_reg_772;
reg   [63:0] gmem_addr_2_reg_778;
reg   [63:0] gmem_addr_3_reg_784;
wire   [0:0] icmp_ln21_1_fu_587_p2;
reg   [0:0] icmp_ln21_1_reg_790_pp0_iter1_reg;
wire   [31:0] add_ln33_fu_629_p2;
reg   [31:0] add_ln33_reg_794;
wire   [31:0] add_ln33_1_fu_635_p2;
reg   [31:0] add_ln33_1_reg_799;
reg   [31:0] mul_ln33_1_reg_804;
reg   [31:0] mul_ln33_5_reg_809;
reg   [31:0] mul_ln33_8_reg_814;
wire   [31:0] sum_fu_666_p2;
reg   [31:0] sum_reg_819;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage6_subdone;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_251_p4;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
wire  signed [63:0] sext_ln21_fu_423_p1;
wire  signed [63:0] sext_ln31_fu_517_p1;
wire  signed [63:0] sext_ln31_1_fu_551_p1;
wire  signed [63:0] sext_ln31_2_fu_571_p1;
reg    ap_block_pp0_stage1_01001;
reg   [2:0] j_fu_106;
wire   [2:0] select_ln31_fu_533_p3;
reg   [2:0] ap_sig_allocacmp_j_1;
reg   [1:0] indvar20_fu_110;
wire   [1:0] add_ln21_fu_581_p2;
reg   [1:0] ap_sig_allocacmp_indvar20_load;
reg   [1:0] add_ln181_fu_114;
wire   [1:0] add_ln18_fu_593_p2;
reg   [2:0] i_fu_118;
wire   [2:0] select_ln18_1_fu_371_p3;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [1:0] indvar_fu_122;
wire   [1:0] select_ln18_fu_357_p3;
reg   [1:0] ap_sig_allocacmp_indvar_load;
reg   [3:0] indvar_flatten_fu_126;
wire   [3:0] add_ln18_1_fu_319_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten_load;
reg  signed [31:0] grp_fu_259_p0;
reg  signed [31:0] grp_fu_259_p1;
wire   [0:0] icmp_ln21_fu_337_p2;
wire   [2:0] indvars_iv_next26_dup3_fu_365_p2;
wire   [1:0] empty_21_fu_379_p1;
wire   [5:0] tmp_2_fu_383_p4;
wire   [6:0] p_cast13_fu_393_p1;
wire   [6:0] tmp_fu_397_p2;
wire   [63:0] tmp_cast_fu_403_p1;
wire   [63:0] empty_22_fu_407_p2;
wire   [61:0] trunc_ln_fu_413_p4;
wire   [5:0] add_ln31_8_fu_437_p4;
wire   [1:0] select_ln14_fu_349_p3;
wire   [3:0] shl_ln_fu_451_p3;
wire   [63:0] zext_ln31_fu_447_p1;
wire   [5:0] zext_ln31_2_fu_463_p1;
wire   [5:0] add_ln31_1_fu_473_p2;
wire   [63:0] zext_ln31_3_fu_479_p1;
wire   [63:0] add_ln31_fu_467_p2;
wire   [63:0] zext_ln31_1_fu_459_p1;
wire   [63:0] add_ln31_3_fu_489_p2;
wire   [63:0] p_cast15_fu_433_p1;
wire   [63:0] add_ln31_5_fu_501_p2;
wire   [61:0] trunc_ln1_fu_507_p4;
wire   [2:0] add_ln31_6_fu_527_p2;
wire   [63:0] add_ln31_4_fu_495_p2;
wire   [61:0] trunc_ln31_1_fu_541_p4;
wire   [63:0] add_ln31_2_fu_483_p2;
wire   [61:0] trunc_ln31_2_fu_561_p4;
wire   [31:0] add_ln33_4_fu_650_p2;
wire   [31:0] add_ln33_5_fu_655_p2;
wire   [31:0] add_ln33_3_fu_645_p2;
wire   [31:0] add_ln33_6_fu_660_p2;
wire   [31:0] add_ln33_2_fu_641_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage6;
reg    ap_idle_pp0_0to0;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage7_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_788;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_106 = 3'd0;
#0 indvar20_fu_110 = 2'd0;
#0 add_ln181_fu_114 = 2'd0;
#0 i_fu_118 = 3'd0;
#0 indvar_fu_122 = 2'd0;
#0 indvar_flatten_fu_126 = 4'd0;
#0 ap_done_reg = 1'b0;
end

convolve_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(grp_fu_259_p0),
    .din1(grp_fu_259_p1),
    .dout(grp_fu_259_p2)
);

convolve_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage8),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage8)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage6))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln18_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_118 <= select_ln18_1_fu_371_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_118 <= 3'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln18_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar20_fu_110 <= add_ln21_fu_581_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar20_fu_110 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln18_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_126 <= add_ln18_1_fu_319_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_126 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln18_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_fu_122 <= select_ln18_fu_357_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_fu_122 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln18_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_106 <= select_ln31_fu_533_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_106 <= 3'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln181_fu_114 <= add_ln18_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln33_1_reg_799 <= add_ln33_1_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln33_reg_794 <= add_ln33_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_reg_772 <= sext_ln31_fu_517_p1;
        gmem_addr_2_reg_778 <= sext_ln31_1_fu_551_p1;
        gmem_addr_3_reg_784 <= sext_ln31_2_fu_571_p1;
        gmem_addr_reg_766 <= sext_ln21_fu_423_p1;
        icmp_ln18_reg_758 <= icmp_ln18_fu_313_p2;
        icmp_ln18_reg_758_pp0_iter1_reg <= icmp_ln18_reg_758;
        icmp_ln21_1_reg_790 <= icmp_ln21_1_fu_587_p2;
        icmp_ln21_1_reg_790_pp0_iter1_reg <= icmp_ln21_1_reg_790;
        icmp_ln21_1_reg_790_pp0_iter2_reg <= icmp_ln21_1_reg_790_pp0_iter1_reg;
        or_ln14_reg_762 <= or_ln14_fu_343_p2;
        sum_reg_819 <= sum_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        mul_ln33_1_reg_804 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        mul_ln33_5_reg_809 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        mul_ln33_8_reg_814 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_263 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_268 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_272 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)))) begin
        reg_277 <= m_axi_gmem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln18_reg_758 == 1'd1) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
        ap_condition_exit_pp0_iter0_stage8 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_758_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_condition_exit_pp0_iter1_stage6 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_788)) begin
            ap_phi_mux_first_iter_0_phi_fu_251_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_0_phi_fu_251_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_0_phi_fu_251_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_251_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_118;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar20_load = 2'd0;
    end else begin
        ap_sig_allocacmp_indvar20_load = indvar20_fu_110;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_126;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_load = 2'd0;
    end else begin
        ap_sig_allocacmp_indvar_load = indvar_fu_122;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 3'd1;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_106;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (or_ln14_reg_762 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln21_1_reg_790_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)))) begin
        grp_fu_259_p0 = reg_277;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)))) begin
        grp_fu_259_p0 = reg_272;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        grp_fu_259_p0 = reg_263;
    end else begin
        grp_fu_259_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_259_p1 = w_8;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_259_p1 = w_7;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        grp_fu_259_p1 = w_6;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        grp_fu_259_p1 = w_5;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_259_p1 = w_4;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_259_p1 = w_3;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_259_p1 = w_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_259_p1 = w_1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_259_p1 = w;
    end else begin
        grp_fu_259_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_reg_758 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_3_reg_784;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_778;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_772;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op116_writereq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln21_1_reg_790_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_1_fu_319_p2 = (ap_sig_allocacmp_indvar_flatten_load + 4'd1);

assign add_ln18_fu_593_p2 = (select_ln18_fu_357_p3 + 2'd1);

assign add_ln21_fu_581_p2 = (select_ln14_fu_349_p3 + 2'd1);

assign add_ln31_1_fu_473_p2 = ($signed(zext_ln31_2_fu_463_p1) + $signed(6'd40));

assign add_ln31_2_fu_483_p2 = (zext_ln31_3_fu_479_p1 + add_ln31_fu_467_p2);

assign add_ln31_3_fu_489_p2 = (zext_ln31_1_fu_459_p1 + x);

assign add_ln31_4_fu_495_p2 = (add_ln31_3_fu_489_p2 + p_cast15_fu_433_p1);

assign add_ln31_5_fu_501_p2 = (add_ln31_3_fu_489_p2 + zext_ln31_fu_447_p1);

assign add_ln31_6_fu_527_p2 = (ap_sig_allocacmp_j_1 + 3'd1);

assign add_ln31_8_fu_437_p4 = {{{select_ln18_fu_357_p3}, {select_ln18_fu_357_p3}}, {2'd0}};

assign add_ln31_fu_467_p2 = (zext_ln31_fu_447_p1 + x);

assign add_ln33_1_fu_635_p2 = (reg_268 + grp_fu_259_p2);

assign add_ln33_2_fu_641_p2 = (add_ln33_1_reg_799 + add_ln33_reg_794);

assign add_ln33_3_fu_645_p2 = (reg_268 + mul_ln33_1_reg_804);

assign add_ln33_4_fu_650_p2 = (mul_ln33_8_reg_814 + grp_fu_259_p2);

assign add_ln33_5_fu_655_p2 = (add_ln33_4_fu_650_p2 + mul_ln33_5_reg_809);

assign add_ln33_6_fu_660_p2 = (add_ln33_5_fu_655_p2 + add_ln33_3_fu_645_p2);

assign add_ln33_fu_629_p2 = (grp_fu_259_p2 + reg_268);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage2_iter1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage2_iter1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage3_iter1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage3_iter1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage4_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage4_iter1)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage5_iter1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage5_iter1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state25_pp0_stage6_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage6_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state25_pp0_stage6_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage6_iter1)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage7_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage7_iter1)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage8_iter1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage8_iter1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage4_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp0_stage5_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state16_pp0_stage6_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state17_pp0_stage7_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state18_pp0_stage8_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp0_stage6_iter2 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln21_1_reg_790_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = (((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln18_reg_758 == 1'd0)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_predicate_op116_writereq_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln18_reg_758 == 1'd0));
end

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln18_reg_758 == 1'd0));
end

always @ (*) begin
    ap_condition_788 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage8;

always @ (*) begin
    ap_predicate_op116_writereq_state2 = ((or_ln14_reg_762 == 1'd1) & (icmp_ln18_reg_758 == 1'd0));
end

assign empty_21_fu_379_p1 = select_ln18_1_fu_371_p3[1:0];

assign empty_22_fu_407_p2 = (tmp_cast_fu_403_p1 + output_r);

assign icmp_ln18_fu_313_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_587_p2 = ((select_ln31_fu_533_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_337_p2 = ((ap_sig_allocacmp_j_1 == 3'd4) ? 1'b1 : 1'b0);

assign indvars_iv_next26_dup3_fu_365_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd3;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_766;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd3;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = sum_reg_819;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln14_fu_343_p2 = (icmp_ln21_fu_337_p2 | ap_phi_mux_first_iter_0_phi_fu_251_p4);

assign p_cast13_fu_393_p1 = tmp_2_fu_383_p4;

assign p_cast15_fu_433_p1 = tmp_2_fu_383_p4;

assign select_ln14_fu_349_p3 = ((icmp_ln21_fu_337_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_indvar20_load);

assign select_ln18_1_fu_371_p3 = ((icmp_ln21_fu_337_p2[0:0] == 1'b1) ? indvars_iv_next26_dup3_fu_365_p2 : ap_sig_allocacmp_i_load);

assign select_ln18_fu_357_p3 = ((icmp_ln21_fu_337_p2[0:0] == 1'b1) ? add_ln181_fu_114 : ap_sig_allocacmp_indvar_load);

assign select_ln31_fu_533_p3 = ((icmp_ln21_fu_337_p2[0:0] == 1'b1) ? 3'd2 : add_ln31_6_fu_527_p2);

assign sext_ln21_fu_423_p1 = $signed(trunc_ln_fu_413_p4);

assign sext_ln31_1_fu_551_p1 = $signed(trunc_ln31_1_fu_541_p4);

assign sext_ln31_2_fu_571_p1 = $signed(trunc_ln31_2_fu_561_p4);

assign sext_ln31_fu_517_p1 = $signed(trunc_ln1_fu_507_p4);

assign shl_ln_fu_451_p3 = {{select_ln14_fu_349_p3}, {2'd0}};

assign sum_fu_666_p2 = (add_ln33_6_fu_660_p2 + add_ln33_2_fu_641_p2);

assign tmp_2_fu_383_p4 = {{{empty_21_fu_379_p1}, {empty_21_fu_379_p1}}, {2'd0}};

assign tmp_cast_fu_403_p1 = tmp_fu_397_p2;

assign tmp_fu_397_p2 = (p_cast13_fu_393_p1 + 7'd4);

assign trunc_ln1_fu_507_p4 = {{add_ln31_5_fu_501_p2[63:2]}};

assign trunc_ln31_1_fu_541_p4 = {{add_ln31_4_fu_495_p2[63:2]}};

assign trunc_ln31_2_fu_561_p4 = {{add_ln31_2_fu_483_p2[63:2]}};

assign trunc_ln_fu_413_p4 = {{empty_22_fu_407_p2[63:2]}};

assign zext_ln31_1_fu_459_p1 = shl_ln_fu_451_p3;

assign zext_ln31_2_fu_463_p1 = shl_ln_fu_451_p3;

assign zext_ln31_3_fu_479_p1 = add_ln31_1_fu_473_p2;

assign zext_ln31_fu_447_p1 = add_ln31_8_fu_437_p4;

endmodule //convolve_convolve_Pipeline_VITIS_LOOP_18_1_VITIS_LOOP_21_2
