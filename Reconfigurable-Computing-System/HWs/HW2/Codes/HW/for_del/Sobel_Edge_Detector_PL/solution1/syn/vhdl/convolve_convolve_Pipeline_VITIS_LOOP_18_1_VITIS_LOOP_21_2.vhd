-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_convolve_Pipeline_VITIS_LOOP_18_1_VITIS_LOOP_21_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    w_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    w : IN STD_LOGIC_VECTOR (31 downto 0);
    w_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of convolve_convolve_Pipeline_VITIS_LOOP_18_1_VITIS_LOOP_21_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state18_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal icmp_ln18_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage8 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal icmp_ln21_1_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_790_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal or_ln14_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_predicate_op116_writereq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal icmp_ln18_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_758_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_766 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_772 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_778 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_784 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_790_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_1_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_1_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_1_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_5_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_8_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_phi_mux_first_iter_0_phi_fu_251_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sext_ln21_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_1_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_2_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal j_fu_106 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln31_fu_533_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar20_fu_110 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln21_fu_581_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_indvar20_load : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln181_fu_114 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln18_fu_593_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_118 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln18_1_fu_371_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_fu_122 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln18_fu_357_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_indvar_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_126 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln18_1_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next26_dup3_fu_365_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_21_fu_379_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_383_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast13_fu_393_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_397_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_22_fu_407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_413_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln31_8_fu_437_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_fu_349_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_451_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_463_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln31_1_fu_473_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_3_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_3_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast15_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_5_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_507_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln31_6_fu_527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln31_4_fu_495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln31_1_fu_541_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln31_2_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln31_2_fu_561_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln33_4_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_5_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_3_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_6_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_2_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage6 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_788 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component convolve_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component convolve_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_259_p0,
        din1 => grp_fu_259_p1,
        dout => grp_fu_259_p2);

    flow_control_loop_pipe_sequential_init_U : component convolve_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage8,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage8)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage6))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln18_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_118 <= select_ln18_1_fu_371_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_118 <= ap_const_lv3_1;
                end if;
            end if; 
        end if;
    end process;

    indvar20_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln18_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar20_fu_110 <= add_ln21_fu_581_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar20_fu_110 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln18_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_126 <= add_ln18_1_fu_319_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_126 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln18_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_fu_122 <= select_ln18_fu_357_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_fu_122 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln18_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_106 <= select_ln31_fu_533_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_106 <= ap_const_lv3_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln181_fu_114 <= add_ln18_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln33_1_reg_799 <= add_ln33_1_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln33_reg_794 <= add_ln33_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_1_reg_772 <= sext_ln31_fu_517_p1;
                gmem_addr_2_reg_778 <= sext_ln31_1_fu_551_p1;
                gmem_addr_3_reg_784 <= sext_ln31_2_fu_571_p1;
                gmem_addr_reg_766 <= sext_ln21_fu_423_p1;
                icmp_ln18_reg_758 <= icmp_ln18_fu_313_p2;
                icmp_ln18_reg_758_pp0_iter1_reg <= icmp_ln18_reg_758;
                icmp_ln21_1_reg_790 <= icmp_ln21_1_fu_587_p2;
                icmp_ln21_1_reg_790_pp0_iter1_reg <= icmp_ln21_1_reg_790;
                icmp_ln21_1_reg_790_pp0_iter2_reg <= icmp_ln21_1_reg_790_pp0_iter1_reg;
                or_ln14_reg_762 <= or_ln14_fu_343_p2;
                sum_reg_819 <= sum_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                mul_ln33_1_reg_804 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                mul_ln33_5_reg_809 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                mul_ln33_8_reg_814 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_263 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_268 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then
                reg_272 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)))) then
                reg_277 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage8_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage6, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln18_1_fu_319_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln18_fu_593_p2 <= std_logic_vector(unsigned(select_ln18_fu_357_p3) + unsigned(ap_const_lv2_1));
    add_ln21_fu_581_p2 <= std_logic_vector(unsigned(select_ln14_fu_349_p3) + unsigned(ap_const_lv2_1));
    add_ln31_1_fu_473_p2 <= std_logic_vector(unsigned(zext_ln31_2_fu_463_p1) + unsigned(ap_const_lv6_28));
    add_ln31_2_fu_483_p2 <= std_logic_vector(unsigned(zext_ln31_3_fu_479_p1) + unsigned(add_ln31_fu_467_p2));
    add_ln31_3_fu_489_p2 <= std_logic_vector(unsigned(zext_ln31_1_fu_459_p1) + unsigned(x));
    add_ln31_4_fu_495_p2 <= std_logic_vector(unsigned(add_ln31_3_fu_489_p2) + unsigned(p_cast15_fu_433_p1));
    add_ln31_5_fu_501_p2 <= std_logic_vector(unsigned(add_ln31_3_fu_489_p2) + unsigned(zext_ln31_fu_447_p1));
    add_ln31_6_fu_527_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv3_1));
    add_ln31_8_fu_437_p4 <= ((select_ln18_fu_357_p3 & select_ln18_fu_357_p3) & ap_const_lv2_0);
    add_ln31_fu_467_p2 <= std_logic_vector(unsigned(zext_ln31_fu_447_p1) + unsigned(x));
    add_ln33_1_fu_635_p2 <= std_logic_vector(unsigned(reg_268) + unsigned(grp_fu_259_p2));
    add_ln33_2_fu_641_p2 <= std_logic_vector(unsigned(add_ln33_1_reg_799) + unsigned(add_ln33_reg_794));
    add_ln33_3_fu_645_p2 <= std_logic_vector(unsigned(reg_268) + unsigned(mul_ln33_1_reg_804));
    add_ln33_4_fu_650_p2 <= std_logic_vector(unsigned(mul_ln33_8_reg_814) + unsigned(grp_fu_259_p2));
    add_ln33_5_fu_655_p2 <= std_logic_vector(unsigned(add_ln33_4_fu_650_p2) + unsigned(mul_ln33_5_reg_809));
    add_ln33_6_fu_660_p2 <= std_logic_vector(unsigned(add_ln33_5_fu_655_p2) + unsigned(add_ln33_3_fu_645_p2));
    add_ln33_fu_629_p2 <= std_logic_vector(unsigned(grp_fu_259_p2) + unsigned(reg_268));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state10_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state10_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state11_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage1_iter1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem_WREADY, ap_block_state2_io, ap_block_state11_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage1_iter1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem_WREADY, ap_block_state2_io, ap_block_state11_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage1_iter1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state12_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage2_iter1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state12_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage2_iter1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state13_pp0_stage3_iter1)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_pp0_stage3_iter1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state13_pp0_stage3_iter1)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_pp0_stage3_iter1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state5_io, ap_block_state14_pp0_stage4_iter1)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage4_iter1)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state5_io, ap_block_state14_pp0_stage4_iter1)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage4_iter1)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state15_pp0_stage5_iter1)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage5_iter1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state15_pp0_stage5_iter1)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage5_iter1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state16_pp0_stage6_iter1, ap_block_state25_pp0_stage6_iter2)
    begin
                ap_block_pp0_stage6_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage6_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_pp0_stage6_iter1)));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state16_pp0_stage6_iter1, ap_block_state25_pp0_stage6_iter2)
    begin
                ap_block_pp0_stage6_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage6_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_pp0_stage6_iter1)));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state8_io, ap_block_state17_pp0_stage7_iter1)
    begin
                ap_block_pp0_stage7_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage7_iter1)));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state8_io, ap_block_state17_pp0_stage7_iter1)
    begin
                ap_block_pp0_stage7_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage7_iter1)));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state18_pp0_stage8_iter1)
    begin
                ap_block_pp0_stage8_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_pp0_stage8_iter1));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state18_pp0_stage8_iter1)
    begin
                ap_block_pp0_stage8_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_pp0_stage8_iter1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state11_pp0_stage1_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state11_pp0_stage1_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state12_pp0_stage2_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state12_pp0_stage2_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state13_pp0_stage3_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state13_pp0_stage3_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state14_pp0_stage4_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state14_pp0_stage4_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state15_pp0_stage5_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state15_pp0_stage5_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state16_pp0_stage6_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state16_pp0_stage6_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state17_pp0_stage7_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state17_pp0_stage7_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state18_pp0_stage8_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state18_pp0_stage8_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state25_pp0_stage6_iter2_assign_proc : process(m_axi_gmem_BVALID, icmp_ln21_1_reg_790_pp0_iter2_reg)
    begin
                ap_block_state25_pp0_stage6_iter2 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln21_1_reg_790_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, icmp_ln18_reg_758, ap_predicate_op116_writereq_state2)
    begin
                ap_block_state2_io <= (((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln18_reg_758 = ap_const_lv1_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_predicate_op116_writereq_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state5_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln18_reg_758)
    begin
                ap_block_state5_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln18_reg_758 = ap_const_lv1_0));
    end process;


    ap_block_state8_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln18_reg_758)
    begin
                ap_block_state8_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln18_reg_758 = ap_const_lv1_0));
    end process;


    ap_condition_788_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln18_reg_758, ap_block_pp0_stage0)
    begin
                ap_condition_788 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone, icmp_ln18_reg_758)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln18_reg_758 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, icmp_ln18_reg_758_pp0_iter1_reg, ap_block_pp0_stage6_subdone)
    begin
        if (((icmp_ln18_reg_758_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
            ap_condition_exit_pp0_iter1_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage8;

    ap_phi_mux_first_iter_0_phi_fu_251_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_788)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_788)) then 
                ap_phi_mux_first_iter_0_phi_fu_251_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_0_phi_fu_251_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_0_phi_fu_251_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_0_phi_fu_251_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_predicate_op116_writereq_state2_assign_proc : process(icmp_ln18_reg_758, or_ln14_reg_762)
    begin
                ap_predicate_op116_writereq_state2 <= ((or_ln14_reg_762 = ap_const_lv1_1) and (icmp_ln18_reg_758 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_118)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv3_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvar20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar20_fu_110)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar20_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_indvar20_load <= indvar20_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_126)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_126;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_fu_122)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_indvar_load <= indvar_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_106)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv3_1;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_106;
        end if; 
    end process;

    empty_21_fu_379_p1 <= select_ln18_1_fu_371_p3(2 - 1 downto 0);
    empty_22_fu_407_p2 <= std_logic_vector(unsigned(tmp_cast_fu_403_p1) + unsigned(output_r));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_ARREADY, icmp_ln18_reg_758, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_AWREADY, icmp_ln18_reg_758, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, or_ln14_reg_762)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (or_ln14_reg_762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_BVALID, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, icmp_ln21_1_reg_790_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln21_1_reg_790_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage8)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 
    = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_259_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage8, reg_263, reg_272, reg_277)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7)))) then 
            grp_fu_259_p0 <= reg_277;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)))) then 
            grp_fu_259_p0 <= reg_272;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            grp_fu_259_p0 <= reg_263;
        else 
            grp_fu_259_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_259_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage8, w_2, w_5, w_1, w_8, w, w_6, w_4, w_3, w_7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage8)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_259_p1 <= w_8;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            grp_fu_259_p1 <= w_7;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            grp_fu_259_p1 <= w_6;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            grp_fu_259_p1 <= w_5;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            grp_fu_259_p1 <= w_4;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_259_p1 <= w_3;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_259_p1 <= w_2;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_259_p1 <= w_1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_259_p1 <= w;
        else 
            grp_fu_259_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln18_fu_313_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_9) else "0";
    icmp_ln21_1_fu_587_p2 <= "1" when (select_ln31_fu_533_p3 = ap_const_lv3_4) else "0";
    icmp_ln21_fu_337_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv3_4) else "0";
    indvars_iv_next26_dup3_fu_365_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv3_1));

    m_axi_gmem_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_reg_758, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage7_11001, gmem_addr_1_reg_772, gmem_addr_2_reg_778, gmem_addr_3_reg_784)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_758 = ap_const_lv1_0))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_3_reg_784;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_2_reg_778;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                m_axi_gmem_ARADDR <= gmem_addr_1_reg_772;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_3;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_reg_758, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_reg_766;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_3;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op116_writereq_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op116_writereq_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage6, icmp_ln21_1_reg_790_pp0_iter2_reg, ap_block_pp0_stage6_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln21_1_reg_790_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= sum_reg_819;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln14_fu_343_p2 <= (icmp_ln21_fu_337_p2 or ap_phi_mux_first_iter_0_phi_fu_251_p4);
    p_cast13_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_383_p4),7));
    p_cast15_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_383_p4),64));
    select_ln14_fu_349_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_337_p2(0) = '1') else 
        ap_sig_allocacmp_indvar20_load;
    select_ln18_1_fu_371_p3 <= 
        indvars_iv_next26_dup3_fu_365_p2 when (icmp_ln21_fu_337_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln18_fu_357_p3 <= 
        add_ln181_fu_114 when (icmp_ln21_fu_337_p2(0) = '1') else 
        ap_sig_allocacmp_indvar_load;
    select_ln31_fu_533_p3 <= 
        ap_const_lv3_2 when (icmp_ln21_fu_337_p2(0) = '1') else 
        add_ln31_6_fu_527_p2;
        sext_ln21_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_413_p4),64));

        sext_ln31_1_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln31_1_fu_541_p4),64));

        sext_ln31_2_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln31_2_fu_561_p4),64));

        sext_ln31_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_507_p4),64));

    shl_ln_fu_451_p3 <= (select_ln14_fu_349_p3 & ap_const_lv2_0);
    sum_fu_666_p2 <= std_logic_vector(unsigned(add_ln33_6_fu_660_p2) + unsigned(add_ln33_2_fu_641_p2));
    tmp_2_fu_383_p4 <= ((empty_21_fu_379_p1 & empty_21_fu_379_p1) & ap_const_lv2_0);
    tmp_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_397_p2),64));
    tmp_fu_397_p2 <= std_logic_vector(unsigned(p_cast13_fu_393_p1) + unsigned(ap_const_lv7_4));
    trunc_ln1_fu_507_p4 <= add_ln31_5_fu_501_p2(63 downto 2);
    trunc_ln31_1_fu_541_p4 <= add_ln31_4_fu_495_p2(63 downto 2);
    trunc_ln31_2_fu_561_p4 <= add_ln31_2_fu_483_p2(63 downto 2);
    trunc_ln_fu_413_p4 <= empty_22_fu_407_p2(63 downto 2);
    zext_ln31_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_451_p3),64));
    zext_ln31_2_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_451_p3),6));
    zext_ln31_3_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_473_p2),64));
    zext_ln31_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_8_fu_437_p4),64));
end behav;
