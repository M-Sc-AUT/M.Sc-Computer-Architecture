// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolve_convolve_Pipeline_VITIS_LOOP_21_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln31_2,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        empty,
        i,
        w_7,
        w_8,
        w_2,
        w_1,
        w_5,
        w_3,
        w_4,
        w_6,
        w,
        p_phi_out,
        p_phi_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] add_ln31_2;
output  [4:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [4:0] x_address1;
output   x_ce1;
input  [31:0] x_q1;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [2:0] empty;
input  [4:0] i;
input  [31:0] w_7;
input  [31:0] w_8;
input  [31:0] w_2;
input  [31:0] w_1;
input  [31:0] w_5;
input  [31:0] w_3;
input  [31:0] w_4;
input  [31:0] w_6;
input  [31:0] w;
output  [4:0] p_phi_out;
output   p_phi_out_ap_vld;

reg ap_idle;
reg[4:0] x_address0;
reg x_ce0;
reg[4:0] x_address1;
reg x_ce1;
reg output_r_ce0;
reg output_r_we0;
reg p_phi_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln21_fu_289_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_subdone;
wire   [31:0] grp_fu_264_p2;
reg   [31:0] reg_277;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] j_1_reg_566;
reg   [0:0] icmp_ln21_reg_571;
wire   [4:0] zext_ln31_fu_299_p1;
reg   [4:0] zext_ln31_reg_575;
wire   [4:0] add_ln31_4_fu_321_p2;
reg   [4:0] add_ln31_4_reg_581;
wire   [4:0] zext_ln31_4_fu_344_p1;
reg   [4:0] zext_ln31_4_reg_591;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [4:0] zext_ln31_7_fu_373_p1;
reg   [4:0] zext_ln31_7_reg_607;
wire   [31:0] grp_fu_271_p2;
reg   [31:0] add_ln33_reg_618;
wire   [4:0] add_ln31_3_fu_392_p2;
reg   [4:0] add_ln31_3_reg_623;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [4:0] add_ln31_9_fu_396_p2;
reg   [4:0] add_ln31_9_reg_628;
wire   [4:0] add_ln31_13_fu_437_p2;
reg   [4:0] add_ln31_13_reg_643;
reg   [31:0] add_ln33_1_reg_648;
wire   [63:0] zext_ln31_1_fu_447_p1;
reg   [63:0] zext_ln31_1_reg_653;
wire   [31:0] grp_fu_259_p2;
reg   [31:0] mul_ln33_reg_668;
wire   [31:0] add_ln33_5_fu_464_p2;
reg   [31:0] add_ln33_5_reg_678;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln31_3_fu_333_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln31_5_fu_354_p1;
wire   [63:0] zext_ln31_6_fu_363_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln31_8_fu_382_p1;
wire   [63:0] zext_ln31_10_fu_422_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln31_11_fu_432_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln31_12_fu_451_p1;
wire   [63:0] zext_ln31_9_fu_455_p1;
wire    ap_block_pp0_stage4;
reg   [4:0] p_phi_fu_78;
wire   [4:0] empty_8_fu_400_p2;
reg   [2:0] j_fu_82;
wire   [2:0] add_ln31_1_fu_368_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage0_01001;
reg  signed [31:0] grp_fu_259_p0;
reg  signed [31:0] grp_fu_259_p1;
reg  signed [31:0] grp_fu_264_p0;
reg  signed [31:0] grp_fu_264_p1;
wire   [2:0] empty_7_fu_303_p2;
wire   [4:0] tmp_1_fu_313_p3;
wire   [4:0] zext_ln31_2_fu_309_p1;
wire   [4:0] add_ln31_5_fu_327_p2;
wire   [1:0] trunc_ln21_fu_295_p1;
wire   [1:0] add_ln31_fu_338_p2;
wire   [4:0] add_ln31_6_fu_348_p2;
wire   [4:0] add_ln31_7_fu_359_p2;
wire   [4:0] add_ln31_8_fu_377_p2;
wire   [4:0] shl_ln31_fu_405_p2;
wire   [4:0] add_ln31_10_fu_411_p2;
wire   [4:0] add_ln31_11_fu_417_p2;
wire   [4:0] add_ln31_12_fu_427_p2;
wire   [31:0] add_ln33_4_fu_459_p2;
wire   [31:0] add_ln33_3_fu_474_p2;
wire   [31:0] add_ln33_6_fu_480_p2;
wire   [31:0] add_ln33_2_fu_470_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 p_phi_fu_78 = 5'd0;
#0 j_fu_82 = 3'd0;
#0 ap_done_reg = 1'b0;
end

convolve_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(grp_fu_259_p0),
    .din1(grp_fu_259_p1),
    .dout(grp_fu_259_p2)
);

convolve_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(grp_fu_264_p0),
    .din1(grp_fu_264_p1),
    .dout(grp_fu_264_p2)
);

convolve_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_82 <= 3'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln21_reg_571 == 1'd0))) begin
        j_fu_82 <= add_ln31_1_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln31_13_reg_643 <= add_ln31_13_fu_437_p2;
        add_ln31_3_reg_623 <= add_ln31_3_fu_392_p2;
        add_ln31_9_reg_628 <= add_ln31_9_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln31_4_reg_581 <= add_ln31_4_fu_321_p2;
        icmp_ln21_reg_571 <= icmp_ln21_fu_289_p2;
        j_1_reg_566 <= ap_sig_allocacmp_j_1;
        zext_ln31_4_reg_591[1 : 0] <= zext_ln31_4_fu_344_p1[1 : 0];
        zext_ln31_reg_575[2 : 0] <= zext_ln31_fu_299_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln33_1_reg_648 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln33_5_reg_678 <= add_ln33_5_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln33_reg_618 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln33_reg_668 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln21_reg_571 == 1'd0))) begin
        p_phi_fu_78 <= empty_8_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_277 <= grp_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        zext_ln31_1_reg_653[4 : 0] <= zext_ln31_1_fu_447_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln31_7_reg_607[2 : 0] <= zext_ln31_7_fu_373_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 3'd1;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_259_p0 = x_q1;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_259_p0 = x_q0;
    end else begin
        grp_fu_259_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_259_p1 = w_5;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_259_p1 = w_8;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_259_p1 = w_7;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_259_p1 = w_2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_259_p1 = w_1;
    end else begin
        grp_fu_259_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_264_p0 = x_q0;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_264_p0 = x_q1;
    end else begin
        grp_fu_264_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_264_p1 = w_4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_264_p1 = w_6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_264_p1 = w_3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_264_p1 = w;
        end else begin
            grp_fu_264_p1 = 'bx;
        end
    end else begin
        grp_fu_264_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_phi_out_ap_vld = 1'b1;
    end else begin
        p_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            x_address0 = zext_ln31_9_fu_455_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            x_address0 = zext_ln31_12_fu_451_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            x_address0 = zext_ln31_11_fu_432_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_address0 = zext_ln31_6_fu_363_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_address0 = zext_ln31_3_fu_333_p1;
        end else begin
            x_address0 = 'bx;
        end
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            x_address1 = zext_ln31_1_fu_447_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            x_address1 = zext_ln31_10_fu_422_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_address1 = zext_ln31_8_fu_382_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_address1 = zext_ln31_5_fu_354_p1;
        end else begin
            x_address1 = 'bx;
        end
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_10_fu_411_p2 = (shl_ln31_fu_405_p2 + empty_8_fu_400_p2);

assign add_ln31_11_fu_417_p2 = (add_ln31_10_fu_411_p2 + zext_ln31_4_reg_591);

assign add_ln31_12_fu_427_p2 = (add_ln31_10_fu_411_p2 + zext_ln31_reg_575);

assign add_ln31_13_fu_437_p2 = (add_ln31_10_fu_411_p2 + zext_ln31_7_reg_607);

assign add_ln31_1_fu_368_p2 = (j_1_reg_566 + 3'd1);

assign add_ln31_3_fu_392_p2 = (add_ln31_2 + zext_ln31_reg_575);

assign add_ln31_4_fu_321_p2 = (tmp_1_fu_313_p3 + zext_ln31_2_fu_309_p1);

assign add_ln31_5_fu_327_p2 = (add_ln31_4_fu_321_p2 + zext_ln31_fu_299_p1);

assign add_ln31_6_fu_348_p2 = (add_ln31_4_fu_321_p2 + zext_ln31_4_fu_344_p1);

assign add_ln31_7_fu_359_p2 = (add_ln31_2 + zext_ln31_4_reg_591);

assign add_ln31_8_fu_377_p2 = (add_ln31_4_reg_581 + zext_ln31_7_fu_373_p1);

assign add_ln31_9_fu_396_p2 = (add_ln31_2 + zext_ln31_7_reg_607);

assign add_ln31_fu_338_p2 = ($signed(trunc_ln21_fu_295_p1) + $signed(2'd3));

assign add_ln33_2_fu_470_p2 = (add_ln33_1_reg_648 + add_ln33_reg_618);

assign add_ln33_3_fu_474_p2 = (reg_277 + grp_fu_259_p2);

assign add_ln33_4_fu_459_p2 = (mul_ln33_reg_668 + grp_fu_259_p2);

assign add_ln33_5_fu_464_p2 = (add_ln33_4_fu_459_p2 + reg_277);

assign add_ln33_6_fu_480_p2 = (add_ln33_5_reg_678 + add_ln33_3_fu_474_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_7_fu_303_p2 = ($signed(empty) + $signed(3'd7));

assign empty_8_fu_400_p2 = (i + 5'd1);

assign grp_fu_271_p2 = (grp_fu_259_p2 + grp_fu_264_p2);

assign icmp_ln21_fu_289_p2 = ((ap_sig_allocacmp_j_1 == 3'd4) ? 1'b1 : 1'b0);

assign output_r_address0 = zext_ln31_1_reg_653;

assign output_r_d0 = (add_ln33_6_fu_480_p2 + add_ln33_2_fu_470_p2);

assign p_phi_out = p_phi_fu_78;

assign shl_ln31_fu_405_p2 = empty_8_fu_400_p2 << 5'd2;

assign tmp_1_fu_313_p3 = {{empty_7_fu_303_p2}, {2'd0}};

assign trunc_ln21_fu_295_p1 = ap_sig_allocacmp_j_1[1:0];

assign zext_ln31_10_fu_422_p1 = add_ln31_11_fu_417_p2;

assign zext_ln31_11_fu_432_p1 = add_ln31_12_fu_427_p2;

assign zext_ln31_12_fu_451_p1 = add_ln31_13_reg_643;

assign zext_ln31_1_fu_447_p1 = add_ln31_3_reg_623;

assign zext_ln31_2_fu_309_p1 = empty_7_fu_303_p2;

assign zext_ln31_3_fu_333_p1 = add_ln31_5_fu_327_p2;

assign zext_ln31_4_fu_344_p1 = add_ln31_fu_338_p2;

assign zext_ln31_5_fu_354_p1 = add_ln31_6_fu_348_p2;

assign zext_ln31_6_fu_363_p1 = add_ln31_7_fu_359_p2;

assign zext_ln31_7_fu_373_p1 = add_ln31_1_fu_368_p2;

assign zext_ln31_8_fu_382_p1 = add_ln31_8_fu_377_p2;

assign zext_ln31_9_fu_455_p1 = add_ln31_9_reg_628;

assign zext_ln31_fu_299_p1 = ap_sig_allocacmp_j_1;

always @ (posedge ap_clk) begin
    zext_ln31_reg_575[4:3] <= 2'b00;
    zext_ln31_4_reg_591[4:2] <= 3'b000;
    zext_ln31_7_reg_607[4:3] <= 2'b00;
    zext_ln31_1_reg_653[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //convolve_convolve_Pipeline_VITIS_LOOP_21_2
