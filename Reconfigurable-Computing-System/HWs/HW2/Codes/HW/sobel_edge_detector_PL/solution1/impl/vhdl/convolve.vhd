-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_convolve,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.174000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=524,HLS_SYN_LUT=829,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal kernel_load_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_load_1_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_2_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_load_3_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_4_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kernel_load_5_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_6_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_7_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_load_8_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln14_fu_184_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln14_reg_322 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln31_2_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_2_reg_327 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_done : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_idle : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_ready : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_ce0 : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_ce1 : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_ce0 : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_we0 : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_p_phi_out : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_p_phi_out_ap_vld : STD_LOGIC;
    signal grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_56 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal shl_ln31_fu_189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component convolve_convolve_Pipeline_VITIS_LOOP_21_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        add_ln31_2 : IN STD_LOGIC_VECTOR (4 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce1 : OUT STD_LOGIC;
        x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (2 downto 0);
        i : IN STD_LOGIC_VECTOR (4 downto 0);
        w_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        w : IN STD_LOGIC_VECTOR (31 downto 0);
        p_phi_out : OUT STD_LOGIC_VECTOR (4 downto 0);
        p_phi_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154 : component convolve_convolve_Pipeline_VITIS_LOOP_21_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start,
        ap_done => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_done,
        ap_idle => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_idle,
        ap_ready => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_ready,
        add_ln31_2 => add_ln31_2_reg_327,
        x_address0 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_address0,
        x_ce0 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_ce0,
        x_q0 => x_q0,
        x_address1 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_address1,
        x_ce1 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_ce1,
        x_q1 => x_q1,
        output_r_address0 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_address0,
        output_r_ce0 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_ce0,
        output_r_we0 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_we0,
        output_r_d0 => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_d0,
        empty => trunc_ln14_reg_322,
        i => i_fu_56,
        w_7 => kernel_load_7_reg_309,
        w_8 => kernel_load_8_reg_314,
        w_2 => kernel_load_2_reg_264,
        w_1 => kernel_load_1_reg_259,
        w_5 => kernel_load_5_reg_299,
        w_3 => kernel_load_3_reg_279,
        w_4 => kernel_load_4_reg_284,
        w_6 => kernel_load_6_reg_304,
        w => kernel_load_reg_244,
        p_phi_out => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_p_phi_out,
        p_phi_out_ap_vld => grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_p_phi_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_56 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_fu_56 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_p_phi_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln31_2_reg_327 <= add_ln31_2_fu_195_p2;
                trunc_ln14_reg_322 <= trunc_ln14_fu_184_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_load_1_reg_259 <= kernel_q1;
                kernel_load_2_reg_264 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_load_3_reg_279 <= kernel_q0;
                kernel_load_4_reg_284 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kernel_load_5_reg_299 <= kernel_q0;
                kernel_load_6_reg_304 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                kernel_load_7_reg_309 <= kernel_q0;
                kernel_load_8_reg_314 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                kernel_load_reg_244 <= kernel_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln18_fu_205_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln18_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln31_2_fu_195_p2 <= std_logic_vector(unsigned(shl_ln31_fu_189_p2) + unsigned(i_fu_56));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_done)
    begin
        if ((grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state9, icmp_ln18_fu_205_p2)
    begin
        if (((icmp_ln18_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln18_fu_205_p2)
    begin
        if (((icmp_ln18_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_ap_start_reg;
    icmp_ln18_fu_205_p2 <= "1" when (grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_p_phi_out = ap_const_lv5_4) else "0";

    kernel_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            kernel_address1 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_address0;
    output_r_ce0 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_ce0;
    output_r_d0 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_d0;
    output_r_we0 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_output_r_we0;
    shl_ln31_fu_189_p2 <= std_logic_vector(shift_left(unsigned(i_fu_56),to_integer(unsigned('0' & ap_const_lv5_2(5-1 downto 0)))));
    trunc_ln14_fu_184_p1 <= i_fu_56(3 - 1 downto 0);
    x_address0 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_address0;
    x_address1 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_address1;
    x_ce0 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_ce0;
    x_ce1 <= grp_convolve_Pipeline_VITIS_LOOP_21_2_fu_154_x_ce1;
end behav;
