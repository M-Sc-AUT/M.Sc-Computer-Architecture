-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_cnn_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pad_img0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_ce0 : OUT STD_LOGIC;
    pad_img0_we0 : OUT STD_LOGIC;
    pad_img0_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pad_img0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_1_ce0 : OUT STD_LOGIC;
    pad_img0_1_we0 : OUT STD_LOGIC;
    pad_img0_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pad_img0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_2_ce0 : OUT STD_LOGIC;
    pad_img0_2_we0 : OUT STD_LOGIC;
    pad_img0_2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pad_img0_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_3_ce0 : OUT STD_LOGIC;
    pad_img0_3_we0 : OUT STD_LOGIC;
    pad_img0_3_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pad_img0_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_4_ce0 : OUT STD_LOGIC;
    pad_img0_4_we0 : OUT STD_LOGIC;
    pad_img0_4_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pad_img0_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_5_ce0 : OUT STD_LOGIC;
    pad_img0_5_we0 : OUT STD_LOGIC;
    pad_img0_5_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pad_img0_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_6_ce0 : OUT STD_LOGIC;
    pad_img0_6_we0 : OUT STD_LOGIC;
    pad_img0_6_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of cnn_cnn_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv13_4A : STD_LOGIC_VECTOR (12 downto 0) := "0000001001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln69_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_237_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln69_fu_211_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln69_reg_246 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln69_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arrayinit_curidx_fu_58 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln69_fu_194_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_arrayinit_curidx_load : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln69_fu_172_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln69_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln69_fu_172_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln69_fu_172_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_urem_6ns_4ns_3_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_6ns_8ns_13_1_1_U1 : component cnn_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln69_fu_172_p0,
        din1 => mul_ln69_fu_172_p1,
        dout => mul_ln69_fu_172_p2);

    urem_6ns_4ns_3_10_1_U2 : component cnn_urem_6ns_4ns_3_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_arrayinit_curidx_load,
        din1 => grp_fu_188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    arrayinit_curidx_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then 
                    arrayinit_curidx_fu_58 <= add_ln69_fu_194_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    arrayinit_curidx_fu_58 <= ap_const_lv6_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                tmp_reg_237 <= mul_ln69_fu_172_p2(12 downto 9);
                tmp_reg_237_pp0_iter1_reg <= tmp_reg_237;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                tmp_reg_237_pp0_iter2_reg <= tmp_reg_237_pp0_iter1_reg;
                tmp_reg_237_pp0_iter3_reg <= tmp_reg_237_pp0_iter2_reg;
                tmp_reg_237_pp0_iter4_reg <= tmp_reg_237_pp0_iter3_reg;
                tmp_reg_237_pp0_iter5_reg <= tmp_reg_237_pp0_iter4_reg;
                tmp_reg_237_pp0_iter6_reg <= tmp_reg_237_pp0_iter5_reg;
                tmp_reg_237_pp0_iter7_reg <= tmp_reg_237_pp0_iter6_reg;
                tmp_reg_237_pp0_iter8_reg <= tmp_reg_237_pp0_iter7_reg;
                tmp_reg_237_pp0_iter9_reg <= tmp_reg_237_pp0_iter8_reg;
                trunc_ln69_reg_246 <= trunc_ln69_fu_211_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln69_fu_194_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_arrayinit_curidx_load) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln69_fu_200_p2)
    begin
        if (((icmp_ln69_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_arrayinit_curidx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, arrayinit_curidx_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_arrayinit_curidx_load <= ap_const_lv6_1;
        else 
            ap_sig_allocacmp_arrayinit_curidx_load <= arrayinit_curidx_fu_58;
        end if; 
    end process;

    grp_fu_188_p1 <= ap_const_lv6_7(4 - 1 downto 0);
    icmp_ln69_fu_200_p2 <= "1" when (ap_sig_allocacmp_arrayinit_curidx_load = ap_const_lv6_21) else "0";
    mul_ln69_fu_172_p0 <= mul_ln69_fu_172_p00(6 - 1 downto 0);
    mul_ln69_fu_172_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_arrayinit_curidx_load),13));
    mul_ln69_fu_172_p1 <= ap_const_lv13_4A(8 - 1 downto 0);
    pad_img0_1_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_1_ce0 <= ap_const_logic_1;
        else 
            pad_img0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_1_d0 <= ap_const_lv24_0;

    pad_img0_1_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln69_reg_246 = ap_const_lv3_1))) then 
            pad_img0_1_we0 <= ap_const_logic_1;
        else 
            pad_img0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_2_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_2_ce0 <= ap_const_logic_1;
        else 
            pad_img0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_2_d0 <= ap_const_lv24_0;

    pad_img0_2_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln69_reg_246 = ap_const_lv3_2))) then 
            pad_img0_2_we0 <= ap_const_logic_1;
        else 
            pad_img0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_3_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_3_ce0 <= ap_const_logic_1;
        else 
            pad_img0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_3_d0 <= ap_const_lv24_0;

    pad_img0_3_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln69_reg_246 = ap_const_lv3_3))) then 
            pad_img0_3_we0 <= ap_const_logic_1;
        else 
            pad_img0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_4_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_4_ce0 <= ap_const_logic_1;
        else 
            pad_img0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_4_d0 <= ap_const_lv24_0;

    pad_img0_4_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln69_reg_246 = ap_const_lv3_4))) then 
            pad_img0_4_we0 <= ap_const_logic_1;
        else 
            pad_img0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_5_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_5_ce0 <= ap_const_logic_1;
        else 
            pad_img0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_5_d0 <= ap_const_lv24_0;

    pad_img0_5_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln69_reg_246 = ap_const_lv3_5))) then 
            pad_img0_5_we0 <= ap_const_logic_1;
        else 
            pad_img0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_6_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_6_ce0 <= ap_const_logic_1;
        else 
            pad_img0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_6_d0 <= ap_const_lv24_0;

    pad_img0_6_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((trunc_ln69_reg_246 = ap_const_lv3_6) or (trunc_ln69_reg_246 = ap_const_lv3_7)))) then 
            pad_img0_6_we0 <= ap_const_logic_1;
        else 
            pad_img0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_address0 <= zext_ln69_fu_215_p1(6 - 1 downto 0);

    pad_img0_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            pad_img0_ce0 <= ap_const_logic_1;
        else 
            pad_img0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_d0 <= ap_const_lv24_0;

    pad_img0_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln69_reg_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln69_reg_246 = ap_const_lv3_0))) then 
            pad_img0_we0 <= ap_const_logic_1;
        else 
            pad_img0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln69_fu_211_p1 <= grp_fu_188_p2(3 - 1 downto 0);
    zext_ln69_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_237_pp0_iter9_reg),64));
end behav;
