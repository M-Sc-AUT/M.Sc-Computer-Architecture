-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cnn_dense_dense_weights_1_7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 392
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of cnn_dense_dense_weights_1_7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "111011110", 1 => "110101100", 2 => "101101010", 3 => "111011101", 
    4 => "101110100", 5 => "000001100", 6 => "111110110", 7 => "111011100", 
    8 => "111100001", 9 => "110101110", 10 => "111110111", 11 => "111001000", 
    12 => "111010100", 13 => "111000000", 14 => "111010011", 15 => "111000100", 
    16 => "111001110", 17 => "110111110", 18 => "111110001", 19 => "000001101", 
    20 => "111010011", 21 => "110110100", 22 => "111100111", 23 => "111101011", 
    24 => "111000000", 25 => "000001110", 26 => "000110101", 27 => "000000110", 
    28 => "111011010", 29 => "000001000", 30 => "000011000", 31 => "000010100", 
    32 => "000100011", 33 => "000011100", 34 => "111100000", 35 => "111111100", 
    36 => "111100110", 37 => "111110000", 38 => "000101000", 39 => "000010101", 
    40 => "111110000", 41 => "111110110", 42 => "111110001", 43 => "111111000", 
    44 => "111001100", 45 => "000010000", 46 => "000000000", 47 => "111110011", 
    48 => "111011101", 49 => "000001001", 50 => "111111011", 51 => "111110000", 
    52 => "111111101", 53 => "000010110", 54 => "111110011", 55 => "111001101", 
    56 => "111100001", 57 => "000000100", 58 => "111100000", 59 => "000001000", 
    60 => "111111110", 61 => "111010100", 62 => "000100001", 63 => "111000000", 
    64 => "000000100", 65 => "000011000", 66 => "111111110", 67 => "111100111", 
    68 => "111101010", 69 => "111000101", 70 => "110110010", 71 => "000000110", 
    72 => "111110110", 73 => "000011001", 74 => "000011000", 75 => "111001010", 
    76 => "000000010", 77 => "111110100", 78 => "111101011", 79 => "111011010", 
    80 => "000011010", 81 => "000000100", 82 => "111000001", 83 => "110110100", 
    84 => "000100001", 85 => "111101110", 86 => "111001001", 87 => "111110100", 
    88 => "111101010", 89 => "110111010", 90 => "111100101", 91 => "111010000", 
    92 => "000011000", 93 => "000001010", 94 => "000100111", 95 => "000000010", 
    96 => "111101011", 97 => "111011011", 98 => "000001001", 99 => "000001011", 
    100 => "000001101", 101 => "111110111", 102 => "000000110", 103 => "000100011", 
    104 => "000100001", 105 => "000010000", 106 => "111111010", 107 => "111101111", 
    108 => "111110100", 109 => "000001111", 110 => "000000001", 111 => "000001101", 
    112 => "001000010", 113 => "001001010", 114 => "001010011", 115 => "000111110", 
    116 => "111111101", 117 => "111110111", 118 => "000010011", 119 => "111110101", 
    120 => "000101011", 121 => "000110000", 122 => "000100001", 123 => "111111001", 
    124 => "110110010", 125 => "111001111", 126 => "000000111", 127 => "000010111", 
    128 => "000100000", 129 => "000101001", 130 => "000001100", 131 => "110110111", 
    132 => "111011100", 133 => "000001100", 134 => "001000000", 135 => "000011010", 
    136 => "000000011", 137 => "000101001", 138 => "111110111", 139 => "111001100", 
    140 => "000011000", 141 => "000100110", 142 => "000000111", 143 => "111101111", 
    144 => "000010001", 145 => "111100101", 146 => "111000100", 147 => "000011001", 
    148 => "000000001", 149 => "111111000", 150 => "111010010", 151 => "000010010", 
    152 => "111100101", 153 => "111000001", 154 => "111100101", 155 => "000000010", 
    156 => "111001011", 157 => "111100101", 158 => "000001000", 159 => "111111101", 
    160 => "000000110", 161 => "111110100", 162 => "111101011", 163 => "110110100", 
    164 => "111011010", 165 => "000100010", 166 => "000001011", 167 => "111001110", 
    168 => "111101100", 169 => "111100011", 170 => "111000010", 171 => "111110011", 
    172 => "111100010", 173 => "111110100", 174 => "000010101", 175 => "000000100", 
    176 => "111010101", 177 => "111100001", 178 => "111110000", 179 => "111011100", 
    180 => "111001010", 181 => "111011101", 182 => "000010100", 183 => "111110010", 
    184 => "111101111", 185 => "111100111", 186 => "111110000", 187 => "111101001", 
    188 => "111111011", 189 => "000001101", 190 => "000001001", 191 => "111101001", 
    192 => "111101011", 193 => "111110001", 194 => "000000101", 195 => "111111011", 
    196 => "000000000", 197 => "110101001", 198 => "110101110", 199 => "111001111", 
    200 => "111000110", 201 => "111100111", 202 => "000100011", 203 => "111101010", 
    204 => "111111001", 205 => "000010011", 206 => "111111001", 207 => "111111101", 
    208 => "110011000", 209 => "111001000", 210 => "000001000", 211 => "001011110", 
    212 => "000110001", 213 => "000011010", 214 => "111111001", 215 => "111100101", 
    216 => "110101001", 217 => "001000110", 218 => "010010010", 219 => "001001000", 
    220 => "111111010", 221 => "111110110", 222 => "000001100", 223 => "111001110", 
    224 => "000110100", 225 => "000111110", 226 => "111110101", 227 => "111111011", 
    228 => "000010010", 229 => "000000110", 230 => "111010110", 231 => "000001110", 
    232 => "110111011", 233 => "111011000", 234 => "111000101", 235 => "000010110", 
    236 => "000000011", 237 => "111101110", 238 => "111001111", 239 => "111011010", 
    240 => "111010100", 241 => "111101011", 242 => "000100100", 243 => "000101100", 
    244 => "111101011", 245 => "111010100", 246 => "000001011", 247 => "111101110", 
    248 => "111100101", 249 => "000001011", 250 => "000101001", 251 => "111101001", 
    252 => "111100110", 253 => "000100001", 254 => "001001101", 255 => "111001111", 
    256 => "000010100", 257 => "000100110", 258 => "111111100", 259 => "000001100", 
    260 => "001010010", 261 => "001000111", 262 => "111110101", 263 => "111101110", 
    264 => "000001001", 265 => "111000001", 266 => "111100011", 267 => "111111110", 
    268 => "111110011", 269 => "000011001", 270 => "111111000", 271 => "111101111", 
    272 => "111011010", 273 => "111011110", 274 => "110111011", 275 => "000011001", 
    276 => "000111110", 277 => "111110111", 278 => "111101011", 279 => "111100000", 
    280 => "000001101", 281 => "111111001", 282 => "001001100", 283 => "000100100", 
    284 => "000000110", 285 => "000001011", 286 => "111011100", 287 => "000000000", 
    288 => "000101110", 289 => "001000110", 290 => "000110110", 291 => "000010110", 
    292 => "000101110", 293 => "111110101", 294 => "000010101", 295 => "111001011", 
    296 => "110001101", 297 => "111001001", 298 => "111000010", 299 => "000000110", 
    300 => "000000011", 301 => "000100110", 302 => "110101111", 303 => "111011101", 
    304 => "111100001", 305 => "111110001", 306 => "111001001", 307 => "110011011", 
    308 => "000000100", 309 => "111101101", 310 => "111100011", 311 => "111101111", 
    312 => "111111010", 313 => "111011010", 314 => "110110100", 315 => "111011011", 
    316 => "111110110", 317 => "111110111", 318 => "000010110", 319 => "000011110", 
    320 => "000010110", 321 => "111100101", 322 => "111111100", 323 => "111111101", 
    324 => "000000101", 325 => "000100101", 326 => "000011001", 327 => "000011101", 
    328 => "111010000", 329 => "111011000", 330 => "000011011", 331 => "000001111", 
    332 => "111111000", 333 => "000011111", 334 => "000000011", 335 => "111100100", 
    336 => "000000011", 337 => "000111111", 338 => "111000011", 339 => "111000111", 
    340 => "000010110", 341 => "000110011", 342 => "111101010", 343 => "111110011", 
    344 => "001000101", 345 => "111000000", 346 => "111101100", 347 => "000001101", 
    348 => "111111011", 349 => "111111011", 350 => "000000010", 351 => "001101010", 
    352 => "111100001", 353 => "000000111", 354 => "000001101", 355 => "000100001", 
    356 => "111011001", 357 => "111110000", 358 => "000011101", 359 => "111011011", 
    360 => "111001111", 361 => "111111010", 362 => "000000101", 363 => "111001010", 
    364 => "111010001", 365 => "111101101", 366 => "111010011", 367 => "111101101", 
    368 => "111011001", 369 => "111011111", 370 => "110100111", 371 => "000001111", 
    372 => "000000001", 373 => "110110010", 374 => "111010000", 375 => "111011000", 
    376 => "111101110", 377 => "111000011", 378 => "000011111", 379 => "000100000", 
    380 => "111110100", 381 => "111100111", 382 => "111100011", 383 => "000001010", 
    384 => "111101001", 385 => "111011100", 386 => "001010010", 387 => "000011010", 
    388 => "000010011", 389 => "000010000", 390 => "000110001", 391 => "000100000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

