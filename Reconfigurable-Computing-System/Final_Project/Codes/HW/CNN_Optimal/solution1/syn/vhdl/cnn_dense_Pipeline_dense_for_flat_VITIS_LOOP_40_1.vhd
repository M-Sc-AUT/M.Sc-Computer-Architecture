-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_to_dense_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_to_dense_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_0_empty_n : IN STD_LOGIC;
    flat_to_dense_streams_0_read : OUT STD_LOGIC;
    mul_ln36 : IN STD_LOGIC_VECTOR (9 downto 0);
    dense_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_array_ce0 : OUT STD_LOGIC;
    dense_array_we0 : OUT STD_LOGIC;
    dense_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_array_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_array_ce1 : OUT STD_LOGIC;
    dense_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7A8 : STD_LOGIC_VECTOR (10 downto 0) := "11110101000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln36_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dense_weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_weights_ce0 : STD_LOGIC;
    signal dense_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flat_to_dense_streams_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln36_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_322_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_193_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_330_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_330_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_330_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_330_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_213_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_336 : STD_LOGIC_VECTOR (9 downto 0);
    signal dense_weights_load_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_addr_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_addr_reg_357_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_addr_reg_357_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_addr_reg_357_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_addr_reg_357_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_addr_reg_357_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_addr_reg_357_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_load_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_123_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln45_2_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_62 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln40_fu_219_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_d_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln36_1_fu_201_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln36_1_fu_163_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal p_07_fu_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln36_fu_209_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_252_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_245_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln45_fu_259_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln45_fu_263_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln45_1_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln45_1_fu_272_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_131_ce : STD_LOGIC;
    signal grp_fu_135_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_401 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1_dense_weights_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dense_weights_U : component cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1_dense_weights_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 7840,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_weights_address0,
        ce0 => dense_weights_ce0,
        q0 => dense_weights_q0);

    fadd_32ns_32ns_32_5_full_dsp_1_U540 : component cnn_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_array_load_reg_368,
        din1 => mul7_reg_363,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U541 : component cnn_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_weights_load_reg_342,
        din1 => grp_fu_135_p1,
        ce => grp_fu_135_ce,
        dout => grp_fu_135_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln36_fu_157_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    d_fu_62 <= add_ln40_fu_219_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    d_fu_62 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln36_fu_157_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_66 <= select_ln36_1_fu_201_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_66 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln36_fu_157_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_70 <= add_ln36_1_fu_163_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_70 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_reg_373 <= grp_fu_131_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                dense_array_addr_reg_357 <= zext_ln40_fu_291_p1(4 - 1 downto 0);
                dense_array_addr_reg_357_pp0_iter10_reg <= dense_array_addr_reg_357_pp0_iter9_reg;
                dense_array_addr_reg_357_pp0_iter11_reg <= dense_array_addr_reg_357_pp0_iter10_reg;
                dense_array_addr_reg_357_pp0_iter6_reg <= dense_array_addr_reg_357;
                dense_array_addr_reg_357_pp0_iter7_reg <= dense_array_addr_reg_357_pp0_iter6_reg;
                dense_array_addr_reg_357_pp0_iter8_reg <= dense_array_addr_reg_357_pp0_iter7_reg;
                dense_array_addr_reg_357_pp0_iter9_reg <= dense_array_addr_reg_357_pp0_iter8_reg;
                dense_weights_load_reg_342 <= dense_weights_q0;
                icmp_ln36_reg_322_pp0_iter10_reg <= icmp_ln36_reg_322_pp0_iter9_reg;
                icmp_ln36_reg_322_pp0_iter11_reg <= icmp_ln36_reg_322_pp0_iter10_reg;
                icmp_ln36_reg_322_pp0_iter2_reg <= icmp_ln36_reg_322_pp0_iter1_reg;
                icmp_ln36_reg_322_pp0_iter3_reg <= icmp_ln36_reg_322_pp0_iter2_reg;
                icmp_ln36_reg_322_pp0_iter4_reg <= icmp_ln36_reg_322_pp0_iter3_reg;
                icmp_ln36_reg_322_pp0_iter5_reg <= icmp_ln36_reg_322_pp0_iter4_reg;
                icmp_ln36_reg_322_pp0_iter6_reg <= icmp_ln36_reg_322_pp0_iter5_reg;
                icmp_ln36_reg_322_pp0_iter7_reg <= icmp_ln36_reg_322_pp0_iter6_reg;
                icmp_ln36_reg_322_pp0_iter8_reg <= icmp_ln36_reg_322_pp0_iter7_reg;
                icmp_ln36_reg_322_pp0_iter9_reg <= icmp_ln36_reg_322_pp0_iter8_reg;
                mul7_reg_363 <= grp_fu_135_p2;
                select_ln36_reg_330_pp0_iter2_reg <= select_ln36_reg_330_pp0_iter1_reg;
                select_ln36_reg_330_pp0_iter3_reg <= select_ln36_reg_330_pp0_iter2_reg;
                select_ln36_reg_330_pp0_iter4_reg <= select_ln36_reg_330_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_336 <= empty_fu_213_p2;
                icmp_ln36_reg_322 <= icmp_ln36_fu_157_p2;
                icmp_ln36_reg_322_pp0_iter1_reg <= icmp_ln36_reg_322;
                or_ln36_reg_326 <= or_ln36_fu_187_p2;
                or_ln36_reg_326_pp0_iter1_reg <= or_ln36_reg_326;
                select_ln36_reg_330 <= select_ln36_fu_193_p3;
                select_ln36_reg_330_pp0_iter1_reg <= select_ln36_reg_330;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                dense_array_load_reg_368 <= dense_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln36_reg_326_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                p_07_fu_74 <= flat_to_dense_streams_0_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_1_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln36_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv8_1));
    add_ln40_fu_219_p2 <= std_logic_vector(unsigned(select_ln36_fu_193_p3) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_272_p2 <= std_logic_vector(unsigned(add_ln45_fu_263_p2) + unsigned(zext_ln45_1_fu_269_p1));
    add_ln45_fu_263_p2 <= std_logic_vector(unsigned(tmp_fu_245_p3) + unsigned(zext_ln45_fu_259_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter2));
    end process;


    ap_block_state2_pp0_stage0_iter2_assign_proc : process(flat_to_dense_streams_0_empty_n, or_ln36_reg_326_pp0_iter1_reg)
    begin
                ap_block_state2_pp0_stage0_iter2 <= ((or_ln36_reg_326_pp0_iter1_reg = ap_const_lv1_1) and (flat_to_dense_streams_0_empty_n = ap_const_logic_0));
    end process;


    ap_condition_401_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln36_reg_322)
    begin
                ap_condition_401 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_reg_322 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln36_fu_157_p2)
    begin
        if (((icmp_ln36_fu_157_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_first_iter_0_phi_fu_123_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_401)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_401)) then 
                ap_phi_mux_first_iter_0_phi_fu_123_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_0_phi_fu_123_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_0_phi_fu_123_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_0_phi_fu_123_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_d_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, d_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_d_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_d_load <= d_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_70;
        end if; 
    end process;

    dense_array_address0 <= dense_array_addr_reg_357_pp0_iter11_reg;
    dense_array_address1 <= zext_ln40_fu_291_p1(4 - 1 downto 0);

    dense_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            dense_array_ce0 <= ap_const_logic_1;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dense_array_ce1 <= ap_const_logic_1;
        else 
            dense_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dense_array_d0 <= add_reg_373;

    dense_array_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_322_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln36_reg_322_pp0_iter11_reg = ap_const_lv1_0))) then 
            dense_array_we0 <= ap_const_logic_1;
        else 
            dense_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_weights_address0 <= zext_ln45_2_fu_278_p1(13 - 1 downto 0);

    dense_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_weights_ce0 <= ap_const_logic_1;
        else 
            dense_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_213_p2 <= std_logic_vector(unsigned(mul_ln36) + unsigned(zext_ln36_fu_209_p1));

    flat_to_dense_streams_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, flat_to_dense_streams_0_empty_n, or_ln36_reg_326_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln36_reg_326_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            flat_to_dense_streams_0_blk_n <= flat_to_dense_streams_0_empty_n;
        else 
            flat_to_dense_streams_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    flat_to_dense_streams_0_read_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln36_reg_326_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln36_reg_326_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            flat_to_dense_streams_0_read <= ap_const_logic_1;
        else 
            flat_to_dense_streams_0_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_131_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_131_ce <= ap_const_logic_1;
        else 
            grp_fu_131_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_135_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_135_ce <= ap_const_logic_1;
        else 
            grp_fu_135_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_135_p1 <= p_07_fu_74;
    icmp_ln36_fu_157_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_7A8) else "0";
    icmp_ln40_fu_181_p2 <= "1" when (ap_sig_allocacmp_d_load = ap_const_lv4_A) else "0";
    or_ln36_fu_187_p2 <= (icmp_ln40_fu_181_p2 or ap_phi_mux_first_iter_0_phi_fu_123_p4);
    select_ln36_1_fu_201_p3 <= 
        add_ln36_fu_175_p2 when (icmp_ln40_fu_181_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln36_fu_193_p3 <= 
        ap_const_lv4_0 when (icmp_ln40_fu_181_p2(0) = '1') else 
        ap_sig_allocacmp_d_load;
    tmp_1_fu_252_p3 <= (empty_reg_336 & ap_const_lv1_0);
    tmp_fu_245_p3 <= (empty_reg_336 & ap_const_lv3_0);
    zext_ln36_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_201_p3),10));
    zext_ln40_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_330_pp0_iter4_reg),64));
    zext_ln45_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_330),13));
    zext_ln45_2_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_272_p2),64));
    zext_ln45_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_252_p3),13));
end behav;
