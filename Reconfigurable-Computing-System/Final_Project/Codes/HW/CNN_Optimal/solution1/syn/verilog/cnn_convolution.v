// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_convolution (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pad_img_address0,
        pad_img_ce0,
        pad_img_q0,
        pad_img_address1,
        pad_img_ce1,
        pad_img_q1,
        filter,
        conv_to_pool_streams_1_din,
        conv_to_pool_streams_1_num_data_valid,
        conv_to_pool_streams_1_fifo_cap,
        conv_to_pool_streams_1_full_n,
        conv_to_pool_streams_1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] pad_img_address0;
output   pad_img_ce0;
input  [23:0] pad_img_q0;
output  [10:0] pad_img_address1;
output   pad_img_ce1;
input  [23:0] pad_img_q1;
input  [1:0] filter;
output  [23:0] conv_to_pool_streams_1_din;
input  [10:0] conv_to_pool_streams_1_num_data_valid;
input  [10:0] conv_to_pool_streams_1_fifo_cap;
input   conv_to_pool_streams_1_full_n;
output   conv_to_pool_streams_1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_to_pool_streams_1_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] conv_biases_address0;
reg    conv_biases_ce0;
wire   [5:0] conv_biases_q0;
wire   [1:0] conv_weights_0_0_address0;
reg    conv_weights_0_0_ce0;
wire   [7:0] conv_weights_0_0_q0;
wire   [1:0] conv_weights_0_1_address0;
reg    conv_weights_0_1_ce0;
wire   [6:0] conv_weights_0_1_q0;
wire   [1:0] conv_weights_0_2_address0;
reg    conv_weights_0_2_ce0;
wire   [7:0] conv_weights_0_2_q0;
wire   [1:0] conv_weights_0_3_address0;
reg    conv_weights_0_3_ce0;
wire   [7:0] conv_weights_0_3_q0;
wire   [1:0] conv_weights_0_4_address0;
reg    conv_weights_0_4_ce0;
wire   [8:0] conv_weights_0_4_q0;
wire   [1:0] conv_weights_0_5_address0;
reg    conv_weights_0_5_ce0;
wire   [7:0] conv_weights_0_5_q0;
wire   [1:0] conv_weights_0_6_address0;
reg    conv_weights_0_6_ce0;
wire   [8:0] conv_weights_0_6_q0;
wire   [1:0] conv_weights_1_0_address0;
reg    conv_weights_1_0_ce0;
wire   [7:0] conv_weights_1_0_q0;
wire   [1:0] conv_weights_1_1_address0;
reg    conv_weights_1_1_ce0;
wire   [8:0] conv_weights_1_1_q0;
wire   [1:0] conv_weights_1_2_address0;
reg    conv_weights_1_2_ce0;
wire   [7:0] conv_weights_1_2_q0;
wire   [1:0] conv_weights_1_3_address0;
reg    conv_weights_1_3_ce0;
wire   [8:0] conv_weights_1_3_q0;
wire   [1:0] conv_weights_1_4_address0;
reg    conv_weights_1_4_ce0;
wire   [7:0] conv_weights_1_4_q0;
wire   [1:0] conv_weights_1_5_address0;
reg    conv_weights_1_5_ce0;
wire   [8:0] conv_weights_1_5_q0;
wire   [1:0] conv_weights_1_6_address0;
reg    conv_weights_1_6_ce0;
wire   [7:0] conv_weights_1_6_q0;
wire   [1:0] conv_weights_2_0_address0;
reg    conv_weights_2_0_ce0;
wire   [7:0] conv_weights_2_0_q0;
wire   [1:0] conv_weights_2_1_address0;
reg    conv_weights_2_1_ce0;
wire   [8:0] conv_weights_2_1_q0;
wire   [1:0] conv_weights_2_2_address0;
reg    conv_weights_2_2_ce0;
wire   [7:0] conv_weights_2_2_q0;
wire   [1:0] conv_weights_2_3_address0;
reg    conv_weights_2_3_ce0;
wire   [7:0] conv_weights_2_3_q0;
wire   [1:0] conv_weights_2_4_address0;
reg    conv_weights_2_4_ce0;
wire   [8:0] conv_weights_2_4_q0;
wire   [1:0] conv_weights_2_5_address0;
reg    conv_weights_2_5_ce0;
wire   [7:0] conv_weights_2_5_q0;
wire   [1:0] conv_weights_2_6_address0;
reg    conv_weights_2_6_ce0;
wire   [7:0] conv_weights_2_6_q0;
wire   [1:0] conv_weights_3_0_address0;
reg    conv_weights_3_0_ce0;
wire   [7:0] conv_weights_3_0_q0;
wire   [1:0] conv_weights_3_1_address0;
reg    conv_weights_3_1_ce0;
wire   [8:0] conv_weights_3_1_q0;
wire   [1:0] conv_weights_3_2_address0;
reg    conv_weights_3_2_ce0;
wire   [8:0] conv_weights_3_2_q0;
wire   [1:0] conv_weights_3_3_address0;
reg    conv_weights_3_3_ce0;
wire   [7:0] conv_weights_3_3_q0;
wire   [1:0] conv_weights_3_4_address0;
reg    conv_weights_3_4_ce0;
wire   [8:0] conv_weights_3_4_q0;
wire   [1:0] conv_weights_3_5_address0;
reg    conv_weights_3_5_ce0;
wire   [8:0] conv_weights_3_5_q0;
wire   [1:0] conv_weights_3_6_address0;
reg    conv_weights_3_6_ce0;
wire   [7:0] conv_weights_3_6_q0;
wire   [1:0] conv_weights_4_0_address0;
reg    conv_weights_4_0_ce0;
wire   [7:0] conv_weights_4_0_q0;
wire   [1:0] conv_weights_4_1_address0;
reg    conv_weights_4_1_ce0;
wire   [7:0] conv_weights_4_1_q0;
wire   [1:0] conv_weights_4_2_address0;
reg    conv_weights_4_2_ce0;
wire   [8:0] conv_weights_4_2_q0;
wire   [1:0] conv_weights_4_3_address0;
reg    conv_weights_4_3_ce0;
wire   [8:0] conv_weights_4_3_q0;
wire   [1:0] conv_weights_4_4_address0;
reg    conv_weights_4_4_ce0;
wire   [7:0] conv_weights_4_4_q0;
wire   [1:0] conv_weights_4_5_address0;
reg    conv_weights_4_5_ce0;
wire   [8:0] conv_weights_4_5_q0;
wire   [1:0] conv_weights_4_6_address0;
reg    conv_weights_4_6_ce0;
wire   [8:0] conv_weights_4_6_q0;
wire   [1:0] conv_weights_5_0_address0;
reg    conv_weights_5_0_ce0;
wire   [8:0] conv_weights_5_0_q0;
wire   [1:0] conv_weights_5_1_address0;
reg    conv_weights_5_1_ce0;
wire   [8:0] conv_weights_5_1_q0;
wire   [1:0] conv_weights_5_2_address0;
reg    conv_weights_5_2_ce0;
wire   [8:0] conv_weights_5_2_q0;
wire   [1:0] conv_weights_5_3_address0;
reg    conv_weights_5_3_ce0;
wire   [8:0] conv_weights_5_3_q0;
wire   [1:0] conv_weights_5_4_address0;
reg    conv_weights_5_4_ce0;
wire   [8:0] conv_weights_5_4_q0;
wire   [1:0] conv_weights_5_5_address0;
reg    conv_weights_5_5_ce0;
wire   [6:0] conv_weights_5_5_q0;
wire   [1:0] conv_weights_5_6_address0;
reg    conv_weights_5_6_ce0;
wire   [8:0] conv_weights_5_6_q0;
wire   [1:0] conv_weights_6_0_address0;
reg    conv_weights_6_0_ce0;
wire   [8:0] conv_weights_6_0_q0;
wire   [1:0] conv_weights_6_1_address0;
reg    conv_weights_6_1_ce0;
wire   [8:0] conv_weights_6_1_q0;
wire   [1:0] conv_weights_6_2_address0;
reg    conv_weights_6_2_ce0;
wire   [9:0] conv_weights_6_2_q0;
wire   [1:0] conv_weights_6_3_address0;
reg    conv_weights_6_3_ce0;
wire   [8:0] conv_weights_6_3_q0;
wire   [1:0] conv_weights_6_4_address0;
reg    conv_weights_6_4_ce0;
wire   [8:0] conv_weights_6_4_q0;
wire   [1:0] conv_weights_6_5_address0;
reg    conv_weights_6_5_ce0;
wire   [8:0] conv_weights_6_5_q0;
wire   [1:0] conv_weights_6_6_address0;
reg    conv_weights_6_6_ce0;
wire   [8:0] conv_weights_6_6_q0;
reg   [5:0] conv_biases_load_reg_1192;
wire    ap_CS_fsm_state2;
reg   [7:0] conv_weights_0_0_load_reg_1197;
reg   [6:0] conv_weights_0_1_load_reg_1202;
reg   [7:0] conv_weights_0_2_load_reg_1207;
reg   [7:0] conv_weights_0_3_load_reg_1212;
reg   [8:0] conv_weights_0_4_load_reg_1217;
reg   [7:0] conv_weights_0_5_load_reg_1222;
reg   [8:0] conv_weights_0_6_load_reg_1227;
reg   [7:0] conv_weights_1_0_load_reg_1232;
reg   [8:0] conv_weights_1_1_load_reg_1237;
reg   [7:0] conv_weights_1_2_load_reg_1242;
reg   [8:0] conv_weights_1_3_load_reg_1247;
reg   [7:0] conv_weights_1_4_load_reg_1252;
reg   [8:0] conv_weights_1_5_load_reg_1257;
reg   [7:0] conv_weights_1_6_load_reg_1262;
reg   [7:0] conv_weights_2_0_load_reg_1267;
reg   [8:0] conv_weights_2_1_load_reg_1272;
reg   [7:0] conv_weights_2_2_load_reg_1277;
reg   [7:0] conv_weights_2_3_load_reg_1282;
reg   [8:0] conv_weights_2_4_load_reg_1287;
reg   [7:0] conv_weights_2_5_load_reg_1292;
reg   [7:0] conv_weights_2_6_load_reg_1297;
reg   [7:0] conv_weights_3_0_load_reg_1302;
reg   [8:0] conv_weights_3_1_load_reg_1307;
reg   [8:0] conv_weights_3_2_load_reg_1312;
reg   [7:0] conv_weights_3_3_load_reg_1317;
reg   [8:0] conv_weights_3_4_load_reg_1322;
reg   [8:0] conv_weights_3_5_load_reg_1327;
reg   [7:0] conv_weights_3_6_load_reg_1332;
reg   [7:0] conv_weights_4_0_load_reg_1337;
reg   [7:0] conv_weights_4_1_load_reg_1342;
reg   [8:0] conv_weights_4_2_load_reg_1347;
reg   [8:0] conv_weights_4_3_load_reg_1352;
reg   [7:0] conv_weights_4_4_load_reg_1357;
reg   [8:0] conv_weights_4_5_load_reg_1362;
reg   [8:0] conv_weights_4_6_load_reg_1367;
reg   [8:0] conv_weights_5_0_load_reg_1372;
reg   [8:0] conv_weights_5_1_load_reg_1377;
reg   [8:0] conv_weights_5_2_load_reg_1382;
reg   [8:0] conv_weights_5_3_load_reg_1387;
reg   [8:0] conv_weights_5_4_load_reg_1392;
reg   [6:0] conv_weights_5_5_load_reg_1397;
reg   [8:0] conv_weights_5_6_load_reg_1402;
reg   [8:0] conv_weights_6_0_load_reg_1407;
reg   [8:0] conv_weights_6_1_load_reg_1412;
reg   [9:0] conv_weights_6_2_load_reg_1417;
reg   [8:0] conv_weights_6_3_load_reg_1422;
reg   [8:0] conv_weights_6_4_load_reg_1427;
reg   [8:0] conv_weights_6_5_load_reg_1432;
reg   [8:0] conv_weights_6_6_load_reg_1437;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_idle;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_ready;
wire   [10:0] grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address0;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce0;
wire   [10:0] grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address1;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce1;
wire   [23:0] grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_din;
wire    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write;
reg    grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] idxprom_fu_888_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg = 1'b0;
end

cnn_convolution_conv_biases_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_biases_address0),
    .ce0(conv_biases_ce0),
    .q0(conv_biases_q0)
);

cnn_convolution_conv_weights_0_0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_0_address0),
    .ce0(conv_weights_0_0_ce0),
    .q0(conv_weights_0_0_q0)
);

cnn_convolution_conv_weights_0_1_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_1_address0),
    .ce0(conv_weights_0_1_ce0),
    .q0(conv_weights_0_1_q0)
);

cnn_convolution_conv_weights_0_2_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_2_address0),
    .ce0(conv_weights_0_2_ce0),
    .q0(conv_weights_0_2_q0)
);

cnn_convolution_conv_weights_0_3_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_3_address0),
    .ce0(conv_weights_0_3_ce0),
    .q0(conv_weights_0_3_q0)
);

cnn_convolution_conv_weights_0_4_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_4_address0),
    .ce0(conv_weights_0_4_ce0),
    .q0(conv_weights_0_4_q0)
);

cnn_convolution_conv_weights_0_5_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_5_address0),
    .ce0(conv_weights_0_5_ce0),
    .q0(conv_weights_0_5_q0)
);

cnn_convolution_conv_weights_0_6_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_6_address0),
    .ce0(conv_weights_0_6_ce0),
    .q0(conv_weights_0_6_q0)
);

cnn_convolution_conv_weights_1_0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_0_address0),
    .ce0(conv_weights_1_0_ce0),
    .q0(conv_weights_1_0_q0)
);

cnn_convolution_conv_weights_1_1_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_1_address0),
    .ce0(conv_weights_1_1_ce0),
    .q0(conv_weights_1_1_q0)
);

cnn_convolution_conv_weights_1_2_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_2_address0),
    .ce0(conv_weights_1_2_ce0),
    .q0(conv_weights_1_2_q0)
);

cnn_convolution_conv_weights_1_3_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_3_address0),
    .ce0(conv_weights_1_3_ce0),
    .q0(conv_weights_1_3_q0)
);

cnn_convolution_conv_weights_1_4_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_4_address0),
    .ce0(conv_weights_1_4_ce0),
    .q0(conv_weights_1_4_q0)
);

cnn_convolution_conv_weights_1_5_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_5_address0),
    .ce0(conv_weights_1_5_ce0),
    .q0(conv_weights_1_5_q0)
);

cnn_convolution_conv_weights_1_6_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_1_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_6_address0),
    .ce0(conv_weights_1_6_ce0),
    .q0(conv_weights_1_6_q0)
);

cnn_convolution_conv_weights_2_0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_0_address0),
    .ce0(conv_weights_2_0_ce0),
    .q0(conv_weights_2_0_q0)
);

cnn_convolution_conv_weights_2_1_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_1_address0),
    .ce0(conv_weights_2_1_ce0),
    .q0(conv_weights_2_1_q0)
);

cnn_convolution_conv_weights_2_2_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_2_address0),
    .ce0(conv_weights_2_2_ce0),
    .q0(conv_weights_2_2_q0)
);

cnn_convolution_conv_weights_2_3_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_3_address0),
    .ce0(conv_weights_2_3_ce0),
    .q0(conv_weights_2_3_q0)
);

cnn_convolution_conv_weights_2_4_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_4_address0),
    .ce0(conv_weights_2_4_ce0),
    .q0(conv_weights_2_4_q0)
);

cnn_convolution_conv_weights_2_5_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_5_address0),
    .ce0(conv_weights_2_5_ce0),
    .q0(conv_weights_2_5_q0)
);

cnn_convolution_conv_weights_2_6_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_2_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_6_address0),
    .ce0(conv_weights_2_6_ce0),
    .q0(conv_weights_2_6_q0)
);

cnn_convolution_conv_weights_3_0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_0_address0),
    .ce0(conv_weights_3_0_ce0),
    .q0(conv_weights_3_0_q0)
);

cnn_convolution_conv_weights_3_1_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_1_address0),
    .ce0(conv_weights_3_1_ce0),
    .q0(conv_weights_3_1_q0)
);

cnn_convolution_conv_weights_3_2_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_2_address0),
    .ce0(conv_weights_3_2_ce0),
    .q0(conv_weights_3_2_q0)
);

cnn_convolution_conv_weights_3_3_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_3_address0),
    .ce0(conv_weights_3_3_ce0),
    .q0(conv_weights_3_3_q0)
);

cnn_convolution_conv_weights_3_4_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_4_address0),
    .ce0(conv_weights_3_4_ce0),
    .q0(conv_weights_3_4_q0)
);

cnn_convolution_conv_weights_3_5_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_5_address0),
    .ce0(conv_weights_3_5_ce0),
    .q0(conv_weights_3_5_q0)
);

cnn_convolution_conv_weights_3_6_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_3_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_6_address0),
    .ce0(conv_weights_3_6_ce0),
    .q0(conv_weights_3_6_q0)
);

cnn_convolution_conv_weights_4_0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_0_address0),
    .ce0(conv_weights_4_0_ce0),
    .q0(conv_weights_4_0_q0)
);

cnn_convolution_conv_weights_4_1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_1_address0),
    .ce0(conv_weights_4_1_ce0),
    .q0(conv_weights_4_1_q0)
);

cnn_convolution_conv_weights_4_2_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_2_address0),
    .ce0(conv_weights_4_2_ce0),
    .q0(conv_weights_4_2_q0)
);

cnn_convolution_conv_weights_4_3_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_3_address0),
    .ce0(conv_weights_4_3_ce0),
    .q0(conv_weights_4_3_q0)
);

cnn_convolution_conv_weights_4_4_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_4_address0),
    .ce0(conv_weights_4_4_ce0),
    .q0(conv_weights_4_4_q0)
);

cnn_convolution_conv_weights_4_5_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_5_address0),
    .ce0(conv_weights_4_5_ce0),
    .q0(conv_weights_4_5_q0)
);

cnn_convolution_conv_weights_4_6_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_4_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_6_address0),
    .ce0(conv_weights_4_6_ce0),
    .q0(conv_weights_4_6_q0)
);

cnn_convolution_conv_weights_5_0_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_0_address0),
    .ce0(conv_weights_5_0_ce0),
    .q0(conv_weights_5_0_q0)
);

cnn_convolution_conv_weights_5_1_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_1_address0),
    .ce0(conv_weights_5_1_ce0),
    .q0(conv_weights_5_1_q0)
);

cnn_convolution_conv_weights_5_2_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_2_address0),
    .ce0(conv_weights_5_2_ce0),
    .q0(conv_weights_5_2_q0)
);

cnn_convolution_conv_weights_5_3_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_3_address0),
    .ce0(conv_weights_5_3_ce0),
    .q0(conv_weights_5_3_q0)
);

cnn_convolution_conv_weights_5_4_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_4_address0),
    .ce0(conv_weights_5_4_ce0),
    .q0(conv_weights_5_4_q0)
);

cnn_convolution_conv_weights_5_5_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_5_address0),
    .ce0(conv_weights_5_5_ce0),
    .q0(conv_weights_5_5_q0)
);

cnn_convolution_conv_weights_5_6_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_5_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_6_address0),
    .ce0(conv_weights_5_6_ce0),
    .q0(conv_weights_5_6_q0)
);

cnn_convolution_conv_weights_6_0_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_0_address0),
    .ce0(conv_weights_6_0_ce0),
    .q0(conv_weights_6_0_q0)
);

cnn_convolution_conv_weights_6_1_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_1_address0),
    .ce0(conv_weights_6_1_ce0),
    .q0(conv_weights_6_1_q0)
);

cnn_convolution_conv_weights_6_2_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_2_address0),
    .ce0(conv_weights_6_2_ce0),
    .q0(conv_weights_6_2_q0)
);

cnn_convolution_conv_weights_6_3_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_3_address0),
    .ce0(conv_weights_6_3_ce0),
    .q0(conv_weights_6_3_q0)
);

cnn_convolution_conv_weights_6_4_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_4_address0),
    .ce0(conv_weights_6_4_ce0),
    .q0(conv_weights_6_4_q0)
);

cnn_convolution_conv_weights_6_5_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_5_address0),
    .ce0(conv_weights_6_5_ce0),
    .q0(conv_weights_6_5_q0)
);

cnn_convolution_conv_weights_6_6_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
conv_weights_6_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_6_6_address0),
    .ce0(conv_weights_6_6_ce0),
    .q0(conv_weights_6_6_q0)
);

cnn_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start),
    .ap_done(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done),
    .ap_idle(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_idle),
    .ap_ready(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_ready),
    .pad_img_address0(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address0),
    .pad_img_ce0(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce0),
    .pad_img_q0(pad_img_q0),
    .pad_img_address1(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address1),
    .pad_img_ce1(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce1),
    .pad_img_q1(pad_img_q1),
    .sext_ln38(conv_weights_0_0_load_reg_1197),
    .zext_ln38(conv_weights_0_1_load_reg_1202),
    .zext_ln38_2(conv_weights_0_2_load_reg_1207),
    .sext_ln38_1(conv_weights_0_3_load_reg_1212),
    .sext_ln40(conv_weights_0_4_load_reg_1217),
    .sext_ln38_2(conv_weights_0_5_load_reg_1222),
    .sext_ln40_159(conv_weights_0_6_load_reg_1227),
    .sext_ln38_3(conv_weights_1_0_load_reg_1232),
    .sext_ln40_160(conv_weights_1_1_load_reg_1237),
    .sext_ln38_4(conv_weights_1_2_load_reg_1242),
    .sext_ln40_161(conv_weights_1_3_load_reg_1247),
    .sext_ln38_5(conv_weights_1_4_load_reg_1252),
    .sext_ln40_162(conv_weights_1_5_load_reg_1257),
    .sext_ln38_6(conv_weights_1_6_load_reg_1262),
    .sext_ln38_7(conv_weights_2_0_load_reg_1267),
    .sext_ln40_163(conv_weights_2_1_load_reg_1272),
    .sext_ln38_8(conv_weights_2_2_load_reg_1277),
    .sext_ln38_9(conv_weights_2_3_load_reg_1282),
    .sext_ln40_164(conv_weights_2_4_load_reg_1287),
    .sext_ln38_10(conv_weights_2_5_load_reg_1292),
    .zext_ln38_3(conv_weights_2_6_load_reg_1297),
    .sext_ln38_11(conv_weights_3_0_load_reg_1302),
    .sext_ln40_165(conv_weights_3_1_load_reg_1307),
    .sext_ln40_166(conv_weights_3_2_load_reg_1312),
    .sext_ln38_12(conv_weights_3_3_load_reg_1317),
    .sext_ln40_167(conv_weights_3_4_load_reg_1322),
    .sext_ln40_168(conv_weights_3_5_load_reg_1327),
    .zext_ln38_4(conv_weights_3_6_load_reg_1332),
    .sext_ln38_13(conv_weights_4_0_load_reg_1337),
    .sext_ln38_14(conv_weights_4_1_load_reg_1342),
    .sext_ln40_169(conv_weights_4_2_load_reg_1347),
    .sext_ln40_170(conv_weights_4_3_load_reg_1352),
    .sext_ln38_15(conv_weights_4_4_load_reg_1357),
    .sext_ln40_171(conv_weights_4_5_load_reg_1362),
    .sext_ln40_172(conv_weights_4_6_load_reg_1367),
    .sext_ln40_173(conv_weights_5_0_load_reg_1372),
    .sext_ln40_174(conv_weights_5_1_load_reg_1377),
    .sext_ln40_175(conv_weights_5_2_load_reg_1382),
    .sext_ln40_176(conv_weights_5_3_load_reg_1387),
    .sext_ln40_177(conv_weights_5_4_load_reg_1392),
    .sext_ln38_16(conv_weights_5_5_load_reg_1397),
    .sext_ln40_178(conv_weights_5_6_load_reg_1402),
    .sext_ln40_179(conv_weights_6_0_load_reg_1407),
    .sext_ln40_180(conv_weights_6_1_load_reg_1412),
    .sext_ln40_181(conv_weights_6_2_load_reg_1417),
    .sext_ln40_182(conv_weights_6_3_load_reg_1422),
    .sext_ln40_183(conv_weights_6_4_load_reg_1427),
    .sext_ln40_184(conv_weights_6_5_load_reg_1432),
    .sext_ln40_185(conv_weights_6_6_load_reg_1437),
    .conv_biases_load_cast(conv_biases_load_reg_1192),
    .conv_to_pool_streams_1_din(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_din),
    .conv_to_pool_streams_1_num_data_valid(11'd0),
    .conv_to_pool_streams_1_fifo_cap(11'd0),
    .conv_to_pool_streams_1_full_n(conv_to_pool_streams_1_full_n),
    .conv_to_pool_streams_1_write(grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_ready == 1'b1)) begin
            grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_biases_load_reg_1192 <= conv_biases_q0;
        conv_weights_0_0_load_reg_1197 <= conv_weights_0_0_q0;
        conv_weights_0_1_load_reg_1202 <= conv_weights_0_1_q0;
        conv_weights_0_2_load_reg_1207 <= conv_weights_0_2_q0;
        conv_weights_0_3_load_reg_1212 <= conv_weights_0_3_q0;
        conv_weights_0_4_load_reg_1217 <= conv_weights_0_4_q0;
        conv_weights_0_5_load_reg_1222 <= conv_weights_0_5_q0;
        conv_weights_0_6_load_reg_1227 <= conv_weights_0_6_q0;
        conv_weights_1_0_load_reg_1232 <= conv_weights_1_0_q0;
        conv_weights_1_1_load_reg_1237 <= conv_weights_1_1_q0;
        conv_weights_1_2_load_reg_1242 <= conv_weights_1_2_q0;
        conv_weights_1_3_load_reg_1247 <= conv_weights_1_3_q0;
        conv_weights_1_4_load_reg_1252 <= conv_weights_1_4_q0;
        conv_weights_1_5_load_reg_1257 <= conv_weights_1_5_q0;
        conv_weights_1_6_load_reg_1262 <= conv_weights_1_6_q0;
        conv_weights_2_0_load_reg_1267 <= conv_weights_2_0_q0;
        conv_weights_2_1_load_reg_1272 <= conv_weights_2_1_q0;
        conv_weights_2_2_load_reg_1277 <= conv_weights_2_2_q0;
        conv_weights_2_3_load_reg_1282 <= conv_weights_2_3_q0;
        conv_weights_2_4_load_reg_1287 <= conv_weights_2_4_q0;
        conv_weights_2_5_load_reg_1292 <= conv_weights_2_5_q0;
        conv_weights_2_6_load_reg_1297 <= conv_weights_2_6_q0;
        conv_weights_3_0_load_reg_1302 <= conv_weights_3_0_q0;
        conv_weights_3_1_load_reg_1307 <= conv_weights_3_1_q0;
        conv_weights_3_2_load_reg_1312 <= conv_weights_3_2_q0;
        conv_weights_3_3_load_reg_1317 <= conv_weights_3_3_q0;
        conv_weights_3_4_load_reg_1322 <= conv_weights_3_4_q0;
        conv_weights_3_5_load_reg_1327 <= conv_weights_3_5_q0;
        conv_weights_3_6_load_reg_1332 <= conv_weights_3_6_q0;
        conv_weights_4_0_load_reg_1337 <= conv_weights_4_0_q0;
        conv_weights_4_1_load_reg_1342 <= conv_weights_4_1_q0;
        conv_weights_4_2_load_reg_1347 <= conv_weights_4_2_q0;
        conv_weights_4_3_load_reg_1352 <= conv_weights_4_3_q0;
        conv_weights_4_4_load_reg_1357 <= conv_weights_4_4_q0;
        conv_weights_4_5_load_reg_1362 <= conv_weights_4_5_q0;
        conv_weights_4_6_load_reg_1367 <= conv_weights_4_6_q0;
        conv_weights_5_0_load_reg_1372 <= conv_weights_5_0_q0;
        conv_weights_5_1_load_reg_1377 <= conv_weights_5_1_q0;
        conv_weights_5_2_load_reg_1382 <= conv_weights_5_2_q0;
        conv_weights_5_3_load_reg_1387 <= conv_weights_5_3_q0;
        conv_weights_5_4_load_reg_1392 <= conv_weights_5_4_q0;
        conv_weights_5_5_load_reg_1397 <= conv_weights_5_5_q0;
        conv_weights_5_6_load_reg_1402 <= conv_weights_5_6_q0;
        conv_weights_6_0_load_reg_1407 <= conv_weights_6_0_q0;
        conv_weights_6_1_load_reg_1412 <= conv_weights_6_1_q0;
        conv_weights_6_2_load_reg_1417 <= conv_weights_6_2_q0;
        conv_weights_6_3_load_reg_1422 <= conv_weights_6_3_q0;
        conv_weights_6_4_load_reg_1427 <= conv_weights_6_4_q0;
        conv_weights_6_5_load_reg_1432 <= conv_weights_6_5_q0;
        conv_weights_6_6_load_reg_1437 <= conv_weights_6_6_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_biases_ce0 = 1'b1;
    end else begin
        conv_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_to_pool_streams_1_write = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write;
    end else begin
        conv_to_pool_streams_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_1_ce0 = 1'b1;
    end else begin
        conv_weights_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_2_ce0 = 1'b1;
    end else begin
        conv_weights_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_3_ce0 = 1'b1;
    end else begin
        conv_weights_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_4_ce0 = 1'b1;
    end else begin
        conv_weights_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_5_ce0 = 1'b1;
    end else begin
        conv_weights_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_0_6_ce0 = 1'b1;
    end else begin
        conv_weights_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_2_ce0 = 1'b1;
    end else begin
        conv_weights_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_3_ce0 = 1'b1;
    end else begin
        conv_weights_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_4_ce0 = 1'b1;
    end else begin
        conv_weights_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_5_ce0 = 1'b1;
    end else begin
        conv_weights_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_1_6_ce0 = 1'b1;
    end else begin
        conv_weights_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_1_ce0 = 1'b1;
    end else begin
        conv_weights_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_3_ce0 = 1'b1;
    end else begin
        conv_weights_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_4_ce0 = 1'b1;
    end else begin
        conv_weights_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_5_ce0 = 1'b1;
    end else begin
        conv_weights_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_2_6_ce0 = 1'b1;
    end else begin
        conv_weights_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_0_ce0 = 1'b1;
    end else begin
        conv_weights_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_1_ce0 = 1'b1;
    end else begin
        conv_weights_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_2_ce0 = 1'b1;
    end else begin
        conv_weights_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_4_ce0 = 1'b1;
    end else begin
        conv_weights_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_5_ce0 = 1'b1;
    end else begin
        conv_weights_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_3_6_ce0 = 1'b1;
    end else begin
        conv_weights_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_0_ce0 = 1'b1;
    end else begin
        conv_weights_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_1_ce0 = 1'b1;
    end else begin
        conv_weights_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_2_ce0 = 1'b1;
    end else begin
        conv_weights_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_3_ce0 = 1'b1;
    end else begin
        conv_weights_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_5_ce0 = 1'b1;
    end else begin
        conv_weights_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_4_6_ce0 = 1'b1;
    end else begin
        conv_weights_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_0_ce0 = 1'b1;
    end else begin
        conv_weights_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_1_ce0 = 1'b1;
    end else begin
        conv_weights_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_2_ce0 = 1'b1;
    end else begin
        conv_weights_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_3_ce0 = 1'b1;
    end else begin
        conv_weights_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_4_ce0 = 1'b1;
    end else begin
        conv_weights_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_5_6_ce0 = 1'b1;
    end else begin
        conv_weights_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_0_ce0 = 1'b1;
    end else begin
        conv_weights_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_1_ce0 = 1'b1;
    end else begin
        conv_weights_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_2_ce0 = 1'b1;
    end else begin
        conv_weights_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_3_ce0 = 1'b1;
    end else begin
        conv_weights_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_4_ce0 = 1'b1;
    end else begin
        conv_weights_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_5_ce0 = 1'b1;
    end else begin
        conv_weights_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_weights_6_6_ce0 = 1'b1;
    end else begin
        conv_weights_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign conv_biases_address0 = idxprom_fu_888_p1;

assign conv_to_pool_streams_1_din = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_din;

assign conv_weights_0_0_address0 = idxprom_fu_888_p1;

assign conv_weights_0_1_address0 = idxprom_fu_888_p1;

assign conv_weights_0_2_address0 = idxprom_fu_888_p1;

assign conv_weights_0_3_address0 = idxprom_fu_888_p1;

assign conv_weights_0_4_address0 = idxprom_fu_888_p1;

assign conv_weights_0_5_address0 = idxprom_fu_888_p1;

assign conv_weights_0_6_address0 = idxprom_fu_888_p1;

assign conv_weights_1_0_address0 = idxprom_fu_888_p1;

assign conv_weights_1_1_address0 = idxprom_fu_888_p1;

assign conv_weights_1_2_address0 = idxprom_fu_888_p1;

assign conv_weights_1_3_address0 = idxprom_fu_888_p1;

assign conv_weights_1_4_address0 = idxprom_fu_888_p1;

assign conv_weights_1_5_address0 = idxprom_fu_888_p1;

assign conv_weights_1_6_address0 = idxprom_fu_888_p1;

assign conv_weights_2_0_address0 = idxprom_fu_888_p1;

assign conv_weights_2_1_address0 = idxprom_fu_888_p1;

assign conv_weights_2_2_address0 = idxprom_fu_888_p1;

assign conv_weights_2_3_address0 = idxprom_fu_888_p1;

assign conv_weights_2_4_address0 = idxprom_fu_888_p1;

assign conv_weights_2_5_address0 = idxprom_fu_888_p1;

assign conv_weights_2_6_address0 = idxprom_fu_888_p1;

assign conv_weights_3_0_address0 = idxprom_fu_888_p1;

assign conv_weights_3_1_address0 = idxprom_fu_888_p1;

assign conv_weights_3_2_address0 = idxprom_fu_888_p1;

assign conv_weights_3_3_address0 = idxprom_fu_888_p1;

assign conv_weights_3_4_address0 = idxprom_fu_888_p1;

assign conv_weights_3_5_address0 = idxprom_fu_888_p1;

assign conv_weights_3_6_address0 = idxprom_fu_888_p1;

assign conv_weights_4_0_address0 = idxprom_fu_888_p1;

assign conv_weights_4_1_address0 = idxprom_fu_888_p1;

assign conv_weights_4_2_address0 = idxprom_fu_888_p1;

assign conv_weights_4_3_address0 = idxprom_fu_888_p1;

assign conv_weights_4_4_address0 = idxprom_fu_888_p1;

assign conv_weights_4_5_address0 = idxprom_fu_888_p1;

assign conv_weights_4_6_address0 = idxprom_fu_888_p1;

assign conv_weights_5_0_address0 = idxprom_fu_888_p1;

assign conv_weights_5_1_address0 = idxprom_fu_888_p1;

assign conv_weights_5_2_address0 = idxprom_fu_888_p1;

assign conv_weights_5_3_address0 = idxprom_fu_888_p1;

assign conv_weights_5_4_address0 = idxprom_fu_888_p1;

assign conv_weights_5_5_address0 = idxprom_fu_888_p1;

assign conv_weights_5_6_address0 = idxprom_fu_888_p1;

assign conv_weights_6_0_address0 = idxprom_fu_888_p1;

assign conv_weights_6_1_address0 = idxprom_fu_888_p1;

assign conv_weights_6_2_address0 = idxprom_fu_888_p1;

assign conv_weights_6_3_address0 = idxprom_fu_888_p1;

assign conv_weights_6_4_address0 = idxprom_fu_888_p1;

assign conv_weights_6_5_address0 = idxprom_fu_888_p1;

assign conv_weights_6_6_address0 = idxprom_fu_888_p1;

assign grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg;

assign idxprom_fu_888_p1 = filter;

assign pad_img_address0 = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address0;

assign pad_img_address1 = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address1;

assign pad_img_ce0 = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce0;

assign pad_img_ce1 = grp_convolution_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce1;

endmodule //cnn_convolution
