// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_max_pooling_layer (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        conv_to_pool_streams_0_dout,
        conv_to_pool_streams_0_num_data_valid,
        conv_to_pool_streams_0_fifo_cap,
        conv_to_pool_streams_0_empty_n,
        conv_to_pool_streams_0_read,
        conv_to_pool_streams_1_dout,
        conv_to_pool_streams_1_num_data_valid,
        conv_to_pool_streams_1_fifo_cap,
        conv_to_pool_streams_1_empty_n,
        conv_to_pool_streams_1_read,
        conv_to_pool_streams_2_dout,
        conv_to_pool_streams_2_num_data_valid,
        conv_to_pool_streams_2_fifo_cap,
        conv_to_pool_streams_2_empty_n,
        conv_to_pool_streams_2_read,
        conv_to_pool_streams_3_dout,
        conv_to_pool_streams_3_num_data_valid,
        conv_to_pool_streams_3_fifo_cap,
        conv_to_pool_streams_3_empty_n,
        conv_to_pool_streams_3_read,
        pool_to_flat_streams_0_din,
        pool_to_flat_streams_0_num_data_valid,
        pool_to_flat_streams_0_fifo_cap,
        pool_to_flat_streams_0_full_n,
        pool_to_flat_streams_0_write,
        pool_to_flat_streams_1_din,
        pool_to_flat_streams_1_num_data_valid,
        pool_to_flat_streams_1_fifo_cap,
        pool_to_flat_streams_1_full_n,
        pool_to_flat_streams_1_write,
        pool_to_flat_streams_2_din,
        pool_to_flat_streams_2_num_data_valid,
        pool_to_flat_streams_2_fifo_cap,
        pool_to_flat_streams_2_full_n,
        pool_to_flat_streams_2_write,
        pool_to_flat_streams_3_din,
        pool_to_flat_streams_3_num_data_valid,
        pool_to_flat_streams_3_fifo_cap,
        pool_to_flat_streams_3_full_n,
        pool_to_flat_streams_3_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] conv_to_pool_streams_0_dout;
input  [10:0] conv_to_pool_streams_0_num_data_valid;
input  [10:0] conv_to_pool_streams_0_fifo_cap;
input   conv_to_pool_streams_0_empty_n;
output   conv_to_pool_streams_0_read;
input  [23:0] conv_to_pool_streams_1_dout;
input  [10:0] conv_to_pool_streams_1_num_data_valid;
input  [10:0] conv_to_pool_streams_1_fifo_cap;
input   conv_to_pool_streams_1_empty_n;
output   conv_to_pool_streams_1_read;
input  [23:0] conv_to_pool_streams_2_dout;
input  [10:0] conv_to_pool_streams_2_num_data_valid;
input  [10:0] conv_to_pool_streams_2_fifo_cap;
input   conv_to_pool_streams_2_empty_n;
output   conv_to_pool_streams_2_read;
input  [23:0] conv_to_pool_streams_3_dout;
input  [10:0] conv_to_pool_streams_3_num_data_valid;
input  [10:0] conv_to_pool_streams_3_fifo_cap;
input   conv_to_pool_streams_3_empty_n;
output   conv_to_pool_streams_3_read;
output  [23:0] pool_to_flat_streams_0_din;
input  [8:0] pool_to_flat_streams_0_num_data_valid;
input  [8:0] pool_to_flat_streams_0_fifo_cap;
input   pool_to_flat_streams_0_full_n;
output   pool_to_flat_streams_0_write;
output  [23:0] pool_to_flat_streams_1_din;
input  [8:0] pool_to_flat_streams_1_num_data_valid;
input  [8:0] pool_to_flat_streams_1_fifo_cap;
input   pool_to_flat_streams_1_full_n;
output   pool_to_flat_streams_1_write;
output  [23:0] pool_to_flat_streams_2_din;
input  [8:0] pool_to_flat_streams_2_num_data_valid;
input  [8:0] pool_to_flat_streams_2_fifo_cap;
input   pool_to_flat_streams_2_full_n;
output   pool_to_flat_streams_2_write;
output  [23:0] pool_to_flat_streams_3_din;
input  [8:0] pool_to_flat_streams_3_num_data_valid;
input  [8:0] pool_to_flat_streams_3_fifo_cap;
input   pool_to_flat_streams_3_full_n;
output   pool_to_flat_streams_3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg conv_to_pool_streams_0_read;
reg conv_to_pool_streams_1_read;
reg conv_to_pool_streams_2_read;
reg conv_to_pool_streams_3_read;
reg pool_to_flat_streams_0_write;
reg pool_to_flat_streams_1_write;
reg pool_to_flat_streams_2_write;
reg pool_to_flat_streams_3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    grp_max_pooling_fu_28_ap_start;
wire    grp_max_pooling_fu_28_ap_done;
wire    grp_max_pooling_fu_28_ap_idle;
wire    grp_max_pooling_fu_28_ap_ready;
wire    grp_max_pooling_fu_28_conv_to_pool_streams_0_read;
wire   [23:0] grp_max_pooling_fu_28_pool_to_flat_streams_0_din;
wire    grp_max_pooling_fu_28_pool_to_flat_streams_0_write;
wire    grp_max_pooling_fu_36_ap_start;
wire    grp_max_pooling_fu_36_ap_done;
wire    grp_max_pooling_fu_36_ap_idle;
wire    grp_max_pooling_fu_36_ap_ready;
wire    grp_max_pooling_fu_36_conv_to_pool_streams_0_read;
wire   [23:0] grp_max_pooling_fu_36_pool_to_flat_streams_0_din;
wire    grp_max_pooling_fu_36_pool_to_flat_streams_0_write;
wire    grp_max_pooling_fu_44_ap_start;
wire    grp_max_pooling_fu_44_ap_done;
wire    grp_max_pooling_fu_44_ap_idle;
wire    grp_max_pooling_fu_44_ap_ready;
wire    grp_max_pooling_fu_44_conv_to_pool_streams_0_read;
wire   [23:0] grp_max_pooling_fu_44_pool_to_flat_streams_0_din;
wire    grp_max_pooling_fu_44_pool_to_flat_streams_0_write;
wire    grp_max_pooling_fu_52_ap_start;
wire    grp_max_pooling_fu_52_ap_done;
wire    grp_max_pooling_fu_52_ap_idle;
wire    grp_max_pooling_fu_52_ap_ready;
wire    grp_max_pooling_fu_52_conv_to_pool_streams_0_read;
wire   [23:0] grp_max_pooling_fu_52_pool_to_flat_streams_0_din;
wire    grp_max_pooling_fu_52_pool_to_flat_streams_0_write;
reg    grp_max_pooling_fu_28_ap_start_reg;
reg    ap_block_state1_ignore_call8;
wire    ap_CS_fsm_state2;
reg    grp_max_pooling_fu_36_ap_start_reg;
reg    ap_block_state1_ignore_call9;
reg    grp_max_pooling_fu_44_ap_start_reg;
reg    ap_block_state1_ignore_call10;
reg    grp_max_pooling_fu_52_ap_start_reg;
reg    ap_block_state1_ignore_call11;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_max_pooling_fu_28_ap_start_reg = 1'b0;
#0 grp_max_pooling_fu_36_ap_start_reg = 1'b0;
#0 grp_max_pooling_fu_44_ap_start_reg = 1'b0;
#0 grp_max_pooling_fu_52_ap_start_reg = 1'b0;
end

cnn_max_pooling grp_max_pooling_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pooling_fu_28_ap_start),
    .ap_done(grp_max_pooling_fu_28_ap_done),
    .ap_idle(grp_max_pooling_fu_28_ap_idle),
    .ap_ready(grp_max_pooling_fu_28_ap_ready),
    .conv_to_pool_streams_0_dout(conv_to_pool_streams_0_dout),
    .conv_to_pool_streams_0_num_data_valid(11'd0),
    .conv_to_pool_streams_0_fifo_cap(11'd0),
    .conv_to_pool_streams_0_empty_n(conv_to_pool_streams_0_empty_n),
    .conv_to_pool_streams_0_read(grp_max_pooling_fu_28_conv_to_pool_streams_0_read),
    .pool_to_flat_streams_0_din(grp_max_pooling_fu_28_pool_to_flat_streams_0_din),
    .pool_to_flat_streams_0_num_data_valid(9'd0),
    .pool_to_flat_streams_0_fifo_cap(9'd0),
    .pool_to_flat_streams_0_full_n(pool_to_flat_streams_0_full_n),
    .pool_to_flat_streams_0_write(grp_max_pooling_fu_28_pool_to_flat_streams_0_write)
);

cnn_max_pooling grp_max_pooling_fu_36(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pooling_fu_36_ap_start),
    .ap_done(grp_max_pooling_fu_36_ap_done),
    .ap_idle(grp_max_pooling_fu_36_ap_idle),
    .ap_ready(grp_max_pooling_fu_36_ap_ready),
    .conv_to_pool_streams_0_dout(conv_to_pool_streams_1_dout),
    .conv_to_pool_streams_0_num_data_valid(11'd0),
    .conv_to_pool_streams_0_fifo_cap(11'd0),
    .conv_to_pool_streams_0_empty_n(conv_to_pool_streams_1_empty_n),
    .conv_to_pool_streams_0_read(grp_max_pooling_fu_36_conv_to_pool_streams_0_read),
    .pool_to_flat_streams_0_din(grp_max_pooling_fu_36_pool_to_flat_streams_0_din),
    .pool_to_flat_streams_0_num_data_valid(9'd0),
    .pool_to_flat_streams_0_fifo_cap(9'd0),
    .pool_to_flat_streams_0_full_n(pool_to_flat_streams_1_full_n),
    .pool_to_flat_streams_0_write(grp_max_pooling_fu_36_pool_to_flat_streams_0_write)
);

cnn_max_pooling grp_max_pooling_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pooling_fu_44_ap_start),
    .ap_done(grp_max_pooling_fu_44_ap_done),
    .ap_idle(grp_max_pooling_fu_44_ap_idle),
    .ap_ready(grp_max_pooling_fu_44_ap_ready),
    .conv_to_pool_streams_0_dout(conv_to_pool_streams_2_dout),
    .conv_to_pool_streams_0_num_data_valid(11'd0),
    .conv_to_pool_streams_0_fifo_cap(11'd0),
    .conv_to_pool_streams_0_empty_n(conv_to_pool_streams_2_empty_n),
    .conv_to_pool_streams_0_read(grp_max_pooling_fu_44_conv_to_pool_streams_0_read),
    .pool_to_flat_streams_0_din(grp_max_pooling_fu_44_pool_to_flat_streams_0_din),
    .pool_to_flat_streams_0_num_data_valid(9'd0),
    .pool_to_flat_streams_0_fifo_cap(9'd0),
    .pool_to_flat_streams_0_full_n(pool_to_flat_streams_2_full_n),
    .pool_to_flat_streams_0_write(grp_max_pooling_fu_44_pool_to_flat_streams_0_write)
);

cnn_max_pooling grp_max_pooling_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pooling_fu_52_ap_start),
    .ap_done(grp_max_pooling_fu_52_ap_done),
    .ap_idle(grp_max_pooling_fu_52_ap_idle),
    .ap_ready(grp_max_pooling_fu_52_ap_ready),
    .conv_to_pool_streams_0_dout(conv_to_pool_streams_3_dout),
    .conv_to_pool_streams_0_num_data_valid(11'd0),
    .conv_to_pool_streams_0_fifo_cap(11'd0),
    .conv_to_pool_streams_0_empty_n(conv_to_pool_streams_3_empty_n),
    .conv_to_pool_streams_0_read(grp_max_pooling_fu_52_conv_to_pool_streams_0_read),
    .pool_to_flat_streams_0_din(grp_max_pooling_fu_52_pool_to_flat_streams_0_din),
    .pool_to_flat_streams_0_num_data_valid(9'd0),
    .pool_to_flat_streams_0_fifo_cap(9'd0),
    .pool_to_flat_streams_0_full_n(pool_to_flat_streams_3_full_n),
    .pool_to_flat_streams_0_write(grp_max_pooling_fu_52_pool_to_flat_streams_0_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pooling_fu_28_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call8))) begin
            grp_max_pooling_fu_28_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling_fu_28_ap_ready == 1'b1)) begin
            grp_max_pooling_fu_28_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pooling_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call9))) begin
            grp_max_pooling_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling_fu_36_ap_ready == 1'b1)) begin
            grp_max_pooling_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pooling_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call10))) begin
            grp_max_pooling_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling_fu_44_ap_ready == 1'b1)) begin
            grp_max_pooling_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pooling_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call11))) begin
            grp_max_pooling_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling_fu_52_ap_ready == 1'b1)) begin
            grp_max_pooling_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_to_pool_streams_0_read = grp_max_pooling_fu_28_conv_to_pool_streams_0_read;
    end else begin
        conv_to_pool_streams_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_to_pool_streams_1_read = grp_max_pooling_fu_36_conv_to_pool_streams_0_read;
    end else begin
        conv_to_pool_streams_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_to_pool_streams_2_read = grp_max_pooling_fu_44_conv_to_pool_streams_0_read;
    end else begin
        conv_to_pool_streams_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_to_pool_streams_3_read = grp_max_pooling_fu_52_conv_to_pool_streams_0_read;
    end else begin
        conv_to_pool_streams_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_to_flat_streams_0_write = grp_max_pooling_fu_28_pool_to_flat_streams_0_write;
    end else begin
        pool_to_flat_streams_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_to_flat_streams_1_write = grp_max_pooling_fu_36_pool_to_flat_streams_0_write;
    end else begin
        pool_to_flat_streams_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_to_flat_streams_2_write = grp_max_pooling_fu_44_pool_to_flat_streams_0_write;
    end else begin
        pool_to_flat_streams_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_to_flat_streams_3_write = grp_max_pooling_fu_52_pool_to_flat_streams_0_write;
    end else begin
        pool_to_flat_streams_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call10 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call11 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call8 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call9 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_max_pooling_fu_28_ap_done == 1'b0) | (grp_max_pooling_fu_52_ap_done == 1'b0) | (grp_max_pooling_fu_44_ap_done == 1'b0) | (grp_max_pooling_fu_36_ap_done == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_max_pooling_fu_28_ap_start = grp_max_pooling_fu_28_ap_start_reg;

assign grp_max_pooling_fu_36_ap_start = grp_max_pooling_fu_36_ap_start_reg;

assign grp_max_pooling_fu_44_ap_start = grp_max_pooling_fu_44_ap_start_reg;

assign grp_max_pooling_fu_52_ap_start = grp_max_pooling_fu_52_ap_start_reg;

assign pool_to_flat_streams_0_din = grp_max_pooling_fu_28_pool_to_flat_streams_0_din;

assign pool_to_flat_streams_1_din = grp_max_pooling_fu_36_pool_to_flat_streams_0_din;

assign pool_to_flat_streams_2_din = grp_max_pooling_fu_44_pool_to_flat_streams_0_din;

assign pool_to_flat_streams_3_din = grp_max_pooling_fu_52_pool_to_flat_streams_0_din;

assign start_out = real_start;

endmodule //cnn_max_pooling_layer
