// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_cnn_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pad_img0_address0,
        pad_img0_ce0,
        pad_img0_we0,
        pad_img0_d0,
        pad_img0_1_address0,
        pad_img0_1_ce0,
        pad_img0_1_we0,
        pad_img0_1_d0,
        pad_img0_2_address0,
        pad_img0_2_ce0,
        pad_img0_2_we0,
        pad_img0_2_d0,
        pad_img0_3_address0,
        pad_img0_3_ce0,
        pad_img0_3_we0,
        pad_img0_3_d0,
        pad_img0_4_address0,
        pad_img0_4_ce0,
        pad_img0_4_we0,
        pad_img0_4_d0,
        pad_img0_5_address0,
        pad_img0_5_ce0,
        pad_img0_5_we0,
        pad_img0_5_d0,
        pad_img0_6_address0,
        pad_img0_6_ce0,
        pad_img0_6_we0,
        pad_img0_6_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] pad_img0_address0;
output   pad_img0_ce0;
output   pad_img0_we0;
output  [23:0] pad_img0_d0;
output  [5:0] pad_img0_1_address0;
output   pad_img0_1_ce0;
output   pad_img0_1_we0;
output  [23:0] pad_img0_1_d0;
output  [5:0] pad_img0_2_address0;
output   pad_img0_2_ce0;
output   pad_img0_2_we0;
output  [23:0] pad_img0_2_d0;
output  [5:0] pad_img0_3_address0;
output   pad_img0_3_ce0;
output   pad_img0_3_we0;
output  [23:0] pad_img0_3_d0;
output  [5:0] pad_img0_4_address0;
output   pad_img0_4_ce0;
output   pad_img0_4_we0;
output  [23:0] pad_img0_4_d0;
output  [5:0] pad_img0_5_address0;
output   pad_img0_5_ce0;
output   pad_img0_5_we0;
output  [23:0] pad_img0_5_d0;
output  [5:0] pad_img0_6_address0;
output   pad_img0_6_ce0;
output   pad_img0_6_we0;
output  [23:0] pad_img0_6_d0;

reg ap_idle;
reg pad_img0_ce0;
reg pad_img0_we0;
reg pad_img0_1_ce0;
reg pad_img0_1_we0;
reg pad_img0_2_ce0;
reg pad_img0_2_we0;
reg pad_img0_3_ce0;
reg pad_img0_3_we0;
reg pad_img0_4_ce0;
reg pad_img0_4_we0;
reg pad_img0_5_ce0;
reg pad_img0_5_we0;
reg pad_img0_6_ce0;
reg pad_img0_6_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln69_fu_200_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] tmp_reg_237;
reg   [3:0] tmp_reg_237_pp0_iter1_reg;
reg   [3:0] tmp_reg_237_pp0_iter2_reg;
reg   [3:0] tmp_reg_237_pp0_iter3_reg;
reg   [3:0] tmp_reg_237_pp0_iter4_reg;
reg   [3:0] tmp_reg_237_pp0_iter5_reg;
reg   [3:0] tmp_reg_237_pp0_iter6_reg;
reg   [3:0] tmp_reg_237_pp0_iter7_reg;
reg   [3:0] tmp_reg_237_pp0_iter8_reg;
reg   [3:0] tmp_reg_237_pp0_iter9_reg;
wire   [2:0] trunc_ln69_fu_211_p1;
reg   [2:0] trunc_ln69_reg_246;
wire   [63:0] zext_ln69_fu_215_p1;
wire    ap_block_pp0_stage0;
reg   [5:0] arrayinit_curidx_fu_58;
wire   [5:0] add_ln69_fu_194_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_arrayinit_curidx_load;
wire   [5:0] mul_ln69_fu_172_p0;
wire   [7:0] mul_ln69_fu_172_p1;
wire   [12:0] mul_ln69_fu_172_p2;
wire   [3:0] grp_fu_188_p1;
wire   [2:0] grp_fu_188_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] mul_ln69_fu_172_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 arrayinit_curidx_fu_58 = 6'd0;
#0 ap_done_reg = 1'b0;
end

cnn_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U1(
    .din0(mul_ln69_fu_172_p0),
    .din1(mul_ln69_fu_172_p1),
    .dout(mul_ln69_fu_172_p2)
);

cnn_urem_6ns_4ns_3_10_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
urem_6ns_4ns_3_10_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_arrayinit_curidx_load),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            arrayinit_curidx_fu_58 <= add_ln69_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            arrayinit_curidx_fu_58 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_reg_237 <= {{mul_ln69_fu_172_p2[12:9]}};
        tmp_reg_237_pp0_iter1_reg <= tmp_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        tmp_reg_237_pp0_iter2_reg <= tmp_reg_237_pp0_iter1_reg;
        tmp_reg_237_pp0_iter3_reg <= tmp_reg_237_pp0_iter2_reg;
        tmp_reg_237_pp0_iter4_reg <= tmp_reg_237_pp0_iter3_reg;
        tmp_reg_237_pp0_iter5_reg <= tmp_reg_237_pp0_iter4_reg;
        tmp_reg_237_pp0_iter6_reg <= tmp_reg_237_pp0_iter5_reg;
        tmp_reg_237_pp0_iter7_reg <= tmp_reg_237_pp0_iter6_reg;
        tmp_reg_237_pp0_iter8_reg <= tmp_reg_237_pp0_iter7_reg;
        tmp_reg_237_pp0_iter9_reg <= tmp_reg_237_pp0_iter8_reg;
        trunc_ln69_reg_246 <= trunc_ln69_fu_211_p1;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_arrayinit_curidx_load = 6'd1;
    end else begin
        ap_sig_allocacmp_arrayinit_curidx_load = arrayinit_curidx_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_1_ce0 = 1'b1;
    end else begin
        pad_img0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln69_reg_246 == 3'd1))) begin
        pad_img0_1_we0 = 1'b1;
    end else begin
        pad_img0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_2_ce0 = 1'b1;
    end else begin
        pad_img0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln69_reg_246 == 3'd2))) begin
        pad_img0_2_we0 = 1'b1;
    end else begin
        pad_img0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_3_ce0 = 1'b1;
    end else begin
        pad_img0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln69_reg_246 == 3'd3))) begin
        pad_img0_3_we0 = 1'b1;
    end else begin
        pad_img0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_4_ce0 = 1'b1;
    end else begin
        pad_img0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln69_reg_246 == 3'd4))) begin
        pad_img0_4_we0 = 1'b1;
    end else begin
        pad_img0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_5_ce0 = 1'b1;
    end else begin
        pad_img0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln69_reg_246 == 3'd5))) begin
        pad_img0_5_we0 = 1'b1;
    end else begin
        pad_img0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_6_ce0 = 1'b1;
    end else begin
        pad_img0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & ((trunc_ln69_reg_246 == 3'd6) | (trunc_ln69_reg_246 == 3'd7)))) begin
        pad_img0_6_we0 = 1'b1;
    end else begin
        pad_img0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        pad_img0_ce0 = 1'b1;
    end else begin
        pad_img0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln69_reg_246 == 3'd0))) begin
        pad_img0_we0 = 1'b1;
    end else begin
        pad_img0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_fu_194_p2 = (ap_sig_allocacmp_arrayinit_curidx_load + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_188_p1 = 6'd7;

assign icmp_ln69_fu_200_p2 = ((ap_sig_allocacmp_arrayinit_curidx_load == 6'd33) ? 1'b1 : 1'b0);

assign mul_ln69_fu_172_p0 = mul_ln69_fu_172_p00;

assign mul_ln69_fu_172_p00 = ap_sig_allocacmp_arrayinit_curidx_load;

assign mul_ln69_fu_172_p1 = 13'd74;

assign pad_img0_1_address0 = zext_ln69_fu_215_p1;

assign pad_img0_1_d0 = 24'd0;

assign pad_img0_2_address0 = zext_ln69_fu_215_p1;

assign pad_img0_2_d0 = 24'd0;

assign pad_img0_3_address0 = zext_ln69_fu_215_p1;

assign pad_img0_3_d0 = 24'd0;

assign pad_img0_4_address0 = zext_ln69_fu_215_p1;

assign pad_img0_4_d0 = 24'd0;

assign pad_img0_5_address0 = zext_ln69_fu_215_p1;

assign pad_img0_5_d0 = 24'd0;

assign pad_img0_6_address0 = zext_ln69_fu_215_p1;

assign pad_img0_6_d0 = 24'd0;

assign pad_img0_address0 = zext_ln69_fu_215_p1;

assign pad_img0_d0 = 24'd0;

assign trunc_ln69_fu_211_p1 = grp_fu_188_p2[2:0];

assign zext_ln69_fu_215_p1 = tmp_reg_237_pp0_iter9_reg;

endmodule //cnn_cnn_Pipeline_1
