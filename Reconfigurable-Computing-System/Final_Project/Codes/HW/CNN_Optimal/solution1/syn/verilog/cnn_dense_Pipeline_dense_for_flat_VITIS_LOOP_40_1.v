// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_to_dense_streams_0_dout,
        flat_to_dense_streams_0_num_data_valid,
        flat_to_dense_streams_0_fifo_cap,
        flat_to_dense_streams_0_empty_n,
        flat_to_dense_streams_0_read,
        mul_ln36,
        dense_array_address0,
        dense_array_ce0,
        dense_array_we0,
        dense_array_d0,
        dense_array_address1,
        dense_array_ce1,
        dense_array_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] flat_to_dense_streams_0_dout;
input  [8:0] flat_to_dense_streams_0_num_data_valid;
input  [8:0] flat_to_dense_streams_0_fifo_cap;
input   flat_to_dense_streams_0_empty_n;
output   flat_to_dense_streams_0_read;
input  [9:0] mul_ln36;
output  [3:0] dense_array_address0;
output   dense_array_ce0;
output   dense_array_we0;
output  [31:0] dense_array_d0;
output  [3:0] dense_array_address1;
output   dense_array_ce1;
input  [31:0] dense_array_q1;

reg ap_idle;
reg flat_to_dense_streams_0_read;
reg dense_array_ce0;
reg dense_array_we0;
reg dense_array_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
reg   [0:0] or_ln36_reg_326;
reg   [0:0] or_ln36_reg_326_pp0_iter1_reg;
reg    ap_block_state2_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_157_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [12:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg    flat_to_dense_streams_0_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln36_reg_322;
reg   [0:0] icmp_ln36_reg_322_pp0_iter1_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter2_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter3_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter4_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter5_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter6_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter7_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter8_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter9_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter10_reg;
reg   [0:0] icmp_ln36_reg_322_pp0_iter11_reg;
wire   [0:0] or_ln36_fu_187_p2;
wire   [3:0] select_ln36_fu_193_p3;
reg   [3:0] select_ln36_reg_330;
reg   [3:0] select_ln36_reg_330_pp0_iter1_reg;
reg   [3:0] select_ln36_reg_330_pp0_iter2_reg;
reg   [3:0] select_ln36_reg_330_pp0_iter3_reg;
reg   [3:0] select_ln36_reg_330_pp0_iter4_reg;
wire   [9:0] empty_fu_213_p2;
reg   [9:0] empty_reg_336;
reg   [31:0] dense_weights_load_reg_342;
reg   [3:0] dense_array_addr_reg_357;
reg   [3:0] dense_array_addr_reg_357_pp0_iter6_reg;
reg   [3:0] dense_array_addr_reg_357_pp0_iter7_reg;
reg   [3:0] dense_array_addr_reg_357_pp0_iter8_reg;
reg   [3:0] dense_array_addr_reg_357_pp0_iter9_reg;
reg   [3:0] dense_array_addr_reg_357_pp0_iter10_reg;
reg   [3:0] dense_array_addr_reg_357_pp0_iter11_reg;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] mul7_reg_363;
reg   [31:0] dense_array_load_reg_368;
wire   [31:0] grp_fu_131_p2;
reg   [31:0] add_reg_373;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_123_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln45_2_fu_278_p1;
wire   [63:0] zext_ln40_fu_291_p1;
reg   [3:0] d_fu_62;
wire   [3:0] add_ln40_fu_219_p2;
reg   [3:0] ap_sig_allocacmp_d_load;
reg   [7:0] i_fu_66;
wire   [7:0] select_ln36_1_fu_201_p3;
reg   [7:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten_fu_70;
wire   [10:0] add_ln36_1_fu_163_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] p_07_fu_74;
wire   [31:0] grp_fu_135_p1;
wire   [0:0] icmp_ln40_fu_181_p2;
wire   [7:0] add_ln36_fu_175_p2;
wire   [9:0] zext_ln36_fu_209_p1;
wire   [10:0] tmp_1_fu_252_p3;
wire   [12:0] tmp_fu_245_p3;
wire   [12:0] zext_ln45_fu_259_p1;
wire   [12:0] add_ln45_fu_263_p2;
wire   [12:0] zext_ln45_1_fu_269_p1;
wire   [12:0] add_ln45_1_fu_272_p2;
reg    grp_fu_131_ce;
reg    grp_fu_135_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_401;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 d_fu_62 = 4'd0;
#0 i_fu_66 = 8'd0;
#0 indvar_flatten_fu_70 = 11'd0;
#0 p_07_fu_74 = 32'd0;
#0 ap_done_reg = 1'b0;
end

cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1_dense_weights_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 7840 ),
    .AddressWidth( 13 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

cnn_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U540(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_array_load_reg_368),
    .din1(mul7_reg_363),
    .ce(grp_fu_131_ce),
    .dout(grp_fu_131_p2)
);

cnn_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U541(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_load_reg_342),
    .din1(grp_fu_135_p1),
    .ce(grp_fu_135_ce),
    .dout(grp_fu_135_p2)
);

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_157_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            d_fu_62 <= add_ln40_fu_219_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            d_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_157_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln36_1_fu_201_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_157_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_70 <= add_ln36_1_fu_163_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_reg_373 <= grp_fu_131_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        dense_array_addr_reg_357 <= zext_ln40_fu_291_p1;
        dense_array_addr_reg_357_pp0_iter10_reg <= dense_array_addr_reg_357_pp0_iter9_reg;
        dense_array_addr_reg_357_pp0_iter11_reg <= dense_array_addr_reg_357_pp0_iter10_reg;
        dense_array_addr_reg_357_pp0_iter6_reg <= dense_array_addr_reg_357;
        dense_array_addr_reg_357_pp0_iter7_reg <= dense_array_addr_reg_357_pp0_iter6_reg;
        dense_array_addr_reg_357_pp0_iter8_reg <= dense_array_addr_reg_357_pp0_iter7_reg;
        dense_array_addr_reg_357_pp0_iter9_reg <= dense_array_addr_reg_357_pp0_iter8_reg;
        dense_weights_load_reg_342 <= dense_weights_q0;
        icmp_ln36_reg_322_pp0_iter10_reg <= icmp_ln36_reg_322_pp0_iter9_reg;
        icmp_ln36_reg_322_pp0_iter11_reg <= icmp_ln36_reg_322_pp0_iter10_reg;
        icmp_ln36_reg_322_pp0_iter2_reg <= icmp_ln36_reg_322_pp0_iter1_reg;
        icmp_ln36_reg_322_pp0_iter3_reg <= icmp_ln36_reg_322_pp0_iter2_reg;
        icmp_ln36_reg_322_pp0_iter4_reg <= icmp_ln36_reg_322_pp0_iter3_reg;
        icmp_ln36_reg_322_pp0_iter5_reg <= icmp_ln36_reg_322_pp0_iter4_reg;
        icmp_ln36_reg_322_pp0_iter6_reg <= icmp_ln36_reg_322_pp0_iter5_reg;
        icmp_ln36_reg_322_pp0_iter7_reg <= icmp_ln36_reg_322_pp0_iter6_reg;
        icmp_ln36_reg_322_pp0_iter8_reg <= icmp_ln36_reg_322_pp0_iter7_reg;
        icmp_ln36_reg_322_pp0_iter9_reg <= icmp_ln36_reg_322_pp0_iter8_reg;
        mul7_reg_363 <= grp_fu_135_p2;
        select_ln36_reg_330_pp0_iter2_reg <= select_ln36_reg_330_pp0_iter1_reg;
        select_ln36_reg_330_pp0_iter3_reg <= select_ln36_reg_330_pp0_iter2_reg;
        select_ln36_reg_330_pp0_iter4_reg <= select_ln36_reg_330_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_336 <= empty_fu_213_p2;
        icmp_ln36_reg_322 <= icmp_ln36_fu_157_p2;
        icmp_ln36_reg_322_pp0_iter1_reg <= icmp_ln36_reg_322;
        or_ln36_reg_326 <= or_ln36_fu_187_p2;
        or_ln36_reg_326_pp0_iter1_reg <= or_ln36_reg_326;
        select_ln36_reg_330 <= select_ln36_fu_193_p3;
        select_ln36_reg_330_pp0_iter1_reg <= select_ln36_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dense_array_load_reg_368 <= dense_array_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln36_reg_326_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_07_fu_74 <= flat_to_dense_streams_0_dout;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_157_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_401)) begin
            ap_phi_mux_first_iter_0_phi_fu_123_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_0_phi_fu_123_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_0_phi_fu_123_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_123_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_d_load = 4'd0;
    end else begin
        ap_sig_allocacmp_d_load = d_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        dense_array_ce1 = 1'b1;
    end else begin
        dense_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (icmp_ln36_reg_322_pp0_iter11_reg == 1'd0))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln36_reg_326_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        flat_to_dense_streams_0_blk_n = flat_to_dense_streams_0_empty_n;
    end else begin
        flat_to_dense_streams_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln36_reg_326_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        flat_to_dense_streams_0_read = 1'b1;
    end else begin
        flat_to_dense_streams_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_131_ce = 1'b1;
    end else begin
        grp_fu_131_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_135_ce = 1'b1;
    end else begin
        grp_fu_135_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_1_fu_163_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln36_fu_175_p2 = (ap_sig_allocacmp_i_load + 8'd1);

assign add_ln40_fu_219_p2 = (select_ln36_fu_193_p3 + 4'd1);

assign add_ln45_1_fu_272_p2 = (add_ln45_fu_263_p2 + zext_ln45_1_fu_269_p1);

assign add_ln45_fu_263_p2 = (tmp_fu_245_p3 + zext_ln45_fu_259_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter2 = ((or_ln36_reg_326_pp0_iter1_reg == 1'd1) & (flat_to_dense_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_401 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_reg_322 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dense_array_address0 = dense_array_addr_reg_357_pp0_iter11_reg;

assign dense_array_address1 = zext_ln40_fu_291_p1;

assign dense_array_d0 = add_reg_373;

assign dense_weights_address0 = zext_ln45_2_fu_278_p1;

assign empty_fu_213_p2 = (mul_ln36 + zext_ln36_fu_209_p1);

assign grp_fu_135_p1 = p_07_fu_74;

assign icmp_ln36_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1960) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_181_p2 = ((ap_sig_allocacmp_d_load == 4'd10) ? 1'b1 : 1'b0);

assign or_ln36_fu_187_p2 = (icmp_ln40_fu_181_p2 | ap_phi_mux_first_iter_0_phi_fu_123_p4);

assign select_ln36_1_fu_201_p3 = ((icmp_ln40_fu_181_p2[0:0] == 1'b1) ? add_ln36_fu_175_p2 : ap_sig_allocacmp_i_load);

assign select_ln36_fu_193_p3 = ((icmp_ln40_fu_181_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_d_load);

assign tmp_1_fu_252_p3 = {{empty_reg_336}, {1'd0}};

assign tmp_fu_245_p3 = {{empty_reg_336}, {3'd0}};

assign zext_ln36_fu_209_p1 = select_ln36_1_fu_201_p3;

assign zext_ln40_fu_291_p1 = select_ln36_reg_330_pp0_iter4_reg;

assign zext_ln45_1_fu_269_p1 = select_ln36_reg_330;

assign zext_ln45_2_fu_278_p1 = add_ln45_1_fu_272_p2;

assign zext_ln45_fu_259_p1 = tmp_1_fu_252_p3;

endmodule //cnn_dense_Pipeline_dense_for_flat_VITIS_LOOP_40_1
