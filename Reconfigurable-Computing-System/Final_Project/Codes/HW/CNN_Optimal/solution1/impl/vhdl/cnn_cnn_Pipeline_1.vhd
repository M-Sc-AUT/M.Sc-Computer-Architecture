-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_cnn_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pad_img0_27_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_27_ce0 : OUT STD_LOGIC;
    pad_img0_27_we0 : OUT STD_LOGIC;
    pad_img0_27_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_26_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_26_ce0 : OUT STD_LOGIC;
    pad_img0_26_we0 : OUT STD_LOGIC;
    pad_img0_26_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_25_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_25_ce0 : OUT STD_LOGIC;
    pad_img0_25_we0 : OUT STD_LOGIC;
    pad_img0_25_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_24_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_24_ce0 : OUT STD_LOGIC;
    pad_img0_24_we0 : OUT STD_LOGIC;
    pad_img0_24_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_23_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_23_ce0 : OUT STD_LOGIC;
    pad_img0_23_we0 : OUT STD_LOGIC;
    pad_img0_23_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_22_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_22_ce0 : OUT STD_LOGIC;
    pad_img0_22_we0 : OUT STD_LOGIC;
    pad_img0_22_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_21_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_21_ce0 : OUT STD_LOGIC;
    pad_img0_21_we0 : OUT STD_LOGIC;
    pad_img0_21_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_20_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_20_ce0 : OUT STD_LOGIC;
    pad_img0_20_we0 : OUT STD_LOGIC;
    pad_img0_20_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_19_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_19_ce0 : OUT STD_LOGIC;
    pad_img0_19_we0 : OUT STD_LOGIC;
    pad_img0_19_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_18_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_18_ce0 : OUT STD_LOGIC;
    pad_img0_18_we0 : OUT STD_LOGIC;
    pad_img0_18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_17_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_17_ce0 : OUT STD_LOGIC;
    pad_img0_17_we0 : OUT STD_LOGIC;
    pad_img0_17_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_16_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_16_ce0 : OUT STD_LOGIC;
    pad_img0_16_we0 : OUT STD_LOGIC;
    pad_img0_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_15_ce0 : OUT STD_LOGIC;
    pad_img0_15_we0 : OUT STD_LOGIC;
    pad_img0_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_14_ce0 : OUT STD_LOGIC;
    pad_img0_14_we0 : OUT STD_LOGIC;
    pad_img0_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_13_ce0 : OUT STD_LOGIC;
    pad_img0_13_we0 : OUT STD_LOGIC;
    pad_img0_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_12_ce0 : OUT STD_LOGIC;
    pad_img0_12_we0 : OUT STD_LOGIC;
    pad_img0_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_11_ce0 : OUT STD_LOGIC;
    pad_img0_11_we0 : OUT STD_LOGIC;
    pad_img0_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_10_ce0 : OUT STD_LOGIC;
    pad_img0_10_we0 : OUT STD_LOGIC;
    pad_img0_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_9_ce0 : OUT STD_LOGIC;
    pad_img0_9_we0 : OUT STD_LOGIC;
    pad_img0_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_8_ce0 : OUT STD_LOGIC;
    pad_img0_8_we0 : OUT STD_LOGIC;
    pad_img0_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_7_ce0 : OUT STD_LOGIC;
    pad_img0_7_we0 : OUT STD_LOGIC;
    pad_img0_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_6_ce0 : OUT STD_LOGIC;
    pad_img0_6_we0 : OUT STD_LOGIC;
    pad_img0_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_5_ce0 : OUT STD_LOGIC;
    pad_img0_5_we0 : OUT STD_LOGIC;
    pad_img0_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_4_ce0 : OUT STD_LOGIC;
    pad_img0_4_we0 : OUT STD_LOGIC;
    pad_img0_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_3_ce0 : OUT STD_LOGIC;
    pad_img0_3_we0 : OUT STD_LOGIC;
    pad_img0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_2_ce0 : OUT STD_LOGIC;
    pad_img0_2_we0 : OUT STD_LOGIC;
    pad_img0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_1_ce0 : OUT STD_LOGIC;
    pad_img0_1_we0 : OUT STD_LOGIC;
    pad_img0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pad_img0_ce0 : OUT STD_LOGIC;
    pad_img0_we0 : OUT STD_LOGIC;
    pad_img0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_cnn_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_484 : STD_LOGIC_VECTOR (10 downto 0) := "10010000100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv23_F10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000111100010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv22_D63 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000110101100011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv13_4A : STD_LOGIC_VECTOR (12 downto 0) := "0000001001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv11_22 : STD_LOGIC_VECTOR (10 downto 0) := "00000100010";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond125_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast1_reg_786 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast1_reg_786_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_63_fu_624_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_602_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_60_reg_800 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_66_fu_694_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_66_reg_806 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast4_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal phi_urem_fu_134 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal idx_urem_fu_666_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul30_fu_138 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal next_mul31_fu_608_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal phi_mul_fu_142 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal next_mul_fu_586_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_fu_146 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal empty_58_fu_574_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_602_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_602_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_632_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_632_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_648_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal next_urem_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_59_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_61_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_62_fu_703_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_546_fu_708_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_64_fu_711_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_fu_632_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_urem_6ns_5ns_6_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_urem_6ns_4ns_3_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_6ns_5ns_6_10_1_U1 : component cnn_urem_6ns_5ns_6_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_602_p0,
        din1 => grp_fu_602_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_602_p2);

    mul_6ns_8ns_13_1_1_U2 : component cnn_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_fu_632_p0,
        din1 => mul_fu_632_p1,
        dout => mul_fu_632_p2);

    urem_6ns_4ns_3_10_1_U3 : component cnn_urem_6ns_4ns_3_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_63_fu_624_p1,
        din1 => grp_fu_648_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_648_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_146 <= ap_const_lv11_0;
                elsif (((exitcond125_fu_568_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_fu_146 <= empty_58_fu_574_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_mul30_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul30_fu_138 <= ap_const_lv22_0;
                elsif (((exitcond125_fu_568_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_mul30_fu_138 <= next_mul31_fu_608_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_142 <= ap_const_lv23_0;
                elsif (((exitcond125_fu_568_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_mul_fu_142 <= next_mul_fu_586_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_134 <= ap_const_lv11_0;
                elsif (((exitcond125_fu_568_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_urem_fu_134 <= idx_urem_fu_666_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_60_reg_800 <= grp_fu_602_p2;
                empty_66_reg_806 <= empty_66_fu_694_p1;
                p_cast1_reg_786_pp0_iter10_reg <= p_cast1_reg_786_pp0_iter9_reg;
                p_cast1_reg_786_pp0_iter2_reg <= p_cast1_reg_786;
                p_cast1_reg_786_pp0_iter3_reg <= p_cast1_reg_786_pp0_iter2_reg;
                p_cast1_reg_786_pp0_iter4_reg <= p_cast1_reg_786_pp0_iter3_reg;
                p_cast1_reg_786_pp0_iter5_reg <= p_cast1_reg_786_pp0_iter4_reg;
                p_cast1_reg_786_pp0_iter6_reg <= p_cast1_reg_786_pp0_iter5_reg;
                p_cast1_reg_786_pp0_iter7_reg <= p_cast1_reg_786_pp0_iter6_reg;
                p_cast1_reg_786_pp0_iter8_reg <= p_cast1_reg_786_pp0_iter7_reg;
                p_cast1_reg_786_pp0_iter9_reg <= p_cast1_reg_786_pp0_iter8_reg;
                tmp_reg_795_pp0_iter10_reg <= tmp_reg_795_pp0_iter9_reg;
                tmp_reg_795_pp0_iter2_reg <= tmp_reg_795;
                tmp_reg_795_pp0_iter3_reg <= tmp_reg_795_pp0_iter2_reg;
                tmp_reg_795_pp0_iter4_reg <= tmp_reg_795_pp0_iter3_reg;
                tmp_reg_795_pp0_iter5_reg <= tmp_reg_795_pp0_iter4_reg;
                tmp_reg_795_pp0_iter6_reg <= tmp_reg_795_pp0_iter5_reg;
                tmp_reg_795_pp0_iter7_reg <= tmp_reg_795_pp0_iter6_reg;
                tmp_reg_795_pp0_iter8_reg <= tmp_reg_795_pp0_iter7_reg;
                tmp_reg_795_pp0_iter9_reg <= tmp_reg_795_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                p_cast1_reg_786 <= phi_mul30_fu_138(21 downto 20);
                tmp_reg_795 <= mul_fu_632_p2(12 downto 9);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, exitcond125_fu_568_p2)
    begin
        if (((exitcond125_fu_568_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_58_fu_574_p2 <= std_logic_vector(unsigned(empty_fu_146) + unsigned(ap_const_lv11_1));
    empty_59_fu_660_p2 <= "1" when (unsigned(next_urem_fu_654_p2) < unsigned(ap_const_lv11_22)) else "0";
    empty_61_fu_698_p2 <= std_logic_vector(shift_left(unsigned(empty_60_reg_800),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    empty_62_fu_703_p2 <= std_logic_vector(unsigned(empty_61_fu_698_p2) + unsigned(empty_60_reg_800));
    empty_63_fu_624_p1 <= phi_urem_fu_134(6 - 1 downto 0);
    empty_64_fu_711_p2 <= std_logic_vector(unsigned(empty_62_fu_703_p2) + unsigned(tmp_546_fu_708_p1));
    empty_66_fu_694_p1 <= grp_fu_648_p2(3 - 1 downto 0);
    exitcond125_fu_568_p2 <= "1" when (empty_fu_146 = ap_const_lv11_484) else "0";
    grp_fu_602_p0 <= phi_mul_fu_142(22 downto 17);
    grp_fu_602_p1 <= ap_const_lv6_9(5 - 1 downto 0);
    grp_fu_648_p1 <= ap_const_lv6_7(4 - 1 downto 0);
    idx_urem_fu_666_p3 <= 
        next_urem_fu_654_p2 when (empty_59_fu_660_p2(0) = '1') else 
        ap_const_lv11_0;
    mul_fu_632_p0 <= mul_fu_632_p00(6 - 1 downto 0);
    mul_fu_632_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_63_fu_624_p1),13));
    mul_fu_632_p1 <= ap_const_lv13_4A(8 - 1 downto 0);
    next_mul31_fu_608_p2 <= std_logic_vector(unsigned(phi_mul30_fu_138) + unsigned(ap_const_lv22_D63));
    next_mul_fu_586_p2 <= std_logic_vector(unsigned(phi_mul_fu_142) + unsigned(ap_const_lv23_F10));
    next_urem_fu_654_p2 <= std_logic_vector(unsigned(phi_urem_fu_134) + unsigned(ap_const_lv11_1));
    p_cast4_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_64_fu_711_p2),64));
    pad_img0_10_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_10_ce0 <= ap_const_logic_1;
        else 
            pad_img0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_10_d0 <= ap_const_lv32_0;

    pad_img0_10_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_3) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_10_we0 <= ap_const_logic_1;
        else 
            pad_img0_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_11_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_11_ce0 <= ap_const_logic_1;
        else 
            pad_img0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_11_d0 <= ap_const_lv32_0;

    pad_img0_11_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_4) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_11_we0 <= ap_const_logic_1;
        else 
            pad_img0_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_12_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_12_ce0 <= ap_const_logic_1;
        else 
            pad_img0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_12_d0 <= ap_const_lv32_0;

    pad_img0_12_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_5) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_12_we0 <= ap_const_logic_1;
        else 
            pad_img0_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_13_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_13_ce0 <= ap_const_logic_1;
        else 
            pad_img0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_13_d0 <= ap_const_lv32_0;

    pad_img0_13_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((empty_66_reg_806 = ap_const_lv3_6) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1)) or ((empty_66_reg_806 = ap_const_lv3_7) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1))))) then 
            pad_img0_13_we0 <= ap_const_logic_1;
        else 
            pad_img0_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_14_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_14_ce0 <= ap_const_logic_1;
        else 
            pad_img0_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_14_d0 <= ap_const_lv32_0;

    pad_img0_14_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_0) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_14_we0 <= ap_const_logic_1;
        else 
            pad_img0_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_15_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_15_ce0 <= ap_const_logic_1;
        else 
            pad_img0_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_15_d0 <= ap_const_lv32_0;

    pad_img0_15_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_1) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_15_we0 <= ap_const_logic_1;
        else 
            pad_img0_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_16_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_16_ce0 <= ap_const_logic_1;
        else 
            pad_img0_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_16_d0 <= ap_const_lv32_0;

    pad_img0_16_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_2) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_16_we0 <= ap_const_logic_1;
        else 
            pad_img0_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_17_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_17_ce0 <= ap_const_logic_1;
        else 
            pad_img0_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_17_d0 <= ap_const_lv32_0;

    pad_img0_17_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_3) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_17_we0 <= ap_const_logic_1;
        else 
            pad_img0_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_18_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_18_ce0 <= ap_const_logic_1;
        else 
            pad_img0_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_18_d0 <= ap_const_lv32_0;

    pad_img0_18_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_4) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_18_we0 <= ap_const_logic_1;
        else 
            pad_img0_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_19_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_19_ce0 <= ap_const_logic_1;
        else 
            pad_img0_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_19_d0 <= ap_const_lv32_0;

    pad_img0_19_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_5) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_19_we0 <= ap_const_logic_1;
        else 
            pad_img0_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_1_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_1_ce0 <= ap_const_logic_1;
        else 
            pad_img0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_1_d0 <= ap_const_lv32_0;

    pad_img0_1_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_1) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_1_we0 <= ap_const_logic_1;
        else 
            pad_img0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_20_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_20_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_20_ce0 <= ap_const_logic_1;
        else 
            pad_img0_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_20_d0 <= ap_const_lv32_0;

    pad_img0_20_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((empty_66_reg_806 = ap_const_lv3_6) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2)) or ((empty_66_reg_806 = ap_const_lv3_7) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_2))))) then 
            pad_img0_20_we0 <= ap_const_logic_1;
        else 
            pad_img0_20_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_21_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_21_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_21_ce0 <= ap_const_logic_1;
        else 
            pad_img0_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_21_d0 <= ap_const_lv32_0;

    pad_img0_21_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_0) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_21_we0 <= ap_const_logic_1;
        else 
            pad_img0_21_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_22_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_22_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_22_ce0 <= ap_const_logic_1;
        else 
            pad_img0_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_22_d0 <= ap_const_lv32_0;

    pad_img0_22_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_1) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_22_we0 <= ap_const_logic_1;
        else 
            pad_img0_22_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_23_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_23_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_23_ce0 <= ap_const_logic_1;
        else 
            pad_img0_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_23_d0 <= ap_const_lv32_0;

    pad_img0_23_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_2) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_23_we0 <= ap_const_logic_1;
        else 
            pad_img0_23_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_24_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_24_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_24_ce0 <= ap_const_logic_1;
        else 
            pad_img0_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_24_d0 <= ap_const_lv32_0;

    pad_img0_24_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_3) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_24_we0 <= ap_const_logic_1;
        else 
            pad_img0_24_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_25_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_25_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_25_ce0 <= ap_const_logic_1;
        else 
            pad_img0_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_25_d0 <= ap_const_lv32_0;

    pad_img0_25_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_4) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_25_we0 <= ap_const_logic_1;
        else 
            pad_img0_25_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_26_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_26_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_26_ce0 <= ap_const_logic_1;
        else 
            pad_img0_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_26_d0 <= ap_const_lv32_0;

    pad_img0_26_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_5) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_26_we0 <= ap_const_logic_1;
        else 
            pad_img0_26_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_27_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_27_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_27_ce0 <= ap_const_logic_1;
        else 
            pad_img0_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_27_d0 <= ap_const_lv32_0;

    pad_img0_27_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((empty_66_reg_806 = ap_const_lv3_6) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3)) or ((empty_66_reg_806 = ap_const_lv3_7) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_3))))) then 
            pad_img0_27_we0 <= ap_const_logic_1;
        else 
            pad_img0_27_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_2_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_2_ce0 <= ap_const_logic_1;
        else 
            pad_img0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_2_d0 <= ap_const_lv32_0;

    pad_img0_2_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_2) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_2_we0 <= ap_const_logic_1;
        else 
            pad_img0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_3_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_3_ce0 <= ap_const_logic_1;
        else 
            pad_img0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_3_d0 <= ap_const_lv32_0;

    pad_img0_3_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_3) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_3_we0 <= ap_const_logic_1;
        else 
            pad_img0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_4_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_4_ce0 <= ap_const_logic_1;
        else 
            pad_img0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_4_d0 <= ap_const_lv32_0;

    pad_img0_4_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_4) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_4_we0 <= ap_const_logic_1;
        else 
            pad_img0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_5_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_5_ce0 <= ap_const_logic_1;
        else 
            pad_img0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_5_d0 <= ap_const_lv32_0;

    pad_img0_5_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_5) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_5_we0 <= ap_const_logic_1;
        else 
            pad_img0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_6_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_6_ce0 <= ap_const_logic_1;
        else 
            pad_img0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_6_d0 <= ap_const_lv32_0;

    pad_img0_6_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((empty_66_reg_806 = ap_const_lv3_6) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0)) or ((empty_66_reg_806 = ap_const_lv3_7) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0))))) then 
            pad_img0_6_we0 <= ap_const_logic_1;
        else 
            pad_img0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_7_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_7_ce0 <= ap_const_logic_1;
        else 
            pad_img0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_7_d0 <= ap_const_lv32_0;

    pad_img0_7_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_0) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_7_we0 <= ap_const_logic_1;
        else 
            pad_img0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_8_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_8_ce0 <= ap_const_logic_1;
        else 
            pad_img0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_8_d0 <= ap_const_lv32_0;

    pad_img0_8_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_1) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_8_we0 <= ap_const_logic_1;
        else 
            pad_img0_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_9_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_9_ce0 <= ap_const_logic_1;
        else 
            pad_img0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_9_d0 <= ap_const_lv32_0;

    pad_img0_9_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_2) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_9_we0 <= ap_const_logic_1;
        else 
            pad_img0_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_address0 <= p_cast4_fu_717_p1(6 - 1 downto 0);

    pad_img0_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_ce0 <= ap_const_logic_1;
        else 
            pad_img0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_d0 <= ap_const_lv32_0;

    pad_img0_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, p_cast1_reg_786_pp0_iter10_reg, empty_66_reg_806)
    begin
        if (((empty_66_reg_806 = ap_const_lv3_0) and (p_cast1_reg_786_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            pad_img0_we0 <= ap_const_logic_1;
        else 
            pad_img0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_546_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_795_pp0_iter10_reg),6));
end behav;
