-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_dataflow_section is
port (
    pad_img0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img0_ce0 : OUT STD_LOGIC;
    pad_img0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_we0 : OUT STD_LOGIC;
    pad_img0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img0_ce1 : OUT STD_LOGIC;
    pad_img0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_we1 : OUT STD_LOGIC;
    pad_img1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img1_ce0 : OUT STD_LOGIC;
    pad_img1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img1_we0 : OUT STD_LOGIC;
    pad_img1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img1_ce1 : OUT STD_LOGIC;
    pad_img1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img1_we1 : OUT STD_LOGIC;
    pad_img2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img2_ce0 : OUT STD_LOGIC;
    pad_img2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img2_we0 : OUT STD_LOGIC;
    pad_img2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img2_ce1 : OUT STD_LOGIC;
    pad_img2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img2_we1 : OUT STD_LOGIC;
    pad_img3_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_0_ce0 : OUT STD_LOGIC;
    pad_img3_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_0_we0 : OUT STD_LOGIC;
    pad_img3_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_0_ce1 : OUT STD_LOGIC;
    pad_img3_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_0_we1 : OUT STD_LOGIC;
    pad_img3_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_1_ce0 : OUT STD_LOGIC;
    pad_img3_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_1_we0 : OUT STD_LOGIC;
    pad_img3_0_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_1_ce1 : OUT STD_LOGIC;
    pad_img3_0_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_1_we1 : OUT STD_LOGIC;
    pad_img3_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_2_ce0 : OUT STD_LOGIC;
    pad_img3_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_2_we0 : OUT STD_LOGIC;
    pad_img3_0_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_2_ce1 : OUT STD_LOGIC;
    pad_img3_0_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_2_we1 : OUT STD_LOGIC;
    pad_img3_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_3_ce0 : OUT STD_LOGIC;
    pad_img3_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_3_we0 : OUT STD_LOGIC;
    pad_img3_0_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_3_ce1 : OUT STD_LOGIC;
    pad_img3_0_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_3_we1 : OUT STD_LOGIC;
    pad_img3_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_4_ce0 : OUT STD_LOGIC;
    pad_img3_0_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_4_we0 : OUT STD_LOGIC;
    pad_img3_0_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_4_ce1 : OUT STD_LOGIC;
    pad_img3_0_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_4_we1 : OUT STD_LOGIC;
    pad_img3_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_5_ce0 : OUT STD_LOGIC;
    pad_img3_0_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_5_we0 : OUT STD_LOGIC;
    pad_img3_0_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_5_ce1 : OUT STD_LOGIC;
    pad_img3_0_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_5_we1 : OUT STD_LOGIC;
    pad_img3_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_6_ce0 : OUT STD_LOGIC;
    pad_img3_0_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_6_we0 : OUT STD_LOGIC;
    pad_img3_0_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_0_6_ce1 : OUT STD_LOGIC;
    pad_img3_0_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_0_6_we1 : OUT STD_LOGIC;
    pad_img3_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_0_ce0 : OUT STD_LOGIC;
    pad_img3_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_0_we0 : OUT STD_LOGIC;
    pad_img3_1_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_0_ce1 : OUT STD_LOGIC;
    pad_img3_1_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_0_we1 : OUT STD_LOGIC;
    pad_img3_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_1_ce0 : OUT STD_LOGIC;
    pad_img3_1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_1_we0 : OUT STD_LOGIC;
    pad_img3_1_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_1_ce1 : OUT STD_LOGIC;
    pad_img3_1_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_1_we1 : OUT STD_LOGIC;
    pad_img3_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_2_ce0 : OUT STD_LOGIC;
    pad_img3_1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_2_we0 : OUT STD_LOGIC;
    pad_img3_1_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_2_ce1 : OUT STD_LOGIC;
    pad_img3_1_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_2_we1 : OUT STD_LOGIC;
    pad_img3_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_3_ce0 : OUT STD_LOGIC;
    pad_img3_1_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_3_we0 : OUT STD_LOGIC;
    pad_img3_1_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_3_ce1 : OUT STD_LOGIC;
    pad_img3_1_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_3_we1 : OUT STD_LOGIC;
    pad_img3_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_4_ce0 : OUT STD_LOGIC;
    pad_img3_1_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_4_we0 : OUT STD_LOGIC;
    pad_img3_1_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_4_ce1 : OUT STD_LOGIC;
    pad_img3_1_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_4_we1 : OUT STD_LOGIC;
    pad_img3_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_5_ce0 : OUT STD_LOGIC;
    pad_img3_1_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_5_we0 : OUT STD_LOGIC;
    pad_img3_1_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_5_ce1 : OUT STD_LOGIC;
    pad_img3_1_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_5_we1 : OUT STD_LOGIC;
    pad_img3_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_6_ce0 : OUT STD_LOGIC;
    pad_img3_1_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_6_we0 : OUT STD_LOGIC;
    pad_img3_1_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_1_6_ce1 : OUT STD_LOGIC;
    pad_img3_1_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_1_6_we1 : OUT STD_LOGIC;
    pad_img3_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_0_ce0 : OUT STD_LOGIC;
    pad_img3_2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_0_we0 : OUT STD_LOGIC;
    pad_img3_2_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_0_ce1 : OUT STD_LOGIC;
    pad_img3_2_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_0_we1 : OUT STD_LOGIC;
    pad_img3_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_1_ce0 : OUT STD_LOGIC;
    pad_img3_2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_1_we0 : OUT STD_LOGIC;
    pad_img3_2_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_1_ce1 : OUT STD_LOGIC;
    pad_img3_2_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_1_we1 : OUT STD_LOGIC;
    pad_img3_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_2_ce0 : OUT STD_LOGIC;
    pad_img3_2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_2_we0 : OUT STD_LOGIC;
    pad_img3_2_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_2_ce1 : OUT STD_LOGIC;
    pad_img3_2_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_2_we1 : OUT STD_LOGIC;
    pad_img3_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_3_ce0 : OUT STD_LOGIC;
    pad_img3_2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_3_we0 : OUT STD_LOGIC;
    pad_img3_2_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_3_ce1 : OUT STD_LOGIC;
    pad_img3_2_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_3_we1 : OUT STD_LOGIC;
    pad_img3_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_4_ce0 : OUT STD_LOGIC;
    pad_img3_2_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_4_we0 : OUT STD_LOGIC;
    pad_img3_2_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_4_ce1 : OUT STD_LOGIC;
    pad_img3_2_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_4_we1 : OUT STD_LOGIC;
    pad_img3_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_5_ce0 : OUT STD_LOGIC;
    pad_img3_2_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_5_we0 : OUT STD_LOGIC;
    pad_img3_2_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_5_ce1 : OUT STD_LOGIC;
    pad_img3_2_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_5_we1 : OUT STD_LOGIC;
    pad_img3_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_6_ce0 : OUT STD_LOGIC;
    pad_img3_2_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_6_we0 : OUT STD_LOGIC;
    pad_img3_2_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_2_6_ce1 : OUT STD_LOGIC;
    pad_img3_2_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_2_6_we1 : OUT STD_LOGIC;
    pad_img3_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_0_ce0 : OUT STD_LOGIC;
    pad_img3_3_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_0_we0 : OUT STD_LOGIC;
    pad_img3_3_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_0_ce1 : OUT STD_LOGIC;
    pad_img3_3_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_0_we1 : OUT STD_LOGIC;
    pad_img3_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_1_ce0 : OUT STD_LOGIC;
    pad_img3_3_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_1_we0 : OUT STD_LOGIC;
    pad_img3_3_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_1_ce1 : OUT STD_LOGIC;
    pad_img3_3_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_1_we1 : OUT STD_LOGIC;
    pad_img3_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_2_ce0 : OUT STD_LOGIC;
    pad_img3_3_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_2_we0 : OUT STD_LOGIC;
    pad_img3_3_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_2_ce1 : OUT STD_LOGIC;
    pad_img3_3_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_2_we1 : OUT STD_LOGIC;
    pad_img3_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_3_ce0 : OUT STD_LOGIC;
    pad_img3_3_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_3_we0 : OUT STD_LOGIC;
    pad_img3_3_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_3_ce1 : OUT STD_LOGIC;
    pad_img3_3_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_3_we1 : OUT STD_LOGIC;
    pad_img3_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_4_ce0 : OUT STD_LOGIC;
    pad_img3_3_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_4_we0 : OUT STD_LOGIC;
    pad_img3_3_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_4_ce1 : OUT STD_LOGIC;
    pad_img3_3_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_4_we1 : OUT STD_LOGIC;
    pad_img3_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_5_ce0 : OUT STD_LOGIC;
    pad_img3_3_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_5_we0 : OUT STD_LOGIC;
    pad_img3_3_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_5_ce1 : OUT STD_LOGIC;
    pad_img3_3_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_5_we1 : OUT STD_LOGIC;
    pad_img3_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_6_ce0 : OUT STD_LOGIC;
    pad_img3_3_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_6_we0 : OUT STD_LOGIC;
    pad_img3_3_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_3_6_ce1 : OUT STD_LOGIC;
    pad_img3_3_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_3_6_we1 : OUT STD_LOGIC;
    pad_img3_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_0_ce0 : OUT STD_LOGIC;
    pad_img3_4_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_0_we0 : OUT STD_LOGIC;
    pad_img3_4_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_0_ce1 : OUT STD_LOGIC;
    pad_img3_4_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_0_we1 : OUT STD_LOGIC;
    pad_img3_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_1_ce0 : OUT STD_LOGIC;
    pad_img3_4_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_1_we0 : OUT STD_LOGIC;
    pad_img3_4_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_1_ce1 : OUT STD_LOGIC;
    pad_img3_4_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_1_we1 : OUT STD_LOGIC;
    pad_img3_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_2_ce0 : OUT STD_LOGIC;
    pad_img3_4_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_2_we0 : OUT STD_LOGIC;
    pad_img3_4_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_2_ce1 : OUT STD_LOGIC;
    pad_img3_4_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_2_we1 : OUT STD_LOGIC;
    pad_img3_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_3_ce0 : OUT STD_LOGIC;
    pad_img3_4_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_3_we0 : OUT STD_LOGIC;
    pad_img3_4_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_3_ce1 : OUT STD_LOGIC;
    pad_img3_4_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_3_we1 : OUT STD_LOGIC;
    pad_img3_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_4_ce0 : OUT STD_LOGIC;
    pad_img3_4_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_4_we0 : OUT STD_LOGIC;
    pad_img3_4_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_4_ce1 : OUT STD_LOGIC;
    pad_img3_4_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_4_we1 : OUT STD_LOGIC;
    pad_img3_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_5_ce0 : OUT STD_LOGIC;
    pad_img3_4_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_5_we0 : OUT STD_LOGIC;
    pad_img3_4_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_5_ce1 : OUT STD_LOGIC;
    pad_img3_4_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_5_we1 : OUT STD_LOGIC;
    pad_img3_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_6_ce0 : OUT STD_LOGIC;
    pad_img3_4_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_6_we0 : OUT STD_LOGIC;
    pad_img3_4_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_4_6_ce1 : OUT STD_LOGIC;
    pad_img3_4_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_4_6_we1 : OUT STD_LOGIC;
    pad_img3_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_0_ce0 : OUT STD_LOGIC;
    pad_img3_5_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_0_we0 : OUT STD_LOGIC;
    pad_img3_5_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_0_ce1 : OUT STD_LOGIC;
    pad_img3_5_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_0_we1 : OUT STD_LOGIC;
    pad_img3_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_1_ce0 : OUT STD_LOGIC;
    pad_img3_5_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_1_we0 : OUT STD_LOGIC;
    pad_img3_5_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_1_ce1 : OUT STD_LOGIC;
    pad_img3_5_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_1_we1 : OUT STD_LOGIC;
    pad_img3_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_2_ce0 : OUT STD_LOGIC;
    pad_img3_5_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_2_we0 : OUT STD_LOGIC;
    pad_img3_5_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_2_ce1 : OUT STD_LOGIC;
    pad_img3_5_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_2_we1 : OUT STD_LOGIC;
    pad_img3_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_3_ce0 : OUT STD_LOGIC;
    pad_img3_5_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_3_we0 : OUT STD_LOGIC;
    pad_img3_5_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_3_ce1 : OUT STD_LOGIC;
    pad_img3_5_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_3_we1 : OUT STD_LOGIC;
    pad_img3_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_4_ce0 : OUT STD_LOGIC;
    pad_img3_5_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_4_we0 : OUT STD_LOGIC;
    pad_img3_5_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_4_ce1 : OUT STD_LOGIC;
    pad_img3_5_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_4_we1 : OUT STD_LOGIC;
    pad_img3_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_5_ce0 : OUT STD_LOGIC;
    pad_img3_5_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_5_we0 : OUT STD_LOGIC;
    pad_img3_5_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_5_ce1 : OUT STD_LOGIC;
    pad_img3_5_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_5_we1 : OUT STD_LOGIC;
    pad_img3_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_6_ce0 : OUT STD_LOGIC;
    pad_img3_5_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_6_we0 : OUT STD_LOGIC;
    pad_img3_5_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_5_6_ce1 : OUT STD_LOGIC;
    pad_img3_5_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_5_6_we1 : OUT STD_LOGIC;
    pad_img3_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_0_ce0 : OUT STD_LOGIC;
    pad_img3_6_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_0_we0 : OUT STD_LOGIC;
    pad_img3_6_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_0_ce1 : OUT STD_LOGIC;
    pad_img3_6_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_0_we1 : OUT STD_LOGIC;
    pad_img3_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_1_ce0 : OUT STD_LOGIC;
    pad_img3_6_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_1_we0 : OUT STD_LOGIC;
    pad_img3_6_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_1_ce1 : OUT STD_LOGIC;
    pad_img3_6_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_1_we1 : OUT STD_LOGIC;
    pad_img3_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_2_ce0 : OUT STD_LOGIC;
    pad_img3_6_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_2_we0 : OUT STD_LOGIC;
    pad_img3_6_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_2_ce1 : OUT STD_LOGIC;
    pad_img3_6_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_2_we1 : OUT STD_LOGIC;
    pad_img3_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_3_ce0 : OUT STD_LOGIC;
    pad_img3_6_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_3_we0 : OUT STD_LOGIC;
    pad_img3_6_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_3_ce1 : OUT STD_LOGIC;
    pad_img3_6_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_3_we1 : OUT STD_LOGIC;
    pad_img3_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_4_ce0 : OUT STD_LOGIC;
    pad_img3_6_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_4_we0 : OUT STD_LOGIC;
    pad_img3_6_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_4_ce1 : OUT STD_LOGIC;
    pad_img3_6_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_4_we1 : OUT STD_LOGIC;
    pad_img3_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_5_ce0 : OUT STD_LOGIC;
    pad_img3_6_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_5_we0 : OUT STD_LOGIC;
    pad_img3_6_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_5_ce1 : OUT STD_LOGIC;
    pad_img3_6_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_5_we1 : OUT STD_LOGIC;
    pad_img3_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_6_ce0 : OUT STD_LOGIC;
    pad_img3_6_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_6_we0 : OUT STD_LOGIC;
    pad_img3_6_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pad_img3_6_6_ce1 : OUT STD_LOGIC;
    pad_img3_6_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img3_6_6_we1 : OUT STD_LOGIC;
    prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce0 : OUT STD_LOGIC;
    prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_we0 : OUT STD_LOGIC;
    prediction_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce1 : OUT STD_LOGIC;
    prediction_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of cnn_dataflow_section is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal convolutional_layer_U0_ap_start : STD_LOGIC;
    signal convolutional_layer_U0_ap_done : STD_LOGIC;
    signal convolutional_layer_U0_ap_continue : STD_LOGIC;
    signal convolutional_layer_U0_ap_idle : STD_LOGIC;
    signal convolutional_layer_U0_ap_ready : STD_LOGIC;
    signal convolutional_layer_U0_start_out : STD_LOGIC;
    signal convolutional_layer_U0_start_write : STD_LOGIC;
    signal convolutional_layer_U0_pad_img0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convolutional_layer_U0_pad_img0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal convolutional_layer_U0_pad_img0_ce1 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convolutional_layer_U0_pad_img1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal convolutional_layer_U0_pad_img1_ce1 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convolutional_layer_U0_pad_img2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal convolutional_layer_U0_pad_img2_ce1 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_0_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_0_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_1_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_1_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_2_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_2_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_3_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_3_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_4_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_4_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_5_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_5_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_0_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_1_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_2_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_3_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_4_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_5_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_pad_img3_6_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal convolutional_layer_U0_pad_img3_6_6_ce0 : STD_LOGIC;
    signal convolutional_layer_U0_conv_to_pool_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal convolutional_layer_U0_conv_to_pool_streams_0_write : STD_LOGIC;
    signal convolutional_layer_U0_conv_to_pool_streams_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal convolutional_layer_U0_conv_to_pool_streams_1_write : STD_LOGIC;
    signal convolutional_layer_U0_conv_to_pool_streams_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal convolutional_layer_U0_conv_to_pool_streams_2_write : STD_LOGIC;
    signal convolutional_layer_U0_conv_to_pool_streams_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal convolutional_layer_U0_conv_to_pool_streams_3_write : STD_LOGIC;
    signal max_pooling_layer_U0_ap_start : STD_LOGIC;
    signal max_pooling_layer_U0_ap_done : STD_LOGIC;
    signal max_pooling_layer_U0_ap_continue : STD_LOGIC;
    signal max_pooling_layer_U0_ap_idle : STD_LOGIC;
    signal max_pooling_layer_U0_ap_ready : STD_LOGIC;
    signal max_pooling_layer_U0_start_out : STD_LOGIC;
    signal max_pooling_layer_U0_start_write : STD_LOGIC;
    signal max_pooling_layer_U0_conv_to_pool_streams_0_read : STD_LOGIC;
    signal max_pooling_layer_U0_conv_to_pool_streams_1_read : STD_LOGIC;
    signal max_pooling_layer_U0_conv_to_pool_streams_2_read : STD_LOGIC;
    signal max_pooling_layer_U0_conv_to_pool_streams_3_read : STD_LOGIC;
    signal max_pooling_layer_U0_pool_to_flat_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling_layer_U0_pool_to_flat_streams_0_write : STD_LOGIC;
    signal max_pooling_layer_U0_pool_to_flat_streams_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling_layer_U0_pool_to_flat_streams_1_write : STD_LOGIC;
    signal max_pooling_layer_U0_pool_to_flat_streams_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling_layer_U0_pool_to_flat_streams_2_write : STD_LOGIC;
    signal max_pooling_layer_U0_pool_to_flat_streams_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pooling_layer_U0_pool_to_flat_streams_3_write : STD_LOGIC;
    signal flattening_layer_U0_ap_start : STD_LOGIC;
    signal flattening_layer_U0_ap_done : STD_LOGIC;
    signal flattening_layer_U0_ap_continue : STD_LOGIC;
    signal flattening_layer_U0_ap_idle : STD_LOGIC;
    signal flattening_layer_U0_ap_ready : STD_LOGIC;
    signal flattening_layer_U0_start_out : STD_LOGIC;
    signal flattening_layer_U0_start_write : STD_LOGIC;
    signal flattening_layer_U0_pool_to_flat_streams_0_read : STD_LOGIC;
    signal flattening_layer_U0_pool_to_flat_streams_1_read : STD_LOGIC;
    signal flattening_layer_U0_pool_to_flat_streams_2_read : STD_LOGIC;
    signal flattening_layer_U0_pool_to_flat_streams_3_read : STD_LOGIC;
    signal flattening_layer_U0_flat_to_dense_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal flattening_layer_U0_flat_to_dense_streams_0_write : STD_LOGIC;
    signal flattening_layer_U0_flat_to_dense_streams_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal flattening_layer_U0_flat_to_dense_streams_1_write : STD_LOGIC;
    signal flattening_layer_U0_flat_to_dense_streams_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal flattening_layer_U0_flat_to_dense_streams_2_write : STD_LOGIC;
    signal flattening_layer_U0_flat_to_dense_streams_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal flattening_layer_U0_flat_to_dense_streams_3_write : STD_LOGIC;
    signal dense_layer_U0_ap_start : STD_LOGIC;
    signal dense_layer_U0_ap_done : STD_LOGIC;
    signal dense_layer_U0_ap_continue : STD_LOGIC;
    signal dense_layer_U0_ap_idle : STD_LOGIC;
    signal dense_layer_U0_ap_ready : STD_LOGIC;
    signal dense_layer_U0_flat_to_dense_streams_0_read : STD_LOGIC;
    signal dense_layer_U0_flat_to_dense_streams_1_read : STD_LOGIC;
    signal dense_layer_U0_flat_to_dense_streams_2_read : STD_LOGIC;
    signal dense_layer_U0_flat_to_dense_streams_3_read : STD_LOGIC;
    signal dense_layer_U0_dense_to_softmax_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_layer_U0_dense_to_softmax_streams_0_write : STD_LOGIC;
    signal dense_layer_U0_dense_to_softmax_streams_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_layer_U0_dense_to_softmax_streams_1_write : STD_LOGIC;
    signal dense_layer_U0_dense_to_softmax_streams_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_layer_U0_dense_to_softmax_streams_2_write : STD_LOGIC;
    signal dense_layer_U0_dense_to_softmax_streams_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_layer_U0_dense_to_softmax_streams_3_write : STD_LOGIC;
    signal dense_layer_soft_max_U0_ap_start : STD_LOGIC;
    signal dense_layer_soft_max_U0_ap_done : STD_LOGIC;
    signal dense_layer_soft_max_U0_ap_continue : STD_LOGIC;
    signal dense_layer_soft_max_U0_ap_idle : STD_LOGIC;
    signal dense_layer_soft_max_U0_ap_ready : STD_LOGIC;
    signal dense_layer_soft_max_U0_dense_to_softmax_streams_0_read : STD_LOGIC;
    signal dense_layer_soft_max_U0_dense_to_softmax_streams_1_read : STD_LOGIC;
    signal dense_layer_soft_max_U0_dense_to_softmax_streams_2_read : STD_LOGIC;
    signal dense_layer_soft_max_U0_dense_to_softmax_streams_3_read : STD_LOGIC;
    signal dense_layer_soft_max_U0_prediction_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_layer_soft_max_U0_prediction_ce0 : STD_LOGIC;
    signal dense_layer_soft_max_U0_prediction_we0 : STD_LOGIC;
    signal dense_layer_soft_max_U0_prediction_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_layer_soft_max_U0_prediction_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_layer_soft_max_U0_prediction_ce1 : STD_LOGIC;
    signal conv_to_pool_streams_full_n : STD_LOGIC;
    signal conv_to_pool_streams_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_to_pool_streams_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_empty_n : STD_LOGIC;
    signal conv_to_pool_streams_1_full_n : STD_LOGIC;
    signal conv_to_pool_streams_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_to_pool_streams_1_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_1_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_1_empty_n : STD_LOGIC;
    signal conv_to_pool_streams_2_full_n : STD_LOGIC;
    signal conv_to_pool_streams_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_to_pool_streams_2_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_2_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_2_empty_n : STD_LOGIC;
    signal conv_to_pool_streams_3_full_n : STD_LOGIC;
    signal conv_to_pool_streams_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_to_pool_streams_3_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_3_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_to_pool_streams_3_empty_n : STD_LOGIC;
    signal pool_to_flat_streams_full_n : STD_LOGIC;
    signal pool_to_flat_streams_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_to_flat_streams_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_empty_n : STD_LOGIC;
    signal pool_to_flat_streams_1_full_n : STD_LOGIC;
    signal pool_to_flat_streams_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_to_flat_streams_1_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_1_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_1_empty_n : STD_LOGIC;
    signal pool_to_flat_streams_2_full_n : STD_LOGIC;
    signal pool_to_flat_streams_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_to_flat_streams_2_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_2_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_2_empty_n : STD_LOGIC;
    signal pool_to_flat_streams_3_full_n : STD_LOGIC;
    signal pool_to_flat_streams_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_to_flat_streams_3_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_3_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal pool_to_flat_streams_3_empty_n : STD_LOGIC;
    signal flat_to_dense_streams_full_n : STD_LOGIC;
    signal flat_to_dense_streams_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal flat_to_dense_streams_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_empty_n : STD_LOGIC;
    signal flat_to_dense_streams_1_full_n : STD_LOGIC;
    signal flat_to_dense_streams_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal flat_to_dense_streams_1_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_1_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_1_empty_n : STD_LOGIC;
    signal flat_to_dense_streams_2_full_n : STD_LOGIC;
    signal flat_to_dense_streams_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal flat_to_dense_streams_2_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_2_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_2_empty_n : STD_LOGIC;
    signal flat_to_dense_streams_3_full_n : STD_LOGIC;
    signal flat_to_dense_streams_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal flat_to_dense_streams_3_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_3_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_to_dense_streams_3_empty_n : STD_LOGIC;
    signal dense_to_softmax_streams_full_n : STD_LOGIC;
    signal dense_to_softmax_streams_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_empty_n : STD_LOGIC;
    signal dense_to_softmax_streams_1_full_n : STD_LOGIC;
    signal dense_to_softmax_streams_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_1_empty_n : STD_LOGIC;
    signal dense_to_softmax_streams_2_full_n : STD_LOGIC;
    signal dense_to_softmax_streams_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_2_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_2_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_2_empty_n : STD_LOGIC;
    signal dense_to_softmax_streams_3_full_n : STD_LOGIC;
    signal dense_to_softmax_streams_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_3_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_3_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_to_softmax_streams_3_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_convolutional_layer_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_convolutional_layer_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_dense_layer_soft_max_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dense_layer_soft_max_U0_ap_ready : STD_LOGIC;
    signal start_for_max_pooling_layer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_max_pooling_layer_U0_full_n : STD_LOGIC;
    signal start_for_max_pooling_layer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_max_pooling_layer_U0_empty_n : STD_LOGIC;
    signal start_for_flattening_layer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flattening_layer_U0_full_n : STD_LOGIC;
    signal start_for_flattening_layer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flattening_layer_U0_empty_n : STD_LOGIC;
    signal start_for_dense_layer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dense_layer_U0_full_n : STD_LOGIC;
    signal start_for_dense_layer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dense_layer_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_convolutional_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pad_img0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img0_ce0 : OUT STD_LOGIC;
        pad_img0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img0_ce1 : OUT STD_LOGIC;
        pad_img0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img1_ce0 : OUT STD_LOGIC;
        pad_img1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img1_ce1 : OUT STD_LOGIC;
        pad_img1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img2_ce0 : OUT STD_LOGIC;
        pad_img2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img2_ce1 : OUT STD_LOGIC;
        pad_img2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_0_ce0 : OUT STD_LOGIC;
        pad_img3_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_1_ce0 : OUT STD_LOGIC;
        pad_img3_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_2_ce0 : OUT STD_LOGIC;
        pad_img3_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_3_ce0 : OUT STD_LOGIC;
        pad_img3_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_4_ce0 : OUT STD_LOGIC;
        pad_img3_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_5_ce0 : OUT STD_LOGIC;
        pad_img3_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_0_6_ce0 : OUT STD_LOGIC;
        pad_img3_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_0_ce0 : OUT STD_LOGIC;
        pad_img3_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_1_ce0 : OUT STD_LOGIC;
        pad_img3_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_2_ce0 : OUT STD_LOGIC;
        pad_img3_1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_3_ce0 : OUT STD_LOGIC;
        pad_img3_1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_4_ce0 : OUT STD_LOGIC;
        pad_img3_1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_5_ce0 : OUT STD_LOGIC;
        pad_img3_1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_1_6_ce0 : OUT STD_LOGIC;
        pad_img3_1_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_0_ce0 : OUT STD_LOGIC;
        pad_img3_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_1_ce0 : OUT STD_LOGIC;
        pad_img3_2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_2_ce0 : OUT STD_LOGIC;
        pad_img3_2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_3_ce0 : OUT STD_LOGIC;
        pad_img3_2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_4_ce0 : OUT STD_LOGIC;
        pad_img3_2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_5_ce0 : OUT STD_LOGIC;
        pad_img3_2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_2_6_ce0 : OUT STD_LOGIC;
        pad_img3_2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_0_ce0 : OUT STD_LOGIC;
        pad_img3_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_1_ce0 : OUT STD_LOGIC;
        pad_img3_3_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_2_ce0 : OUT STD_LOGIC;
        pad_img3_3_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_3_ce0 : OUT STD_LOGIC;
        pad_img3_3_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_4_ce0 : OUT STD_LOGIC;
        pad_img3_3_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_5_ce0 : OUT STD_LOGIC;
        pad_img3_3_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_3_6_ce0 : OUT STD_LOGIC;
        pad_img3_3_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_0_ce0 : OUT STD_LOGIC;
        pad_img3_4_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_1_ce0 : OUT STD_LOGIC;
        pad_img3_4_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_2_ce0 : OUT STD_LOGIC;
        pad_img3_4_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_3_ce0 : OUT STD_LOGIC;
        pad_img3_4_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_4_ce0 : OUT STD_LOGIC;
        pad_img3_4_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_5_ce0 : OUT STD_LOGIC;
        pad_img3_4_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_4_6_ce0 : OUT STD_LOGIC;
        pad_img3_4_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_0_ce0 : OUT STD_LOGIC;
        pad_img3_5_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_1_ce0 : OUT STD_LOGIC;
        pad_img3_5_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_2_ce0 : OUT STD_LOGIC;
        pad_img3_5_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_3_ce0 : OUT STD_LOGIC;
        pad_img3_5_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_4_ce0 : OUT STD_LOGIC;
        pad_img3_5_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_5_ce0 : OUT STD_LOGIC;
        pad_img3_5_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_5_6_ce0 : OUT STD_LOGIC;
        pad_img3_5_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_0_ce0 : OUT STD_LOGIC;
        pad_img3_6_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_1_ce0 : OUT STD_LOGIC;
        pad_img3_6_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_2_ce0 : OUT STD_LOGIC;
        pad_img3_6_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_3_ce0 : OUT STD_LOGIC;
        pad_img3_6_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_4_ce0 : OUT STD_LOGIC;
        pad_img3_6_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_5_ce0 : OUT STD_LOGIC;
        pad_img3_6_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img3_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pad_img3_6_6_ce0 : OUT STD_LOGIC;
        pad_img3_6_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_0_full_n : IN STD_LOGIC;
        conv_to_pool_streams_0_write : OUT STD_LOGIC;
        conv_to_pool_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_1_full_n : IN STD_LOGIC;
        conv_to_pool_streams_1_write : OUT STD_LOGIC;
        conv_to_pool_streams_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_2_full_n : IN STD_LOGIC;
        conv_to_pool_streams_2_write : OUT STD_LOGIC;
        conv_to_pool_streams_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_3_full_n : IN STD_LOGIC;
        conv_to_pool_streams_3_write : OUT STD_LOGIC );
    end component;


    component cnn_max_pooling_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv_to_pool_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_0_empty_n : IN STD_LOGIC;
        conv_to_pool_streams_0_read : OUT STD_LOGIC;
        conv_to_pool_streams_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_1_empty_n : IN STD_LOGIC;
        conv_to_pool_streams_1_read : OUT STD_LOGIC;
        conv_to_pool_streams_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_2_empty_n : IN STD_LOGIC;
        conv_to_pool_streams_2_read : OUT STD_LOGIC;
        conv_to_pool_streams_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_3_empty_n : IN STD_LOGIC;
        conv_to_pool_streams_3_read : OUT STD_LOGIC;
        pool_to_flat_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_0_full_n : IN STD_LOGIC;
        pool_to_flat_streams_0_write : OUT STD_LOGIC;
        pool_to_flat_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_1_full_n : IN STD_LOGIC;
        pool_to_flat_streams_1_write : OUT STD_LOGIC;
        pool_to_flat_streams_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_2_full_n : IN STD_LOGIC;
        pool_to_flat_streams_2_write : OUT STD_LOGIC;
        pool_to_flat_streams_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_3_full_n : IN STD_LOGIC;
        pool_to_flat_streams_3_write : OUT STD_LOGIC );
    end component;


    component cnn_flattening_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool_to_flat_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_0_empty_n : IN STD_LOGIC;
        pool_to_flat_streams_0_read : OUT STD_LOGIC;
        pool_to_flat_streams_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_1_empty_n : IN STD_LOGIC;
        pool_to_flat_streams_1_read : OUT STD_LOGIC;
        pool_to_flat_streams_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_2_empty_n : IN STD_LOGIC;
        pool_to_flat_streams_2_read : OUT STD_LOGIC;
        pool_to_flat_streams_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_3_empty_n : IN STD_LOGIC;
        pool_to_flat_streams_3_read : OUT STD_LOGIC;
        flat_to_dense_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_0_full_n : IN STD_LOGIC;
        flat_to_dense_streams_0_write : OUT STD_LOGIC;
        flat_to_dense_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_1_full_n : IN STD_LOGIC;
        flat_to_dense_streams_1_write : OUT STD_LOGIC;
        flat_to_dense_streams_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_2_full_n : IN STD_LOGIC;
        flat_to_dense_streams_2_write : OUT STD_LOGIC;
        flat_to_dense_streams_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_3_full_n : IN STD_LOGIC;
        flat_to_dense_streams_3_write : OUT STD_LOGIC );
    end component;


    component cnn_dense_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flat_to_dense_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_0_empty_n : IN STD_LOGIC;
        flat_to_dense_streams_0_read : OUT STD_LOGIC;
        flat_to_dense_streams_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_1_empty_n : IN STD_LOGIC;
        flat_to_dense_streams_1_read : OUT STD_LOGIC;
        flat_to_dense_streams_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_2_empty_n : IN STD_LOGIC;
        flat_to_dense_streams_2_read : OUT STD_LOGIC;
        flat_to_dense_streams_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_3_empty_n : IN STD_LOGIC;
        flat_to_dense_streams_3_read : OUT STD_LOGIC;
        dense_to_softmax_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_0_full_n : IN STD_LOGIC;
        dense_to_softmax_streams_0_write : OUT STD_LOGIC;
        dense_to_softmax_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_1_full_n : IN STD_LOGIC;
        dense_to_softmax_streams_1_write : OUT STD_LOGIC;
        dense_to_softmax_streams_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_2_full_n : IN STD_LOGIC;
        dense_to_softmax_streams_2_write : OUT STD_LOGIC;
        dense_to_softmax_streams_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_3_full_n : IN STD_LOGIC;
        dense_to_softmax_streams_3_write : OUT STD_LOGIC );
    end component;


    component cnn_dense_layer_soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_to_softmax_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_0_empty_n : IN STD_LOGIC;
        dense_to_softmax_streams_0_read : OUT STD_LOGIC;
        dense_to_softmax_streams_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_1_empty_n : IN STD_LOGIC;
        dense_to_softmax_streams_1_read : OUT STD_LOGIC;
        dense_to_softmax_streams_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_2_empty_n : IN STD_LOGIC;
        dense_to_softmax_streams_2_read : OUT STD_LOGIC;
        dense_to_softmax_streams_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_to_softmax_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        dense_to_softmax_streams_3_empty_n : IN STD_LOGIC;
        dense_to_softmax_streams_3_read : OUT STD_LOGIC;
        prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_ce0 : OUT STD_LOGIC;
        prediction_we0 : OUT STD_LOGIC;
        prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_ce1 : OUT STD_LOGIC;
        prediction_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fifo_w32_d784_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_fifo_w32_d196_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_fifo_w32_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_start_for_max_pooling_layer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_start_for_flattening_layer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_start_for_dense_layer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    convolutional_layer_U0 : component cnn_convolutional_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => convolutional_layer_U0_ap_start,
        start_full_n => start_for_max_pooling_layer_U0_full_n,
        ap_done => convolutional_layer_U0_ap_done,
        ap_continue => convolutional_layer_U0_ap_continue,
        ap_idle => convolutional_layer_U0_ap_idle,
        ap_ready => convolutional_layer_U0_ap_ready,
        start_out => convolutional_layer_U0_start_out,
        start_write => convolutional_layer_U0_start_write,
        pad_img0_address0 => convolutional_layer_U0_pad_img0_address0,
        pad_img0_ce0 => convolutional_layer_U0_pad_img0_ce0,
        pad_img0_q0 => pad_img0_q0,
        pad_img0_address1 => convolutional_layer_U0_pad_img0_address1,
        pad_img0_ce1 => convolutional_layer_U0_pad_img0_ce1,
        pad_img0_q1 => pad_img0_q1,
        pad_img1_address0 => convolutional_layer_U0_pad_img1_address0,
        pad_img1_ce0 => convolutional_layer_U0_pad_img1_ce0,
        pad_img1_q0 => pad_img1_q0,
        pad_img1_address1 => convolutional_layer_U0_pad_img1_address1,
        pad_img1_ce1 => convolutional_layer_U0_pad_img1_ce1,
        pad_img1_q1 => pad_img1_q1,
        pad_img2_address0 => convolutional_layer_U0_pad_img2_address0,
        pad_img2_ce0 => convolutional_layer_U0_pad_img2_ce0,
        pad_img2_q0 => pad_img2_q0,
        pad_img2_address1 => convolutional_layer_U0_pad_img2_address1,
        pad_img2_ce1 => convolutional_layer_U0_pad_img2_ce1,
        pad_img2_q1 => pad_img2_q1,
        pad_img3_0_0_address0 => convolutional_layer_U0_pad_img3_0_0_address0,
        pad_img3_0_0_ce0 => convolutional_layer_U0_pad_img3_0_0_ce0,
        pad_img3_0_0_q0 => pad_img3_0_0_q0,
        pad_img3_0_1_address0 => convolutional_layer_U0_pad_img3_0_1_address0,
        pad_img3_0_1_ce0 => convolutional_layer_U0_pad_img3_0_1_ce0,
        pad_img3_0_1_q0 => pad_img3_0_1_q0,
        pad_img3_0_2_address0 => convolutional_layer_U0_pad_img3_0_2_address0,
        pad_img3_0_2_ce0 => convolutional_layer_U0_pad_img3_0_2_ce0,
        pad_img3_0_2_q0 => pad_img3_0_2_q0,
        pad_img3_0_3_address0 => convolutional_layer_U0_pad_img3_0_3_address0,
        pad_img3_0_3_ce0 => convolutional_layer_U0_pad_img3_0_3_ce0,
        pad_img3_0_3_q0 => pad_img3_0_3_q0,
        pad_img3_0_4_address0 => convolutional_layer_U0_pad_img3_0_4_address0,
        pad_img3_0_4_ce0 => convolutional_layer_U0_pad_img3_0_4_ce0,
        pad_img3_0_4_q0 => pad_img3_0_4_q0,
        pad_img3_0_5_address0 => convolutional_layer_U0_pad_img3_0_5_address0,
        pad_img3_0_5_ce0 => convolutional_layer_U0_pad_img3_0_5_ce0,
        pad_img3_0_5_q0 => pad_img3_0_5_q0,
        pad_img3_0_6_address0 => convolutional_layer_U0_pad_img3_0_6_address0,
        pad_img3_0_6_ce0 => convolutional_layer_U0_pad_img3_0_6_ce0,
        pad_img3_0_6_q0 => pad_img3_0_6_q0,
        pad_img3_1_0_address0 => convolutional_layer_U0_pad_img3_1_0_address0,
        pad_img3_1_0_ce0 => convolutional_layer_U0_pad_img3_1_0_ce0,
        pad_img3_1_0_q0 => pad_img3_1_0_q0,
        pad_img3_1_1_address0 => convolutional_layer_U0_pad_img3_1_1_address0,
        pad_img3_1_1_ce0 => convolutional_layer_U0_pad_img3_1_1_ce0,
        pad_img3_1_1_q0 => pad_img3_1_1_q0,
        pad_img3_1_2_address0 => convolutional_layer_U0_pad_img3_1_2_address0,
        pad_img3_1_2_ce0 => convolutional_layer_U0_pad_img3_1_2_ce0,
        pad_img3_1_2_q0 => pad_img3_1_2_q0,
        pad_img3_1_3_address0 => convolutional_layer_U0_pad_img3_1_3_address0,
        pad_img3_1_3_ce0 => convolutional_layer_U0_pad_img3_1_3_ce0,
        pad_img3_1_3_q0 => pad_img3_1_3_q0,
        pad_img3_1_4_address0 => convolutional_layer_U0_pad_img3_1_4_address0,
        pad_img3_1_4_ce0 => convolutional_layer_U0_pad_img3_1_4_ce0,
        pad_img3_1_4_q0 => pad_img3_1_4_q0,
        pad_img3_1_5_address0 => convolutional_layer_U0_pad_img3_1_5_address0,
        pad_img3_1_5_ce0 => convolutional_layer_U0_pad_img3_1_5_ce0,
        pad_img3_1_5_q0 => pad_img3_1_5_q0,
        pad_img3_1_6_address0 => convolutional_layer_U0_pad_img3_1_6_address0,
        pad_img3_1_6_ce0 => convolutional_layer_U0_pad_img3_1_6_ce0,
        pad_img3_1_6_q0 => pad_img3_1_6_q0,
        pad_img3_2_0_address0 => convolutional_layer_U0_pad_img3_2_0_address0,
        pad_img3_2_0_ce0 => convolutional_layer_U0_pad_img3_2_0_ce0,
        pad_img3_2_0_q0 => pad_img3_2_0_q0,
        pad_img3_2_1_address0 => convolutional_layer_U0_pad_img3_2_1_address0,
        pad_img3_2_1_ce0 => convolutional_layer_U0_pad_img3_2_1_ce0,
        pad_img3_2_1_q0 => pad_img3_2_1_q0,
        pad_img3_2_2_address0 => convolutional_layer_U0_pad_img3_2_2_address0,
        pad_img3_2_2_ce0 => convolutional_layer_U0_pad_img3_2_2_ce0,
        pad_img3_2_2_q0 => pad_img3_2_2_q0,
        pad_img3_2_3_address0 => convolutional_layer_U0_pad_img3_2_3_address0,
        pad_img3_2_3_ce0 => convolutional_layer_U0_pad_img3_2_3_ce0,
        pad_img3_2_3_q0 => pad_img3_2_3_q0,
        pad_img3_2_4_address0 => convolutional_layer_U0_pad_img3_2_4_address0,
        pad_img3_2_4_ce0 => convolutional_layer_U0_pad_img3_2_4_ce0,
        pad_img3_2_4_q0 => pad_img3_2_4_q0,
        pad_img3_2_5_address0 => convolutional_layer_U0_pad_img3_2_5_address0,
        pad_img3_2_5_ce0 => convolutional_layer_U0_pad_img3_2_5_ce0,
        pad_img3_2_5_q0 => pad_img3_2_5_q0,
        pad_img3_2_6_address0 => convolutional_layer_U0_pad_img3_2_6_address0,
        pad_img3_2_6_ce0 => convolutional_layer_U0_pad_img3_2_6_ce0,
        pad_img3_2_6_q0 => pad_img3_2_6_q0,
        pad_img3_3_0_address0 => convolutional_layer_U0_pad_img3_3_0_address0,
        pad_img3_3_0_ce0 => convolutional_layer_U0_pad_img3_3_0_ce0,
        pad_img3_3_0_q0 => pad_img3_3_0_q0,
        pad_img3_3_1_address0 => convolutional_layer_U0_pad_img3_3_1_address0,
        pad_img3_3_1_ce0 => convolutional_layer_U0_pad_img3_3_1_ce0,
        pad_img3_3_1_q0 => pad_img3_3_1_q0,
        pad_img3_3_2_address0 => convolutional_layer_U0_pad_img3_3_2_address0,
        pad_img3_3_2_ce0 => convolutional_layer_U0_pad_img3_3_2_ce0,
        pad_img3_3_2_q0 => pad_img3_3_2_q0,
        pad_img3_3_3_address0 => convolutional_layer_U0_pad_img3_3_3_address0,
        pad_img3_3_3_ce0 => convolutional_layer_U0_pad_img3_3_3_ce0,
        pad_img3_3_3_q0 => pad_img3_3_3_q0,
        pad_img3_3_4_address0 => convolutional_layer_U0_pad_img3_3_4_address0,
        pad_img3_3_4_ce0 => convolutional_layer_U0_pad_img3_3_4_ce0,
        pad_img3_3_4_q0 => pad_img3_3_4_q0,
        pad_img3_3_5_address0 => convolutional_layer_U0_pad_img3_3_5_address0,
        pad_img3_3_5_ce0 => convolutional_layer_U0_pad_img3_3_5_ce0,
        pad_img3_3_5_q0 => pad_img3_3_5_q0,
        pad_img3_3_6_address0 => convolutional_layer_U0_pad_img3_3_6_address0,
        pad_img3_3_6_ce0 => convolutional_layer_U0_pad_img3_3_6_ce0,
        pad_img3_3_6_q0 => pad_img3_3_6_q0,
        pad_img3_4_0_address0 => convolutional_layer_U0_pad_img3_4_0_address0,
        pad_img3_4_0_ce0 => convolutional_layer_U0_pad_img3_4_0_ce0,
        pad_img3_4_0_q0 => pad_img3_4_0_q0,
        pad_img3_4_1_address0 => convolutional_layer_U0_pad_img3_4_1_address0,
        pad_img3_4_1_ce0 => convolutional_layer_U0_pad_img3_4_1_ce0,
        pad_img3_4_1_q0 => pad_img3_4_1_q0,
        pad_img3_4_2_address0 => convolutional_layer_U0_pad_img3_4_2_address0,
        pad_img3_4_2_ce0 => convolutional_layer_U0_pad_img3_4_2_ce0,
        pad_img3_4_2_q0 => pad_img3_4_2_q0,
        pad_img3_4_3_address0 => convolutional_layer_U0_pad_img3_4_3_address0,
        pad_img3_4_3_ce0 => convolutional_layer_U0_pad_img3_4_3_ce0,
        pad_img3_4_3_q0 => pad_img3_4_3_q0,
        pad_img3_4_4_address0 => convolutional_layer_U0_pad_img3_4_4_address0,
        pad_img3_4_4_ce0 => convolutional_layer_U0_pad_img3_4_4_ce0,
        pad_img3_4_4_q0 => pad_img3_4_4_q0,
        pad_img3_4_5_address0 => convolutional_layer_U0_pad_img3_4_5_address0,
        pad_img3_4_5_ce0 => convolutional_layer_U0_pad_img3_4_5_ce0,
        pad_img3_4_5_q0 => pad_img3_4_5_q0,
        pad_img3_4_6_address0 => convolutional_layer_U0_pad_img3_4_6_address0,
        pad_img3_4_6_ce0 => convolutional_layer_U0_pad_img3_4_6_ce0,
        pad_img3_4_6_q0 => pad_img3_4_6_q0,
        pad_img3_5_0_address0 => convolutional_layer_U0_pad_img3_5_0_address0,
        pad_img3_5_0_ce0 => convolutional_layer_U0_pad_img3_5_0_ce0,
        pad_img3_5_0_q0 => pad_img3_5_0_q0,
        pad_img3_5_1_address0 => convolutional_layer_U0_pad_img3_5_1_address0,
        pad_img3_5_1_ce0 => convolutional_layer_U0_pad_img3_5_1_ce0,
        pad_img3_5_1_q0 => pad_img3_5_1_q0,
        pad_img3_5_2_address0 => convolutional_layer_U0_pad_img3_5_2_address0,
        pad_img3_5_2_ce0 => convolutional_layer_U0_pad_img3_5_2_ce0,
        pad_img3_5_2_q0 => pad_img3_5_2_q0,
        pad_img3_5_3_address0 => convolutional_layer_U0_pad_img3_5_3_address0,
        pad_img3_5_3_ce0 => convolutional_layer_U0_pad_img3_5_3_ce0,
        pad_img3_5_3_q0 => pad_img3_5_3_q0,
        pad_img3_5_4_address0 => convolutional_layer_U0_pad_img3_5_4_address0,
        pad_img3_5_4_ce0 => convolutional_layer_U0_pad_img3_5_4_ce0,
        pad_img3_5_4_q0 => pad_img3_5_4_q0,
        pad_img3_5_5_address0 => convolutional_layer_U0_pad_img3_5_5_address0,
        pad_img3_5_5_ce0 => convolutional_layer_U0_pad_img3_5_5_ce0,
        pad_img3_5_5_q0 => pad_img3_5_5_q0,
        pad_img3_5_6_address0 => convolutional_layer_U0_pad_img3_5_6_address0,
        pad_img3_5_6_ce0 => convolutional_layer_U0_pad_img3_5_6_ce0,
        pad_img3_5_6_q0 => pad_img3_5_6_q0,
        pad_img3_6_0_address0 => convolutional_layer_U0_pad_img3_6_0_address0,
        pad_img3_6_0_ce0 => convolutional_layer_U0_pad_img3_6_0_ce0,
        pad_img3_6_0_q0 => pad_img3_6_0_q0,
        pad_img3_6_1_address0 => convolutional_layer_U0_pad_img3_6_1_address0,
        pad_img3_6_1_ce0 => convolutional_layer_U0_pad_img3_6_1_ce0,
        pad_img3_6_1_q0 => pad_img3_6_1_q0,
        pad_img3_6_2_address0 => convolutional_layer_U0_pad_img3_6_2_address0,
        pad_img3_6_2_ce0 => convolutional_layer_U0_pad_img3_6_2_ce0,
        pad_img3_6_2_q0 => pad_img3_6_2_q0,
        pad_img3_6_3_address0 => convolutional_layer_U0_pad_img3_6_3_address0,
        pad_img3_6_3_ce0 => convolutional_layer_U0_pad_img3_6_3_ce0,
        pad_img3_6_3_q0 => pad_img3_6_3_q0,
        pad_img3_6_4_address0 => convolutional_layer_U0_pad_img3_6_4_address0,
        pad_img3_6_4_ce0 => convolutional_layer_U0_pad_img3_6_4_ce0,
        pad_img3_6_4_q0 => pad_img3_6_4_q0,
        pad_img3_6_5_address0 => convolutional_layer_U0_pad_img3_6_5_address0,
        pad_img3_6_5_ce0 => convolutional_layer_U0_pad_img3_6_5_ce0,
        pad_img3_6_5_q0 => pad_img3_6_5_q0,
        pad_img3_6_6_address0 => convolutional_layer_U0_pad_img3_6_6_address0,
        pad_img3_6_6_ce0 => convolutional_layer_U0_pad_img3_6_6_ce0,
        pad_img3_6_6_q0 => pad_img3_6_6_q0,
        conv_to_pool_streams_0_din => convolutional_layer_U0_conv_to_pool_streams_0_din,
        conv_to_pool_streams_0_num_data_valid => conv_to_pool_streams_num_data_valid,
        conv_to_pool_streams_0_fifo_cap => conv_to_pool_streams_fifo_cap,
        conv_to_pool_streams_0_full_n => conv_to_pool_streams_full_n,
        conv_to_pool_streams_0_write => convolutional_layer_U0_conv_to_pool_streams_0_write,
        conv_to_pool_streams_1_din => convolutional_layer_U0_conv_to_pool_streams_1_din,
        conv_to_pool_streams_1_num_data_valid => conv_to_pool_streams_1_num_data_valid,
        conv_to_pool_streams_1_fifo_cap => conv_to_pool_streams_1_fifo_cap,
        conv_to_pool_streams_1_full_n => conv_to_pool_streams_1_full_n,
        conv_to_pool_streams_1_write => convolutional_layer_U0_conv_to_pool_streams_1_write,
        conv_to_pool_streams_2_din => convolutional_layer_U0_conv_to_pool_streams_2_din,
        conv_to_pool_streams_2_num_data_valid => conv_to_pool_streams_2_num_data_valid,
        conv_to_pool_streams_2_fifo_cap => conv_to_pool_streams_2_fifo_cap,
        conv_to_pool_streams_2_full_n => conv_to_pool_streams_2_full_n,
        conv_to_pool_streams_2_write => convolutional_layer_U0_conv_to_pool_streams_2_write,
        conv_to_pool_streams_3_din => convolutional_layer_U0_conv_to_pool_streams_3_din,
        conv_to_pool_streams_3_num_data_valid => conv_to_pool_streams_3_num_data_valid,
        conv_to_pool_streams_3_fifo_cap => conv_to_pool_streams_3_fifo_cap,
        conv_to_pool_streams_3_full_n => conv_to_pool_streams_3_full_n,
        conv_to_pool_streams_3_write => convolutional_layer_U0_conv_to_pool_streams_3_write);

    max_pooling_layer_U0 : component cnn_max_pooling_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => max_pooling_layer_U0_ap_start,
        start_full_n => start_for_flattening_layer_U0_full_n,
        ap_done => max_pooling_layer_U0_ap_done,
        ap_continue => max_pooling_layer_U0_ap_continue,
        ap_idle => max_pooling_layer_U0_ap_idle,
        ap_ready => max_pooling_layer_U0_ap_ready,
        start_out => max_pooling_layer_U0_start_out,
        start_write => max_pooling_layer_U0_start_write,
        conv_to_pool_streams_0_dout => conv_to_pool_streams_dout,
        conv_to_pool_streams_0_num_data_valid => conv_to_pool_streams_num_data_valid,
        conv_to_pool_streams_0_fifo_cap => conv_to_pool_streams_fifo_cap,
        conv_to_pool_streams_0_empty_n => conv_to_pool_streams_empty_n,
        conv_to_pool_streams_0_read => max_pooling_layer_U0_conv_to_pool_streams_0_read,
        conv_to_pool_streams_1_dout => conv_to_pool_streams_1_dout,
        conv_to_pool_streams_1_num_data_valid => conv_to_pool_streams_1_num_data_valid,
        conv_to_pool_streams_1_fifo_cap => conv_to_pool_streams_1_fifo_cap,
        conv_to_pool_streams_1_empty_n => conv_to_pool_streams_1_empty_n,
        conv_to_pool_streams_1_read => max_pooling_layer_U0_conv_to_pool_streams_1_read,
        conv_to_pool_streams_2_dout => conv_to_pool_streams_2_dout,
        conv_to_pool_streams_2_num_data_valid => conv_to_pool_streams_2_num_data_valid,
        conv_to_pool_streams_2_fifo_cap => conv_to_pool_streams_2_fifo_cap,
        conv_to_pool_streams_2_empty_n => conv_to_pool_streams_2_empty_n,
        conv_to_pool_streams_2_read => max_pooling_layer_U0_conv_to_pool_streams_2_read,
        conv_to_pool_streams_3_dout => conv_to_pool_streams_3_dout,
        conv_to_pool_streams_3_num_data_valid => conv_to_pool_streams_3_num_data_valid,
        conv_to_pool_streams_3_fifo_cap => conv_to_pool_streams_3_fifo_cap,
        conv_to_pool_streams_3_empty_n => conv_to_pool_streams_3_empty_n,
        conv_to_pool_streams_3_read => max_pooling_layer_U0_conv_to_pool_streams_3_read,
        pool_to_flat_streams_0_din => max_pooling_layer_U0_pool_to_flat_streams_0_din,
        pool_to_flat_streams_0_num_data_valid => pool_to_flat_streams_num_data_valid,
        pool_to_flat_streams_0_fifo_cap => pool_to_flat_streams_fifo_cap,
        pool_to_flat_streams_0_full_n => pool_to_flat_streams_full_n,
        pool_to_flat_streams_0_write => max_pooling_layer_U0_pool_to_flat_streams_0_write,
        pool_to_flat_streams_1_din => max_pooling_layer_U0_pool_to_flat_streams_1_din,
        pool_to_flat_streams_1_num_data_valid => pool_to_flat_streams_1_num_data_valid,
        pool_to_flat_streams_1_fifo_cap => pool_to_flat_streams_1_fifo_cap,
        pool_to_flat_streams_1_full_n => pool_to_flat_streams_1_full_n,
        pool_to_flat_streams_1_write => max_pooling_layer_U0_pool_to_flat_streams_1_write,
        pool_to_flat_streams_2_din => max_pooling_layer_U0_pool_to_flat_streams_2_din,
        pool_to_flat_streams_2_num_data_valid => pool_to_flat_streams_2_num_data_valid,
        pool_to_flat_streams_2_fifo_cap => pool_to_flat_streams_2_fifo_cap,
        pool_to_flat_streams_2_full_n => pool_to_flat_streams_2_full_n,
        pool_to_flat_streams_2_write => max_pooling_layer_U0_pool_to_flat_streams_2_write,
        pool_to_flat_streams_3_din => max_pooling_layer_U0_pool_to_flat_streams_3_din,
        pool_to_flat_streams_3_num_data_valid => pool_to_flat_streams_3_num_data_valid,
        pool_to_flat_streams_3_fifo_cap => pool_to_flat_streams_3_fifo_cap,
        pool_to_flat_streams_3_full_n => pool_to_flat_streams_3_full_n,
        pool_to_flat_streams_3_write => max_pooling_layer_U0_pool_to_flat_streams_3_write);

    flattening_layer_U0 : component cnn_flattening_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => flattening_layer_U0_ap_start,
        start_full_n => start_for_dense_layer_U0_full_n,
        ap_done => flattening_layer_U0_ap_done,
        ap_continue => flattening_layer_U0_ap_continue,
        ap_idle => flattening_layer_U0_ap_idle,
        ap_ready => flattening_layer_U0_ap_ready,
        start_out => flattening_layer_U0_start_out,
        start_write => flattening_layer_U0_start_write,
        pool_to_flat_streams_0_dout => pool_to_flat_streams_dout,
        pool_to_flat_streams_0_num_data_valid => pool_to_flat_streams_num_data_valid,
        pool_to_flat_streams_0_fifo_cap => pool_to_flat_streams_fifo_cap,
        pool_to_flat_streams_0_empty_n => pool_to_flat_streams_empty_n,
        pool_to_flat_streams_0_read => flattening_layer_U0_pool_to_flat_streams_0_read,
        pool_to_flat_streams_1_dout => pool_to_flat_streams_1_dout,
        pool_to_flat_streams_1_num_data_valid => pool_to_flat_streams_1_num_data_valid,
        pool_to_flat_streams_1_fifo_cap => pool_to_flat_streams_1_fifo_cap,
        pool_to_flat_streams_1_empty_n => pool_to_flat_streams_1_empty_n,
        pool_to_flat_streams_1_read => flattening_layer_U0_pool_to_flat_streams_1_read,
        pool_to_flat_streams_2_dout => pool_to_flat_streams_2_dout,
        pool_to_flat_streams_2_num_data_valid => pool_to_flat_streams_2_num_data_valid,
        pool_to_flat_streams_2_fifo_cap => pool_to_flat_streams_2_fifo_cap,
        pool_to_flat_streams_2_empty_n => pool_to_flat_streams_2_empty_n,
        pool_to_flat_streams_2_read => flattening_layer_U0_pool_to_flat_streams_2_read,
        pool_to_flat_streams_3_dout => pool_to_flat_streams_3_dout,
        pool_to_flat_streams_3_num_data_valid => pool_to_flat_streams_3_num_data_valid,
        pool_to_flat_streams_3_fifo_cap => pool_to_flat_streams_3_fifo_cap,
        pool_to_flat_streams_3_empty_n => pool_to_flat_streams_3_empty_n,
        pool_to_flat_streams_3_read => flattening_layer_U0_pool_to_flat_streams_3_read,
        flat_to_dense_streams_0_din => flattening_layer_U0_flat_to_dense_streams_0_din,
        flat_to_dense_streams_0_num_data_valid => flat_to_dense_streams_num_data_valid,
        flat_to_dense_streams_0_fifo_cap => flat_to_dense_streams_fifo_cap,
        flat_to_dense_streams_0_full_n => flat_to_dense_streams_full_n,
        flat_to_dense_streams_0_write => flattening_layer_U0_flat_to_dense_streams_0_write,
        flat_to_dense_streams_1_din => flattening_layer_U0_flat_to_dense_streams_1_din,
        flat_to_dense_streams_1_num_data_valid => flat_to_dense_streams_1_num_data_valid,
        flat_to_dense_streams_1_fifo_cap => flat_to_dense_streams_1_fifo_cap,
        flat_to_dense_streams_1_full_n => flat_to_dense_streams_1_full_n,
        flat_to_dense_streams_1_write => flattening_layer_U0_flat_to_dense_streams_1_write,
        flat_to_dense_streams_2_din => flattening_layer_U0_flat_to_dense_streams_2_din,
        flat_to_dense_streams_2_num_data_valid => flat_to_dense_streams_2_num_data_valid,
        flat_to_dense_streams_2_fifo_cap => flat_to_dense_streams_2_fifo_cap,
        flat_to_dense_streams_2_full_n => flat_to_dense_streams_2_full_n,
        flat_to_dense_streams_2_write => flattening_layer_U0_flat_to_dense_streams_2_write,
        flat_to_dense_streams_3_din => flattening_layer_U0_flat_to_dense_streams_3_din,
        flat_to_dense_streams_3_num_data_valid => flat_to_dense_streams_3_num_data_valid,
        flat_to_dense_streams_3_fifo_cap => flat_to_dense_streams_3_fifo_cap,
        flat_to_dense_streams_3_full_n => flat_to_dense_streams_3_full_n,
        flat_to_dense_streams_3_write => flattening_layer_U0_flat_to_dense_streams_3_write);

    dense_layer_U0 : component cnn_dense_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dense_layer_U0_ap_start,
        ap_done => dense_layer_U0_ap_done,
        ap_continue => dense_layer_U0_ap_continue,
        ap_idle => dense_layer_U0_ap_idle,
        ap_ready => dense_layer_U0_ap_ready,
        flat_to_dense_streams_0_dout => flat_to_dense_streams_dout,
        flat_to_dense_streams_0_num_data_valid => flat_to_dense_streams_num_data_valid,
        flat_to_dense_streams_0_fifo_cap => flat_to_dense_streams_fifo_cap,
        flat_to_dense_streams_0_empty_n => flat_to_dense_streams_empty_n,
        flat_to_dense_streams_0_read => dense_layer_U0_flat_to_dense_streams_0_read,
        flat_to_dense_streams_1_dout => flat_to_dense_streams_1_dout,
        flat_to_dense_streams_1_num_data_valid => flat_to_dense_streams_1_num_data_valid,
        flat_to_dense_streams_1_fifo_cap => flat_to_dense_streams_1_fifo_cap,
        flat_to_dense_streams_1_empty_n => flat_to_dense_streams_1_empty_n,
        flat_to_dense_streams_1_read => dense_layer_U0_flat_to_dense_streams_1_read,
        flat_to_dense_streams_2_dout => flat_to_dense_streams_2_dout,
        flat_to_dense_streams_2_num_data_valid => flat_to_dense_streams_2_num_data_valid,
        flat_to_dense_streams_2_fifo_cap => flat_to_dense_streams_2_fifo_cap,
        flat_to_dense_streams_2_empty_n => flat_to_dense_streams_2_empty_n,
        flat_to_dense_streams_2_read => dense_layer_U0_flat_to_dense_streams_2_read,
        flat_to_dense_streams_3_dout => flat_to_dense_streams_3_dout,
        flat_to_dense_streams_3_num_data_valid => flat_to_dense_streams_3_num_data_valid,
        flat_to_dense_streams_3_fifo_cap => flat_to_dense_streams_3_fifo_cap,
        flat_to_dense_streams_3_empty_n => flat_to_dense_streams_3_empty_n,
        flat_to_dense_streams_3_read => dense_layer_U0_flat_to_dense_streams_3_read,
        dense_to_softmax_streams_0_din => dense_layer_U0_dense_to_softmax_streams_0_din,
        dense_to_softmax_streams_0_num_data_valid => dense_to_softmax_streams_num_data_valid,
        dense_to_softmax_streams_0_fifo_cap => dense_to_softmax_streams_fifo_cap,
        dense_to_softmax_streams_0_full_n => dense_to_softmax_streams_full_n,
        dense_to_softmax_streams_0_write => dense_layer_U0_dense_to_softmax_streams_0_write,
        dense_to_softmax_streams_1_din => dense_layer_U0_dense_to_softmax_streams_1_din,
        dense_to_softmax_streams_1_num_data_valid => dense_to_softmax_streams_1_num_data_valid,
        dense_to_softmax_streams_1_fifo_cap => dense_to_softmax_streams_1_fifo_cap,
        dense_to_softmax_streams_1_full_n => dense_to_softmax_streams_1_full_n,
        dense_to_softmax_streams_1_write => dense_layer_U0_dense_to_softmax_streams_1_write,
        dense_to_softmax_streams_2_din => dense_layer_U0_dense_to_softmax_streams_2_din,
        dense_to_softmax_streams_2_num_data_valid => dense_to_softmax_streams_2_num_data_valid,
        dense_to_softmax_streams_2_fifo_cap => dense_to_softmax_streams_2_fifo_cap,
        dense_to_softmax_streams_2_full_n => dense_to_softmax_streams_2_full_n,
        dense_to_softmax_streams_2_write => dense_layer_U0_dense_to_softmax_streams_2_write,
        dense_to_softmax_streams_3_din => dense_layer_U0_dense_to_softmax_streams_3_din,
        dense_to_softmax_streams_3_num_data_valid => dense_to_softmax_streams_3_num_data_valid,
        dense_to_softmax_streams_3_fifo_cap => dense_to_softmax_streams_3_fifo_cap,
        dense_to_softmax_streams_3_full_n => dense_to_softmax_streams_3_full_n,
        dense_to_softmax_streams_3_write => dense_layer_U0_dense_to_softmax_streams_3_write);

    dense_layer_soft_max_U0 : component cnn_dense_layer_soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dense_layer_soft_max_U0_ap_start,
        ap_done => dense_layer_soft_max_U0_ap_done,
        ap_continue => dense_layer_soft_max_U0_ap_continue,
        ap_idle => dense_layer_soft_max_U0_ap_idle,
        ap_ready => dense_layer_soft_max_U0_ap_ready,
        dense_to_softmax_streams_0_dout => dense_to_softmax_streams_dout,
        dense_to_softmax_streams_0_num_data_valid => dense_to_softmax_streams_num_data_valid,
        dense_to_softmax_streams_0_fifo_cap => dense_to_softmax_streams_fifo_cap,
        dense_to_softmax_streams_0_empty_n => dense_to_softmax_streams_empty_n,
        dense_to_softmax_streams_0_read => dense_layer_soft_max_U0_dense_to_softmax_streams_0_read,
        dense_to_softmax_streams_1_dout => dense_to_softmax_streams_1_dout,
        dense_to_softmax_streams_1_num_data_valid => dense_to_softmax_streams_1_num_data_valid,
        dense_to_softmax_streams_1_fifo_cap => dense_to_softmax_streams_1_fifo_cap,
        dense_to_softmax_streams_1_empty_n => dense_to_softmax_streams_1_empty_n,
        dense_to_softmax_streams_1_read => dense_layer_soft_max_U0_dense_to_softmax_streams_1_read,
        dense_to_softmax_streams_2_dout => dense_to_softmax_streams_2_dout,
        dense_to_softmax_streams_2_num_data_valid => dense_to_softmax_streams_2_num_data_valid,
        dense_to_softmax_streams_2_fifo_cap => dense_to_softmax_streams_2_fifo_cap,
        dense_to_softmax_streams_2_empty_n => dense_to_softmax_streams_2_empty_n,
        dense_to_softmax_streams_2_read => dense_layer_soft_max_U0_dense_to_softmax_streams_2_read,
        dense_to_softmax_streams_3_dout => dense_to_softmax_streams_3_dout,
        dense_to_softmax_streams_3_num_data_valid => dense_to_softmax_streams_3_num_data_valid,
        dense_to_softmax_streams_3_fifo_cap => dense_to_softmax_streams_3_fifo_cap,
        dense_to_softmax_streams_3_empty_n => dense_to_softmax_streams_3_empty_n,
        dense_to_softmax_streams_3_read => dense_layer_soft_max_U0_dense_to_softmax_streams_3_read,
        prediction_address0 => dense_layer_soft_max_U0_prediction_address0,
        prediction_ce0 => dense_layer_soft_max_U0_prediction_ce0,
        prediction_we0 => dense_layer_soft_max_U0_prediction_we0,
        prediction_d0 => dense_layer_soft_max_U0_prediction_d0,
        prediction_address1 => dense_layer_soft_max_U0_prediction_address1,
        prediction_ce1 => dense_layer_soft_max_U0_prediction_ce1,
        prediction_q1 => prediction_q1);

    conv_to_pool_streams_U : component cnn_fifo_w32_d784_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convolutional_layer_U0_conv_to_pool_streams_0_din,
        if_full_n => conv_to_pool_streams_full_n,
        if_write => convolutional_layer_U0_conv_to_pool_streams_0_write,
        if_dout => conv_to_pool_streams_dout,
        if_num_data_valid => conv_to_pool_streams_num_data_valid,
        if_fifo_cap => conv_to_pool_streams_fifo_cap,
        if_empty_n => conv_to_pool_streams_empty_n,
        if_read => max_pooling_layer_U0_conv_to_pool_streams_0_read);

    conv_to_pool_streams_1_U : component cnn_fifo_w32_d784_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convolutional_layer_U0_conv_to_pool_streams_1_din,
        if_full_n => conv_to_pool_streams_1_full_n,
        if_write => convolutional_layer_U0_conv_to_pool_streams_1_write,
        if_dout => conv_to_pool_streams_1_dout,
        if_num_data_valid => conv_to_pool_streams_1_num_data_valid,
        if_fifo_cap => conv_to_pool_streams_1_fifo_cap,
        if_empty_n => conv_to_pool_streams_1_empty_n,
        if_read => max_pooling_layer_U0_conv_to_pool_streams_1_read);

    conv_to_pool_streams_2_U : component cnn_fifo_w32_d784_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convolutional_layer_U0_conv_to_pool_streams_2_din,
        if_full_n => conv_to_pool_streams_2_full_n,
        if_write => convolutional_layer_U0_conv_to_pool_streams_2_write,
        if_dout => conv_to_pool_streams_2_dout,
        if_num_data_valid => conv_to_pool_streams_2_num_data_valid,
        if_fifo_cap => conv_to_pool_streams_2_fifo_cap,
        if_empty_n => conv_to_pool_streams_2_empty_n,
        if_read => max_pooling_layer_U0_conv_to_pool_streams_2_read);

    conv_to_pool_streams_3_U : component cnn_fifo_w32_d784_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convolutional_layer_U0_conv_to_pool_streams_3_din,
        if_full_n => conv_to_pool_streams_3_full_n,
        if_write => convolutional_layer_U0_conv_to_pool_streams_3_write,
        if_dout => conv_to_pool_streams_3_dout,
        if_num_data_valid => conv_to_pool_streams_3_num_data_valid,
        if_fifo_cap => conv_to_pool_streams_3_fifo_cap,
        if_empty_n => conv_to_pool_streams_3_empty_n,
        if_read => max_pooling_layer_U0_conv_to_pool_streams_3_read);

    pool_to_flat_streams_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => max_pooling_layer_U0_pool_to_flat_streams_0_din,
        if_full_n => pool_to_flat_streams_full_n,
        if_write => max_pooling_layer_U0_pool_to_flat_streams_0_write,
        if_dout => pool_to_flat_streams_dout,
        if_num_data_valid => pool_to_flat_streams_num_data_valid,
        if_fifo_cap => pool_to_flat_streams_fifo_cap,
        if_empty_n => pool_to_flat_streams_empty_n,
        if_read => flattening_layer_U0_pool_to_flat_streams_0_read);

    pool_to_flat_streams_1_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => max_pooling_layer_U0_pool_to_flat_streams_1_din,
        if_full_n => pool_to_flat_streams_1_full_n,
        if_write => max_pooling_layer_U0_pool_to_flat_streams_1_write,
        if_dout => pool_to_flat_streams_1_dout,
        if_num_data_valid => pool_to_flat_streams_1_num_data_valid,
        if_fifo_cap => pool_to_flat_streams_1_fifo_cap,
        if_empty_n => pool_to_flat_streams_1_empty_n,
        if_read => flattening_layer_U0_pool_to_flat_streams_1_read);

    pool_to_flat_streams_2_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => max_pooling_layer_U0_pool_to_flat_streams_2_din,
        if_full_n => pool_to_flat_streams_2_full_n,
        if_write => max_pooling_layer_U0_pool_to_flat_streams_2_write,
        if_dout => pool_to_flat_streams_2_dout,
        if_num_data_valid => pool_to_flat_streams_2_num_data_valid,
        if_fifo_cap => pool_to_flat_streams_2_fifo_cap,
        if_empty_n => pool_to_flat_streams_2_empty_n,
        if_read => flattening_layer_U0_pool_to_flat_streams_2_read);

    pool_to_flat_streams_3_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => max_pooling_layer_U0_pool_to_flat_streams_3_din,
        if_full_n => pool_to_flat_streams_3_full_n,
        if_write => max_pooling_layer_U0_pool_to_flat_streams_3_write,
        if_dout => pool_to_flat_streams_3_dout,
        if_num_data_valid => pool_to_flat_streams_3_num_data_valid,
        if_fifo_cap => pool_to_flat_streams_3_fifo_cap,
        if_empty_n => pool_to_flat_streams_3_empty_n,
        if_read => flattening_layer_U0_pool_to_flat_streams_3_read);

    flat_to_dense_streams_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => flattening_layer_U0_flat_to_dense_streams_0_din,
        if_full_n => flat_to_dense_streams_full_n,
        if_write => flattening_layer_U0_flat_to_dense_streams_0_write,
        if_dout => flat_to_dense_streams_dout,
        if_num_data_valid => flat_to_dense_streams_num_data_valid,
        if_fifo_cap => flat_to_dense_streams_fifo_cap,
        if_empty_n => flat_to_dense_streams_empty_n,
        if_read => dense_layer_U0_flat_to_dense_streams_0_read);

    flat_to_dense_streams_1_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => flattening_layer_U0_flat_to_dense_streams_1_din,
        if_full_n => flat_to_dense_streams_1_full_n,
        if_write => flattening_layer_U0_flat_to_dense_streams_1_write,
        if_dout => flat_to_dense_streams_1_dout,
        if_num_data_valid => flat_to_dense_streams_1_num_data_valid,
        if_fifo_cap => flat_to_dense_streams_1_fifo_cap,
        if_empty_n => flat_to_dense_streams_1_empty_n,
        if_read => dense_layer_U0_flat_to_dense_streams_1_read);

    flat_to_dense_streams_2_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => flattening_layer_U0_flat_to_dense_streams_2_din,
        if_full_n => flat_to_dense_streams_2_full_n,
        if_write => flattening_layer_U0_flat_to_dense_streams_2_write,
        if_dout => flat_to_dense_streams_2_dout,
        if_num_data_valid => flat_to_dense_streams_2_num_data_valid,
        if_fifo_cap => flat_to_dense_streams_2_fifo_cap,
        if_empty_n => flat_to_dense_streams_2_empty_n,
        if_read => dense_layer_U0_flat_to_dense_streams_2_read);

    flat_to_dense_streams_3_U : component cnn_fifo_w32_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => flattening_layer_U0_flat_to_dense_streams_3_din,
        if_full_n => flat_to_dense_streams_3_full_n,
        if_write => flattening_layer_U0_flat_to_dense_streams_3_write,
        if_dout => flat_to_dense_streams_3_dout,
        if_num_data_valid => flat_to_dense_streams_3_num_data_valid,
        if_fifo_cap => flat_to_dense_streams_3_fifo_cap,
        if_empty_n => flat_to_dense_streams_3_empty_n,
        if_read => dense_layer_U0_flat_to_dense_streams_3_read);

    dense_to_softmax_streams_U : component cnn_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_layer_U0_dense_to_softmax_streams_0_din,
        if_full_n => dense_to_softmax_streams_full_n,
        if_write => dense_layer_U0_dense_to_softmax_streams_0_write,
        if_dout => dense_to_softmax_streams_dout,
        if_num_data_valid => dense_to_softmax_streams_num_data_valid,
        if_fifo_cap => dense_to_softmax_streams_fifo_cap,
        if_empty_n => dense_to_softmax_streams_empty_n,
        if_read => dense_layer_soft_max_U0_dense_to_softmax_streams_0_read);

    dense_to_softmax_streams_1_U : component cnn_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_layer_U0_dense_to_softmax_streams_1_din,
        if_full_n => dense_to_softmax_streams_1_full_n,
        if_write => dense_layer_U0_dense_to_softmax_streams_1_write,
        if_dout => dense_to_softmax_streams_1_dout,
        if_num_data_valid => dense_to_softmax_streams_1_num_data_valid,
        if_fifo_cap => dense_to_softmax_streams_1_fifo_cap,
        if_empty_n => dense_to_softmax_streams_1_empty_n,
        if_read => dense_layer_soft_max_U0_dense_to_softmax_streams_1_read);

    dense_to_softmax_streams_2_U : component cnn_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_layer_U0_dense_to_softmax_streams_2_din,
        if_full_n => dense_to_softmax_streams_2_full_n,
        if_write => dense_layer_U0_dense_to_softmax_streams_2_write,
        if_dout => dense_to_softmax_streams_2_dout,
        if_num_data_valid => dense_to_softmax_streams_2_num_data_valid,
        if_fifo_cap => dense_to_softmax_streams_2_fifo_cap,
        if_empty_n => dense_to_softmax_streams_2_empty_n,
        if_read => dense_layer_soft_max_U0_dense_to_softmax_streams_2_read);

    dense_to_softmax_streams_3_U : component cnn_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_layer_U0_dense_to_softmax_streams_3_din,
        if_full_n => dense_to_softmax_streams_3_full_n,
        if_write => dense_layer_U0_dense_to_softmax_streams_3_write,
        if_dout => dense_to_softmax_streams_3_dout,
        if_num_data_valid => dense_to_softmax_streams_3_num_data_valid,
        if_fifo_cap => dense_to_softmax_streams_3_fifo_cap,
        if_empty_n => dense_to_softmax_streams_3_empty_n,
        if_read => dense_layer_soft_max_U0_dense_to_softmax_streams_3_read);

    start_for_max_pooling_layer_U0_U : component cnn_start_for_max_pooling_layer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_max_pooling_layer_U0_din,
        if_full_n => start_for_max_pooling_layer_U0_full_n,
        if_write => convolutional_layer_U0_start_write,
        if_dout => start_for_max_pooling_layer_U0_dout,
        if_empty_n => start_for_max_pooling_layer_U0_empty_n,
        if_read => max_pooling_layer_U0_ap_ready);

    start_for_flattening_layer_U0_U : component cnn_start_for_flattening_layer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_flattening_layer_U0_din,
        if_full_n => start_for_flattening_layer_U0_full_n,
        if_write => max_pooling_layer_U0_start_write,
        if_dout => start_for_flattening_layer_U0_dout,
        if_empty_n => start_for_flattening_layer_U0_empty_n,
        if_read => flattening_layer_U0_ap_ready);

    start_for_dense_layer_U0_U : component cnn_start_for_dense_layer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dense_layer_U0_din,
        if_full_n => start_for_dense_layer_U0_full_n,
        if_write => flattening_layer_U0_start_write,
        if_dout => start_for_dense_layer_U0_dout,
        if_empty_n => start_for_dense_layer_U0_empty_n,
        if_read => dense_layer_U0_ap_ready);





    ap_sync_reg_convolutional_layer_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_convolutional_layer_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_convolutional_layer_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_convolutional_layer_U0_ap_ready <= ap_sync_convolutional_layer_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_dense_layer_soft_max_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dense_layer_soft_max_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dense_layer_soft_max_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dense_layer_soft_max_U0_ap_ready <= ap_sync_dense_layer_soft_max_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= dense_layer_soft_max_U0_ap_done;
    ap_idle <= (max_pooling_layer_U0_ap_idle and flattening_layer_U0_ap_idle and dense_layer_soft_max_U0_ap_idle and dense_layer_U0_ap_idle and convolutional_layer_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_convolutional_layer_U0_ap_ready <= (convolutional_layer_U0_ap_ready or ap_sync_reg_convolutional_layer_U0_ap_ready);
    ap_sync_dense_layer_soft_max_U0_ap_ready <= (dense_layer_soft_max_U0_ap_ready or ap_sync_reg_dense_layer_soft_max_U0_ap_ready);
    ap_sync_ready <= (ap_sync_dense_layer_soft_max_U0_ap_ready and ap_sync_convolutional_layer_U0_ap_ready);
    convolutional_layer_U0_ap_continue <= ap_const_logic_1;
    convolutional_layer_U0_ap_start <= ((ap_sync_reg_convolutional_layer_U0_ap_ready xor ap_const_logic_1) and ap_start);
    dense_layer_U0_ap_continue <= ap_const_logic_1;
    dense_layer_U0_ap_start <= start_for_dense_layer_U0_empty_n;
    dense_layer_soft_max_U0_ap_continue <= ap_continue;
    dense_layer_soft_max_U0_ap_start <= ((ap_sync_reg_dense_layer_soft_max_U0_ap_ready xor ap_const_logic_1) and ap_start);
    flattening_layer_U0_ap_continue <= ap_const_logic_1;
    flattening_layer_U0_ap_start <= start_for_flattening_layer_U0_empty_n;
    max_pooling_layer_U0_ap_continue <= ap_const_logic_1;
    max_pooling_layer_U0_ap_start <= start_for_max_pooling_layer_U0_empty_n;
    pad_img0_address0 <= convolutional_layer_U0_pad_img0_address0;
    pad_img0_address1 <= convolutional_layer_U0_pad_img0_address1;
    pad_img0_ce0 <= convolutional_layer_U0_pad_img0_ce0;
    pad_img0_ce1 <= convolutional_layer_U0_pad_img0_ce1;
    pad_img0_d0 <= ap_const_lv32_0;
    pad_img0_d1 <= ap_const_lv32_0;
    pad_img0_we0 <= ap_const_logic_0;
    pad_img0_we1 <= ap_const_logic_0;
    pad_img1_address0 <= convolutional_layer_U0_pad_img1_address0;
    pad_img1_address1 <= convolutional_layer_U0_pad_img1_address1;
    pad_img1_ce0 <= convolutional_layer_U0_pad_img1_ce0;
    pad_img1_ce1 <= convolutional_layer_U0_pad_img1_ce1;
    pad_img1_d0 <= ap_const_lv32_0;
    pad_img1_d1 <= ap_const_lv32_0;
    pad_img1_we0 <= ap_const_logic_0;
    pad_img1_we1 <= ap_const_logic_0;
    pad_img2_address0 <= convolutional_layer_U0_pad_img2_address0;
    pad_img2_address1 <= convolutional_layer_U0_pad_img2_address1;
    pad_img2_ce0 <= convolutional_layer_U0_pad_img2_ce0;
    pad_img2_ce1 <= convolutional_layer_U0_pad_img2_ce1;
    pad_img2_d0 <= ap_const_lv32_0;
    pad_img2_d1 <= ap_const_lv32_0;
    pad_img2_we0 <= ap_const_logic_0;
    pad_img2_we1 <= ap_const_logic_0;
    pad_img3_0_0_address0 <= convolutional_layer_U0_pad_img3_0_0_address0;
    pad_img3_0_0_address1 <= ap_const_lv5_0;
    pad_img3_0_0_ce0 <= convolutional_layer_U0_pad_img3_0_0_ce0;
    pad_img3_0_0_ce1 <= ap_const_logic_0;
    pad_img3_0_0_d0 <= ap_const_lv32_0;
    pad_img3_0_0_d1 <= ap_const_lv32_0;
    pad_img3_0_0_we0 <= ap_const_logic_0;
    pad_img3_0_0_we1 <= ap_const_logic_0;
    pad_img3_0_1_address0 <= convolutional_layer_U0_pad_img3_0_1_address0;
    pad_img3_0_1_address1 <= ap_const_lv5_0;
    pad_img3_0_1_ce0 <= convolutional_layer_U0_pad_img3_0_1_ce0;
    pad_img3_0_1_ce1 <= ap_const_logic_0;
    pad_img3_0_1_d0 <= ap_const_lv32_0;
    pad_img3_0_1_d1 <= ap_const_lv32_0;
    pad_img3_0_1_we0 <= ap_const_logic_0;
    pad_img3_0_1_we1 <= ap_const_logic_0;
    pad_img3_0_2_address0 <= convolutional_layer_U0_pad_img3_0_2_address0;
    pad_img3_0_2_address1 <= ap_const_lv5_0;
    pad_img3_0_2_ce0 <= convolutional_layer_U0_pad_img3_0_2_ce0;
    pad_img3_0_2_ce1 <= ap_const_logic_0;
    pad_img3_0_2_d0 <= ap_const_lv32_0;
    pad_img3_0_2_d1 <= ap_const_lv32_0;
    pad_img3_0_2_we0 <= ap_const_logic_0;
    pad_img3_0_2_we1 <= ap_const_logic_0;
    pad_img3_0_3_address0 <= convolutional_layer_U0_pad_img3_0_3_address0;
    pad_img3_0_3_address1 <= ap_const_lv5_0;
    pad_img3_0_3_ce0 <= convolutional_layer_U0_pad_img3_0_3_ce0;
    pad_img3_0_3_ce1 <= ap_const_logic_0;
    pad_img3_0_3_d0 <= ap_const_lv32_0;
    pad_img3_0_3_d1 <= ap_const_lv32_0;
    pad_img3_0_3_we0 <= ap_const_logic_0;
    pad_img3_0_3_we1 <= ap_const_logic_0;
    pad_img3_0_4_address0 <= convolutional_layer_U0_pad_img3_0_4_address0;
    pad_img3_0_4_address1 <= ap_const_lv5_0;
    pad_img3_0_4_ce0 <= convolutional_layer_U0_pad_img3_0_4_ce0;
    pad_img3_0_4_ce1 <= ap_const_logic_0;
    pad_img3_0_4_d0 <= ap_const_lv32_0;
    pad_img3_0_4_d1 <= ap_const_lv32_0;
    pad_img3_0_4_we0 <= ap_const_logic_0;
    pad_img3_0_4_we1 <= ap_const_logic_0;
    pad_img3_0_5_address0 <= convolutional_layer_U0_pad_img3_0_5_address0;
    pad_img3_0_5_address1 <= ap_const_lv5_0;
    pad_img3_0_5_ce0 <= convolutional_layer_U0_pad_img3_0_5_ce0;
    pad_img3_0_5_ce1 <= ap_const_logic_0;
    pad_img3_0_5_d0 <= ap_const_lv32_0;
    pad_img3_0_5_d1 <= ap_const_lv32_0;
    pad_img3_0_5_we0 <= ap_const_logic_0;
    pad_img3_0_5_we1 <= ap_const_logic_0;
    pad_img3_0_6_address0 <= convolutional_layer_U0_pad_img3_0_6_address0;
    pad_img3_0_6_address1 <= ap_const_lv5_0;
    pad_img3_0_6_ce0 <= convolutional_layer_U0_pad_img3_0_6_ce0;
    pad_img3_0_6_ce1 <= ap_const_logic_0;
    pad_img3_0_6_d0 <= ap_const_lv32_0;
    pad_img3_0_6_d1 <= ap_const_lv32_0;
    pad_img3_0_6_we0 <= ap_const_logic_0;
    pad_img3_0_6_we1 <= ap_const_logic_0;
    pad_img3_1_0_address0 <= convolutional_layer_U0_pad_img3_1_0_address0;
    pad_img3_1_0_address1 <= ap_const_lv5_0;
    pad_img3_1_0_ce0 <= convolutional_layer_U0_pad_img3_1_0_ce0;
    pad_img3_1_0_ce1 <= ap_const_logic_0;
    pad_img3_1_0_d0 <= ap_const_lv32_0;
    pad_img3_1_0_d1 <= ap_const_lv32_0;
    pad_img3_1_0_we0 <= ap_const_logic_0;
    pad_img3_1_0_we1 <= ap_const_logic_0;
    pad_img3_1_1_address0 <= convolutional_layer_U0_pad_img3_1_1_address0;
    pad_img3_1_1_address1 <= ap_const_lv5_0;
    pad_img3_1_1_ce0 <= convolutional_layer_U0_pad_img3_1_1_ce0;
    pad_img3_1_1_ce1 <= ap_const_logic_0;
    pad_img3_1_1_d0 <= ap_const_lv32_0;
    pad_img3_1_1_d1 <= ap_const_lv32_0;
    pad_img3_1_1_we0 <= ap_const_logic_0;
    pad_img3_1_1_we1 <= ap_const_logic_0;
    pad_img3_1_2_address0 <= convolutional_layer_U0_pad_img3_1_2_address0;
    pad_img3_1_2_address1 <= ap_const_lv5_0;
    pad_img3_1_2_ce0 <= convolutional_layer_U0_pad_img3_1_2_ce0;
    pad_img3_1_2_ce1 <= ap_const_logic_0;
    pad_img3_1_2_d0 <= ap_const_lv32_0;
    pad_img3_1_2_d1 <= ap_const_lv32_0;
    pad_img3_1_2_we0 <= ap_const_logic_0;
    pad_img3_1_2_we1 <= ap_const_logic_0;
    pad_img3_1_3_address0 <= convolutional_layer_U0_pad_img3_1_3_address0;
    pad_img3_1_3_address1 <= ap_const_lv5_0;
    pad_img3_1_3_ce0 <= convolutional_layer_U0_pad_img3_1_3_ce0;
    pad_img3_1_3_ce1 <= ap_const_logic_0;
    pad_img3_1_3_d0 <= ap_const_lv32_0;
    pad_img3_1_3_d1 <= ap_const_lv32_0;
    pad_img3_1_3_we0 <= ap_const_logic_0;
    pad_img3_1_3_we1 <= ap_const_logic_0;
    pad_img3_1_4_address0 <= convolutional_layer_U0_pad_img3_1_4_address0;
    pad_img3_1_4_address1 <= ap_const_lv5_0;
    pad_img3_1_4_ce0 <= convolutional_layer_U0_pad_img3_1_4_ce0;
    pad_img3_1_4_ce1 <= ap_const_logic_0;
    pad_img3_1_4_d0 <= ap_const_lv32_0;
    pad_img3_1_4_d1 <= ap_const_lv32_0;
    pad_img3_1_4_we0 <= ap_const_logic_0;
    pad_img3_1_4_we1 <= ap_const_logic_0;
    pad_img3_1_5_address0 <= convolutional_layer_U0_pad_img3_1_5_address0;
    pad_img3_1_5_address1 <= ap_const_lv5_0;
    pad_img3_1_5_ce0 <= convolutional_layer_U0_pad_img3_1_5_ce0;
    pad_img3_1_5_ce1 <= ap_const_logic_0;
    pad_img3_1_5_d0 <= ap_const_lv32_0;
    pad_img3_1_5_d1 <= ap_const_lv32_0;
    pad_img3_1_5_we0 <= ap_const_logic_0;
    pad_img3_1_5_we1 <= ap_const_logic_0;
    pad_img3_1_6_address0 <= convolutional_layer_U0_pad_img3_1_6_address0;
    pad_img3_1_6_address1 <= ap_const_lv5_0;
    pad_img3_1_6_ce0 <= convolutional_layer_U0_pad_img3_1_6_ce0;
    pad_img3_1_6_ce1 <= ap_const_logic_0;
    pad_img3_1_6_d0 <= ap_const_lv32_0;
    pad_img3_1_6_d1 <= ap_const_lv32_0;
    pad_img3_1_6_we0 <= ap_const_logic_0;
    pad_img3_1_6_we1 <= ap_const_logic_0;
    pad_img3_2_0_address0 <= convolutional_layer_U0_pad_img3_2_0_address0;
    pad_img3_2_0_address1 <= ap_const_lv5_0;
    pad_img3_2_0_ce0 <= convolutional_layer_U0_pad_img3_2_0_ce0;
    pad_img3_2_0_ce1 <= ap_const_logic_0;
    pad_img3_2_0_d0 <= ap_const_lv32_0;
    pad_img3_2_0_d1 <= ap_const_lv32_0;
    pad_img3_2_0_we0 <= ap_const_logic_0;
    pad_img3_2_0_we1 <= ap_const_logic_0;
    pad_img3_2_1_address0 <= convolutional_layer_U0_pad_img3_2_1_address0;
    pad_img3_2_1_address1 <= ap_const_lv5_0;
    pad_img3_2_1_ce0 <= convolutional_layer_U0_pad_img3_2_1_ce0;
    pad_img3_2_1_ce1 <= ap_const_logic_0;
    pad_img3_2_1_d0 <= ap_const_lv32_0;
    pad_img3_2_1_d1 <= ap_const_lv32_0;
    pad_img3_2_1_we0 <= ap_const_logic_0;
    pad_img3_2_1_we1 <= ap_const_logic_0;
    pad_img3_2_2_address0 <= convolutional_layer_U0_pad_img3_2_2_address0;
    pad_img3_2_2_address1 <= ap_const_lv5_0;
    pad_img3_2_2_ce0 <= convolutional_layer_U0_pad_img3_2_2_ce0;
    pad_img3_2_2_ce1 <= ap_const_logic_0;
    pad_img3_2_2_d0 <= ap_const_lv32_0;
    pad_img3_2_2_d1 <= ap_const_lv32_0;
    pad_img3_2_2_we0 <= ap_const_logic_0;
    pad_img3_2_2_we1 <= ap_const_logic_0;
    pad_img3_2_3_address0 <= convolutional_layer_U0_pad_img3_2_3_address0;
    pad_img3_2_3_address1 <= ap_const_lv5_0;
    pad_img3_2_3_ce0 <= convolutional_layer_U0_pad_img3_2_3_ce0;
    pad_img3_2_3_ce1 <= ap_const_logic_0;
    pad_img3_2_3_d0 <= ap_const_lv32_0;
    pad_img3_2_3_d1 <= ap_const_lv32_0;
    pad_img3_2_3_we0 <= ap_const_logic_0;
    pad_img3_2_3_we1 <= ap_const_logic_0;
    pad_img3_2_4_address0 <= convolutional_layer_U0_pad_img3_2_4_address0;
    pad_img3_2_4_address1 <= ap_const_lv5_0;
    pad_img3_2_4_ce0 <= convolutional_layer_U0_pad_img3_2_4_ce0;
    pad_img3_2_4_ce1 <= ap_const_logic_0;
    pad_img3_2_4_d0 <= ap_const_lv32_0;
    pad_img3_2_4_d1 <= ap_const_lv32_0;
    pad_img3_2_4_we0 <= ap_const_logic_0;
    pad_img3_2_4_we1 <= ap_const_logic_0;
    pad_img3_2_5_address0 <= convolutional_layer_U0_pad_img3_2_5_address0;
    pad_img3_2_5_address1 <= ap_const_lv5_0;
    pad_img3_2_5_ce0 <= convolutional_layer_U0_pad_img3_2_5_ce0;
    pad_img3_2_5_ce1 <= ap_const_logic_0;
    pad_img3_2_5_d0 <= ap_const_lv32_0;
    pad_img3_2_5_d1 <= ap_const_lv32_0;
    pad_img3_2_5_we0 <= ap_const_logic_0;
    pad_img3_2_5_we1 <= ap_const_logic_0;
    pad_img3_2_6_address0 <= convolutional_layer_U0_pad_img3_2_6_address0;
    pad_img3_2_6_address1 <= ap_const_lv5_0;
    pad_img3_2_6_ce0 <= convolutional_layer_U0_pad_img3_2_6_ce0;
    pad_img3_2_6_ce1 <= ap_const_logic_0;
    pad_img3_2_6_d0 <= ap_const_lv32_0;
    pad_img3_2_6_d1 <= ap_const_lv32_0;
    pad_img3_2_6_we0 <= ap_const_logic_0;
    pad_img3_2_6_we1 <= ap_const_logic_0;
    pad_img3_3_0_address0 <= convolutional_layer_U0_pad_img3_3_0_address0;
    pad_img3_3_0_address1 <= ap_const_lv5_0;
    pad_img3_3_0_ce0 <= convolutional_layer_U0_pad_img3_3_0_ce0;
    pad_img3_3_0_ce1 <= ap_const_logic_0;
    pad_img3_3_0_d0 <= ap_const_lv32_0;
    pad_img3_3_0_d1 <= ap_const_lv32_0;
    pad_img3_3_0_we0 <= ap_const_logic_0;
    pad_img3_3_0_we1 <= ap_const_logic_0;
    pad_img3_3_1_address0 <= convolutional_layer_U0_pad_img3_3_1_address0;
    pad_img3_3_1_address1 <= ap_const_lv5_0;
    pad_img3_3_1_ce0 <= convolutional_layer_U0_pad_img3_3_1_ce0;
    pad_img3_3_1_ce1 <= ap_const_logic_0;
    pad_img3_3_1_d0 <= ap_const_lv32_0;
    pad_img3_3_1_d1 <= ap_const_lv32_0;
    pad_img3_3_1_we0 <= ap_const_logic_0;
    pad_img3_3_1_we1 <= ap_const_logic_0;
    pad_img3_3_2_address0 <= convolutional_layer_U0_pad_img3_3_2_address0;
    pad_img3_3_2_address1 <= ap_const_lv5_0;
    pad_img3_3_2_ce0 <= convolutional_layer_U0_pad_img3_3_2_ce0;
    pad_img3_3_2_ce1 <= ap_const_logic_0;
    pad_img3_3_2_d0 <= ap_const_lv32_0;
    pad_img3_3_2_d1 <= ap_const_lv32_0;
    pad_img3_3_2_we0 <= ap_const_logic_0;
    pad_img3_3_2_we1 <= ap_const_logic_0;
    pad_img3_3_3_address0 <= convolutional_layer_U0_pad_img3_3_3_address0;
    pad_img3_3_3_address1 <= ap_const_lv5_0;
    pad_img3_3_3_ce0 <= convolutional_layer_U0_pad_img3_3_3_ce0;
    pad_img3_3_3_ce1 <= ap_const_logic_0;
    pad_img3_3_3_d0 <= ap_const_lv32_0;
    pad_img3_3_3_d1 <= ap_const_lv32_0;
    pad_img3_3_3_we0 <= ap_const_logic_0;
    pad_img3_3_3_we1 <= ap_const_logic_0;
    pad_img3_3_4_address0 <= convolutional_layer_U0_pad_img3_3_4_address0;
    pad_img3_3_4_address1 <= ap_const_lv5_0;
    pad_img3_3_4_ce0 <= convolutional_layer_U0_pad_img3_3_4_ce0;
    pad_img3_3_4_ce1 <= ap_const_logic_0;
    pad_img3_3_4_d0 <= ap_const_lv32_0;
    pad_img3_3_4_d1 <= ap_const_lv32_0;
    pad_img3_3_4_we0 <= ap_const_logic_0;
    pad_img3_3_4_we1 <= ap_const_logic_0;
    pad_img3_3_5_address0 <= convolutional_layer_U0_pad_img3_3_5_address0;
    pad_img3_3_5_address1 <= ap_const_lv5_0;
    pad_img3_3_5_ce0 <= convolutional_layer_U0_pad_img3_3_5_ce0;
    pad_img3_3_5_ce1 <= ap_const_logic_0;
    pad_img3_3_5_d0 <= ap_const_lv32_0;
    pad_img3_3_5_d1 <= ap_const_lv32_0;
    pad_img3_3_5_we0 <= ap_const_logic_0;
    pad_img3_3_5_we1 <= ap_const_logic_0;
    pad_img3_3_6_address0 <= convolutional_layer_U0_pad_img3_3_6_address0;
    pad_img3_3_6_address1 <= ap_const_lv5_0;
    pad_img3_3_6_ce0 <= convolutional_layer_U0_pad_img3_3_6_ce0;
    pad_img3_3_6_ce1 <= ap_const_logic_0;
    pad_img3_3_6_d0 <= ap_const_lv32_0;
    pad_img3_3_6_d1 <= ap_const_lv32_0;
    pad_img3_3_6_we0 <= ap_const_logic_0;
    pad_img3_3_6_we1 <= ap_const_logic_0;
    pad_img3_4_0_address0 <= convolutional_layer_U0_pad_img3_4_0_address0;
    pad_img3_4_0_address1 <= ap_const_lv5_0;
    pad_img3_4_0_ce0 <= convolutional_layer_U0_pad_img3_4_0_ce0;
    pad_img3_4_0_ce1 <= ap_const_logic_0;
    pad_img3_4_0_d0 <= ap_const_lv32_0;
    pad_img3_4_0_d1 <= ap_const_lv32_0;
    pad_img3_4_0_we0 <= ap_const_logic_0;
    pad_img3_4_0_we1 <= ap_const_logic_0;
    pad_img3_4_1_address0 <= convolutional_layer_U0_pad_img3_4_1_address0;
    pad_img3_4_1_address1 <= ap_const_lv5_0;
    pad_img3_4_1_ce0 <= convolutional_layer_U0_pad_img3_4_1_ce0;
    pad_img3_4_1_ce1 <= ap_const_logic_0;
    pad_img3_4_1_d0 <= ap_const_lv32_0;
    pad_img3_4_1_d1 <= ap_const_lv32_0;
    pad_img3_4_1_we0 <= ap_const_logic_0;
    pad_img3_4_1_we1 <= ap_const_logic_0;
    pad_img3_4_2_address0 <= convolutional_layer_U0_pad_img3_4_2_address0;
    pad_img3_4_2_address1 <= ap_const_lv5_0;
    pad_img3_4_2_ce0 <= convolutional_layer_U0_pad_img3_4_2_ce0;
    pad_img3_4_2_ce1 <= ap_const_logic_0;
    pad_img3_4_2_d0 <= ap_const_lv32_0;
    pad_img3_4_2_d1 <= ap_const_lv32_0;
    pad_img3_4_2_we0 <= ap_const_logic_0;
    pad_img3_4_2_we1 <= ap_const_logic_0;
    pad_img3_4_3_address0 <= convolutional_layer_U0_pad_img3_4_3_address0;
    pad_img3_4_3_address1 <= ap_const_lv5_0;
    pad_img3_4_3_ce0 <= convolutional_layer_U0_pad_img3_4_3_ce0;
    pad_img3_4_3_ce1 <= ap_const_logic_0;
    pad_img3_4_3_d0 <= ap_const_lv32_0;
    pad_img3_4_3_d1 <= ap_const_lv32_0;
    pad_img3_4_3_we0 <= ap_const_logic_0;
    pad_img3_4_3_we1 <= ap_const_logic_0;
    pad_img3_4_4_address0 <= convolutional_layer_U0_pad_img3_4_4_address0;
    pad_img3_4_4_address1 <= ap_const_lv5_0;
    pad_img3_4_4_ce0 <= convolutional_layer_U0_pad_img3_4_4_ce0;
    pad_img3_4_4_ce1 <= ap_const_logic_0;
    pad_img3_4_4_d0 <= ap_const_lv32_0;
    pad_img3_4_4_d1 <= ap_const_lv32_0;
    pad_img3_4_4_we0 <= ap_const_logic_0;
    pad_img3_4_4_we1 <= ap_const_logic_0;
    pad_img3_4_5_address0 <= convolutional_layer_U0_pad_img3_4_5_address0;
    pad_img3_4_5_address1 <= ap_const_lv5_0;
    pad_img3_4_5_ce0 <= convolutional_layer_U0_pad_img3_4_5_ce0;
    pad_img3_4_5_ce1 <= ap_const_logic_0;
    pad_img3_4_5_d0 <= ap_const_lv32_0;
    pad_img3_4_5_d1 <= ap_const_lv32_0;
    pad_img3_4_5_we0 <= ap_const_logic_0;
    pad_img3_4_5_we1 <= ap_const_logic_0;
    pad_img3_4_6_address0 <= convolutional_layer_U0_pad_img3_4_6_address0;
    pad_img3_4_6_address1 <= ap_const_lv5_0;
    pad_img3_4_6_ce0 <= convolutional_layer_U0_pad_img3_4_6_ce0;
    pad_img3_4_6_ce1 <= ap_const_logic_0;
    pad_img3_4_6_d0 <= ap_const_lv32_0;
    pad_img3_4_6_d1 <= ap_const_lv32_0;
    pad_img3_4_6_we0 <= ap_const_logic_0;
    pad_img3_4_6_we1 <= ap_const_logic_0;
    pad_img3_5_0_address0 <= convolutional_layer_U0_pad_img3_5_0_address0;
    pad_img3_5_0_address1 <= ap_const_lv5_0;
    pad_img3_5_0_ce0 <= convolutional_layer_U0_pad_img3_5_0_ce0;
    pad_img3_5_0_ce1 <= ap_const_logic_0;
    pad_img3_5_0_d0 <= ap_const_lv32_0;
    pad_img3_5_0_d1 <= ap_const_lv32_0;
    pad_img3_5_0_we0 <= ap_const_logic_0;
    pad_img3_5_0_we1 <= ap_const_logic_0;
    pad_img3_5_1_address0 <= convolutional_layer_U0_pad_img3_5_1_address0;
    pad_img3_5_1_address1 <= ap_const_lv5_0;
    pad_img3_5_1_ce0 <= convolutional_layer_U0_pad_img3_5_1_ce0;
    pad_img3_5_1_ce1 <= ap_const_logic_0;
    pad_img3_5_1_d0 <= ap_const_lv32_0;
    pad_img3_5_1_d1 <= ap_const_lv32_0;
    pad_img3_5_1_we0 <= ap_const_logic_0;
    pad_img3_5_1_we1 <= ap_const_logic_0;
    pad_img3_5_2_address0 <= convolutional_layer_U0_pad_img3_5_2_address0;
    pad_img3_5_2_address1 <= ap_const_lv5_0;
    pad_img3_5_2_ce0 <= convolutional_layer_U0_pad_img3_5_2_ce0;
    pad_img3_5_2_ce1 <= ap_const_logic_0;
    pad_img3_5_2_d0 <= ap_const_lv32_0;
    pad_img3_5_2_d1 <= ap_const_lv32_0;
    pad_img3_5_2_we0 <= ap_const_logic_0;
    pad_img3_5_2_we1 <= ap_const_logic_0;
    pad_img3_5_3_address0 <= convolutional_layer_U0_pad_img3_5_3_address0;
    pad_img3_5_3_address1 <= ap_const_lv5_0;
    pad_img3_5_3_ce0 <= convolutional_layer_U0_pad_img3_5_3_ce0;
    pad_img3_5_3_ce1 <= ap_const_logic_0;
    pad_img3_5_3_d0 <= ap_const_lv32_0;
    pad_img3_5_3_d1 <= ap_const_lv32_0;
    pad_img3_5_3_we0 <= ap_const_logic_0;
    pad_img3_5_3_we1 <= ap_const_logic_0;
    pad_img3_5_4_address0 <= convolutional_layer_U0_pad_img3_5_4_address0;
    pad_img3_5_4_address1 <= ap_const_lv5_0;
    pad_img3_5_4_ce0 <= convolutional_layer_U0_pad_img3_5_4_ce0;
    pad_img3_5_4_ce1 <= ap_const_logic_0;
    pad_img3_5_4_d0 <= ap_const_lv32_0;
    pad_img3_5_4_d1 <= ap_const_lv32_0;
    pad_img3_5_4_we0 <= ap_const_logic_0;
    pad_img3_5_4_we1 <= ap_const_logic_0;
    pad_img3_5_5_address0 <= convolutional_layer_U0_pad_img3_5_5_address0;
    pad_img3_5_5_address1 <= ap_const_lv5_0;
    pad_img3_5_5_ce0 <= convolutional_layer_U0_pad_img3_5_5_ce0;
    pad_img3_5_5_ce1 <= ap_const_logic_0;
    pad_img3_5_5_d0 <= ap_const_lv32_0;
    pad_img3_5_5_d1 <= ap_const_lv32_0;
    pad_img3_5_5_we0 <= ap_const_logic_0;
    pad_img3_5_5_we1 <= ap_const_logic_0;
    pad_img3_5_6_address0 <= convolutional_layer_U0_pad_img3_5_6_address0;
    pad_img3_5_6_address1 <= ap_const_lv5_0;
    pad_img3_5_6_ce0 <= convolutional_layer_U0_pad_img3_5_6_ce0;
    pad_img3_5_6_ce1 <= ap_const_logic_0;
    pad_img3_5_6_d0 <= ap_const_lv32_0;
    pad_img3_5_6_d1 <= ap_const_lv32_0;
    pad_img3_5_6_we0 <= ap_const_logic_0;
    pad_img3_5_6_we1 <= ap_const_logic_0;
    pad_img3_6_0_address0 <= convolutional_layer_U0_pad_img3_6_0_address0;
    pad_img3_6_0_address1 <= ap_const_lv5_0;
    pad_img3_6_0_ce0 <= convolutional_layer_U0_pad_img3_6_0_ce0;
    pad_img3_6_0_ce1 <= ap_const_logic_0;
    pad_img3_6_0_d0 <= ap_const_lv32_0;
    pad_img3_6_0_d1 <= ap_const_lv32_0;
    pad_img3_6_0_we0 <= ap_const_logic_0;
    pad_img3_6_0_we1 <= ap_const_logic_0;
    pad_img3_6_1_address0 <= convolutional_layer_U0_pad_img3_6_1_address0;
    pad_img3_6_1_address1 <= ap_const_lv5_0;
    pad_img3_6_1_ce0 <= convolutional_layer_U0_pad_img3_6_1_ce0;
    pad_img3_6_1_ce1 <= ap_const_logic_0;
    pad_img3_6_1_d0 <= ap_const_lv32_0;
    pad_img3_6_1_d1 <= ap_const_lv32_0;
    pad_img3_6_1_we0 <= ap_const_logic_0;
    pad_img3_6_1_we1 <= ap_const_logic_0;
    pad_img3_6_2_address0 <= convolutional_layer_U0_pad_img3_6_2_address0;
    pad_img3_6_2_address1 <= ap_const_lv5_0;
    pad_img3_6_2_ce0 <= convolutional_layer_U0_pad_img3_6_2_ce0;
    pad_img3_6_2_ce1 <= ap_const_logic_0;
    pad_img3_6_2_d0 <= ap_const_lv32_0;
    pad_img3_6_2_d1 <= ap_const_lv32_0;
    pad_img3_6_2_we0 <= ap_const_logic_0;
    pad_img3_6_2_we1 <= ap_const_logic_0;
    pad_img3_6_3_address0 <= convolutional_layer_U0_pad_img3_6_3_address0;
    pad_img3_6_3_address1 <= ap_const_lv5_0;
    pad_img3_6_3_ce0 <= convolutional_layer_U0_pad_img3_6_3_ce0;
    pad_img3_6_3_ce1 <= ap_const_logic_0;
    pad_img3_6_3_d0 <= ap_const_lv32_0;
    pad_img3_6_3_d1 <= ap_const_lv32_0;
    pad_img3_6_3_we0 <= ap_const_logic_0;
    pad_img3_6_3_we1 <= ap_const_logic_0;
    pad_img3_6_4_address0 <= convolutional_layer_U0_pad_img3_6_4_address0;
    pad_img3_6_4_address1 <= ap_const_lv5_0;
    pad_img3_6_4_ce0 <= convolutional_layer_U0_pad_img3_6_4_ce0;
    pad_img3_6_4_ce1 <= ap_const_logic_0;
    pad_img3_6_4_d0 <= ap_const_lv32_0;
    pad_img3_6_4_d1 <= ap_const_lv32_0;
    pad_img3_6_4_we0 <= ap_const_logic_0;
    pad_img3_6_4_we1 <= ap_const_logic_0;
    pad_img3_6_5_address0 <= convolutional_layer_U0_pad_img3_6_5_address0;
    pad_img3_6_5_address1 <= ap_const_lv5_0;
    pad_img3_6_5_ce0 <= convolutional_layer_U0_pad_img3_6_5_ce0;
    pad_img3_6_5_ce1 <= ap_const_logic_0;
    pad_img3_6_5_d0 <= ap_const_lv32_0;
    pad_img3_6_5_d1 <= ap_const_lv32_0;
    pad_img3_6_5_we0 <= ap_const_logic_0;
    pad_img3_6_5_we1 <= ap_const_logic_0;
    pad_img3_6_6_address0 <= convolutional_layer_U0_pad_img3_6_6_address0;
    pad_img3_6_6_address1 <= ap_const_lv5_0;
    pad_img3_6_6_ce0 <= convolutional_layer_U0_pad_img3_6_6_ce0;
    pad_img3_6_6_ce1 <= ap_const_logic_0;
    pad_img3_6_6_d0 <= ap_const_lv32_0;
    pad_img3_6_6_d1 <= ap_const_lv32_0;
    pad_img3_6_6_we0 <= ap_const_logic_0;
    pad_img3_6_6_we1 <= ap_const_logic_0;
    prediction_address0 <= dense_layer_soft_max_U0_prediction_address0;
    prediction_address1 <= dense_layer_soft_max_U0_prediction_address1;
    prediction_ce0 <= dense_layer_soft_max_U0_prediction_ce0;
    prediction_ce1 <= dense_layer_soft_max_U0_prediction_ce1;
    prediction_d0 <= dense_layer_soft_max_U0_prediction_d0;
    prediction_d1 <= ap_const_lv32_0;
    prediction_we0 <= dense_layer_soft_max_U0_prediction_we0;
    prediction_we1 <= ap_const_logic_0;
    start_for_dense_layer_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_flattening_layer_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_max_pooling_layer_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
