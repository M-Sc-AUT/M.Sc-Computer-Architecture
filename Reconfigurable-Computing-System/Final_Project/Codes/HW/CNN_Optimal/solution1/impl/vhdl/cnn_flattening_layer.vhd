-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_flattening_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    pool_to_flat_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pool_to_flat_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_0_empty_n : IN STD_LOGIC;
    pool_to_flat_streams_0_read : OUT STD_LOGIC;
    pool_to_flat_streams_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pool_to_flat_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_1_empty_n : IN STD_LOGIC;
    pool_to_flat_streams_1_read : OUT STD_LOGIC;
    pool_to_flat_streams_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pool_to_flat_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_2_empty_n : IN STD_LOGIC;
    pool_to_flat_streams_2_read : OUT STD_LOGIC;
    pool_to_flat_streams_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pool_to_flat_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    pool_to_flat_streams_3_empty_n : IN STD_LOGIC;
    pool_to_flat_streams_3_read : OUT STD_LOGIC;
    flat_to_dense_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    flat_to_dense_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_0_full_n : IN STD_LOGIC;
    flat_to_dense_streams_0_write : OUT STD_LOGIC;
    flat_to_dense_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    flat_to_dense_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_1_full_n : IN STD_LOGIC;
    flat_to_dense_streams_1_write : OUT STD_LOGIC;
    flat_to_dense_streams_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    flat_to_dense_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_2_full_n : IN STD_LOGIC;
    flat_to_dense_streams_2_write : OUT STD_LOGIC;
    flat_to_dense_streams_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    flat_to_dense_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    flat_to_dense_streams_3_full_n : IN STD_LOGIC;
    flat_to_dense_streams_3_write : OUT STD_LOGIC );
end;


architecture behav of cnn_flattening_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal grp_flattening_fu_28_ap_start : STD_LOGIC;
    signal grp_flattening_fu_28_ap_done : STD_LOGIC;
    signal grp_flattening_fu_28_ap_idle : STD_LOGIC;
    signal grp_flattening_fu_28_ap_ready : STD_LOGIC;
    signal grp_flattening_fu_28_pool_to_flat_streams_0_read : STD_LOGIC;
    signal grp_flattening_fu_28_flat_to_dense_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flattening_fu_28_flat_to_dense_streams_0_write : STD_LOGIC;
    signal grp_flattening_fu_36_ap_start : STD_LOGIC;
    signal grp_flattening_fu_36_ap_done : STD_LOGIC;
    signal grp_flattening_fu_36_ap_idle : STD_LOGIC;
    signal grp_flattening_fu_36_ap_ready : STD_LOGIC;
    signal grp_flattening_fu_36_pool_to_flat_streams_0_read : STD_LOGIC;
    signal grp_flattening_fu_36_flat_to_dense_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flattening_fu_36_flat_to_dense_streams_0_write : STD_LOGIC;
    signal grp_flattening_fu_44_ap_start : STD_LOGIC;
    signal grp_flattening_fu_44_ap_done : STD_LOGIC;
    signal grp_flattening_fu_44_ap_idle : STD_LOGIC;
    signal grp_flattening_fu_44_ap_ready : STD_LOGIC;
    signal grp_flattening_fu_44_pool_to_flat_streams_0_read : STD_LOGIC;
    signal grp_flattening_fu_44_flat_to_dense_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flattening_fu_44_flat_to_dense_streams_0_write : STD_LOGIC;
    signal grp_flattening_fu_52_ap_start : STD_LOGIC;
    signal grp_flattening_fu_52_ap_done : STD_LOGIC;
    signal grp_flattening_fu_52_ap_idle : STD_LOGIC;
    signal grp_flattening_fu_52_ap_ready : STD_LOGIC;
    signal grp_flattening_fu_52_pool_to_flat_streams_0_read : STD_LOGIC;
    signal grp_flattening_fu_52_flat_to_dense_streams_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flattening_fu_52_flat_to_dense_streams_0_write : STD_LOGIC;
    signal grp_flattening_fu_28_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call8 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_flattening_fu_36_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call9 : BOOLEAN;
    signal grp_flattening_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call10 : BOOLEAN;
    signal grp_flattening_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call11 : BOOLEAN;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_flattening IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pool_to_flat_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool_to_flat_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        pool_to_flat_streams_0_empty_n : IN STD_LOGIC;
        pool_to_flat_streams_0_read : OUT STD_LOGIC;
        flat_to_dense_streams_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        flat_to_dense_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        flat_to_dense_streams_0_full_n : IN STD_LOGIC;
        flat_to_dense_streams_0_write : OUT STD_LOGIC );
    end component;



begin
    grp_flattening_fu_28 : component cnn_flattening
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flattening_fu_28_ap_start,
        ap_done => grp_flattening_fu_28_ap_done,
        ap_idle => grp_flattening_fu_28_ap_idle,
        ap_ready => grp_flattening_fu_28_ap_ready,
        pool_to_flat_streams_0_dout => pool_to_flat_streams_0_dout,
        pool_to_flat_streams_0_num_data_valid => ap_const_lv9_0,
        pool_to_flat_streams_0_fifo_cap => ap_const_lv9_0,
        pool_to_flat_streams_0_empty_n => pool_to_flat_streams_0_empty_n,
        pool_to_flat_streams_0_read => grp_flattening_fu_28_pool_to_flat_streams_0_read,
        flat_to_dense_streams_0_din => grp_flattening_fu_28_flat_to_dense_streams_0_din,
        flat_to_dense_streams_0_num_data_valid => ap_const_lv9_0,
        flat_to_dense_streams_0_fifo_cap => ap_const_lv9_0,
        flat_to_dense_streams_0_full_n => flat_to_dense_streams_0_full_n,
        flat_to_dense_streams_0_write => grp_flattening_fu_28_flat_to_dense_streams_0_write);

    grp_flattening_fu_36 : component cnn_flattening
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flattening_fu_36_ap_start,
        ap_done => grp_flattening_fu_36_ap_done,
        ap_idle => grp_flattening_fu_36_ap_idle,
        ap_ready => grp_flattening_fu_36_ap_ready,
        pool_to_flat_streams_0_dout => pool_to_flat_streams_1_dout,
        pool_to_flat_streams_0_num_data_valid => ap_const_lv9_0,
        pool_to_flat_streams_0_fifo_cap => ap_const_lv9_0,
        pool_to_flat_streams_0_empty_n => pool_to_flat_streams_1_empty_n,
        pool_to_flat_streams_0_read => grp_flattening_fu_36_pool_to_flat_streams_0_read,
        flat_to_dense_streams_0_din => grp_flattening_fu_36_flat_to_dense_streams_0_din,
        flat_to_dense_streams_0_num_data_valid => ap_const_lv9_0,
        flat_to_dense_streams_0_fifo_cap => ap_const_lv9_0,
        flat_to_dense_streams_0_full_n => flat_to_dense_streams_1_full_n,
        flat_to_dense_streams_0_write => grp_flattening_fu_36_flat_to_dense_streams_0_write);

    grp_flattening_fu_44 : component cnn_flattening
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flattening_fu_44_ap_start,
        ap_done => grp_flattening_fu_44_ap_done,
        ap_idle => grp_flattening_fu_44_ap_idle,
        ap_ready => grp_flattening_fu_44_ap_ready,
        pool_to_flat_streams_0_dout => pool_to_flat_streams_2_dout,
        pool_to_flat_streams_0_num_data_valid => ap_const_lv9_0,
        pool_to_flat_streams_0_fifo_cap => ap_const_lv9_0,
        pool_to_flat_streams_0_empty_n => pool_to_flat_streams_2_empty_n,
        pool_to_flat_streams_0_read => grp_flattening_fu_44_pool_to_flat_streams_0_read,
        flat_to_dense_streams_0_din => grp_flattening_fu_44_flat_to_dense_streams_0_din,
        flat_to_dense_streams_0_num_data_valid => ap_const_lv9_0,
        flat_to_dense_streams_0_fifo_cap => ap_const_lv9_0,
        flat_to_dense_streams_0_full_n => flat_to_dense_streams_2_full_n,
        flat_to_dense_streams_0_write => grp_flattening_fu_44_flat_to_dense_streams_0_write);

    grp_flattening_fu_52 : component cnn_flattening
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flattening_fu_52_ap_start,
        ap_done => grp_flattening_fu_52_ap_done,
        ap_idle => grp_flattening_fu_52_ap_idle,
        ap_ready => grp_flattening_fu_52_ap_ready,
        pool_to_flat_streams_0_dout => pool_to_flat_streams_3_dout,
        pool_to_flat_streams_0_num_data_valid => ap_const_lv9_0,
        pool_to_flat_streams_0_fifo_cap => ap_const_lv9_0,
        pool_to_flat_streams_0_empty_n => pool_to_flat_streams_3_empty_n,
        pool_to_flat_streams_0_read => grp_flattening_fu_52_pool_to_flat_streams_0_read,
        flat_to_dense_streams_0_din => grp_flattening_fu_52_flat_to_dense_streams_0_din,
        flat_to_dense_streams_0_num_data_valid => ap_const_lv9_0,
        flat_to_dense_streams_0_fifo_cap => ap_const_lv9_0,
        flat_to_dense_streams_0_full_n => flat_to_dense_streams_3_full_n,
        flat_to_dense_streams_0_write => grp_flattening_fu_52_flat_to_dense_streams_0_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_flattening_fu_28_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flattening_fu_28_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call8))) then 
                    grp_flattening_fu_28_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flattening_fu_28_ap_ready = ap_const_logic_1)) then 
                    grp_flattening_fu_28_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flattening_fu_36_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flattening_fu_36_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call9))) then 
                    grp_flattening_fu_36_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flattening_fu_36_ap_ready = ap_const_logic_1)) then 
                    grp_flattening_fu_36_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flattening_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flattening_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call10))) then 
                    grp_flattening_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flattening_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_flattening_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flattening_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flattening_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call11))) then 
                    grp_flattening_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flattening_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_flattening_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call10_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call10 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call11_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call11 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call8_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call8 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call9_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call9 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_flattening_fu_28_ap_done, grp_flattening_fu_36_ap_done, grp_flattening_fu_44_ap_done, grp_flattening_fu_52_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_flattening_fu_28_ap_done = ap_const_logic_0) or (grp_flattening_fu_52_ap_done = ap_const_logic_0) or (grp_flattening_fu_44_ap_done = ap_const_logic_0) or (grp_flattening_fu_36_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    flat_to_dense_streams_0_din <= grp_flattening_fu_28_flat_to_dense_streams_0_din;

    flat_to_dense_streams_0_write_assign_proc : process(grp_flattening_fu_28_flat_to_dense_streams_0_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            flat_to_dense_streams_0_write <= grp_flattening_fu_28_flat_to_dense_streams_0_write;
        else 
            flat_to_dense_streams_0_write <= ap_const_logic_0;
        end if; 
    end process;

    flat_to_dense_streams_1_din <= grp_flattening_fu_36_flat_to_dense_streams_0_din;

    flat_to_dense_streams_1_write_assign_proc : process(grp_flattening_fu_36_flat_to_dense_streams_0_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            flat_to_dense_streams_1_write <= grp_flattening_fu_36_flat_to_dense_streams_0_write;
        else 
            flat_to_dense_streams_1_write <= ap_const_logic_0;
        end if; 
    end process;

    flat_to_dense_streams_2_din <= grp_flattening_fu_44_flat_to_dense_streams_0_din;

    flat_to_dense_streams_2_write_assign_proc : process(grp_flattening_fu_44_flat_to_dense_streams_0_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            flat_to_dense_streams_2_write <= grp_flattening_fu_44_flat_to_dense_streams_0_write;
        else 
            flat_to_dense_streams_2_write <= ap_const_logic_0;
        end if; 
    end process;

    flat_to_dense_streams_3_din <= grp_flattening_fu_52_flat_to_dense_streams_0_din;

    flat_to_dense_streams_3_write_assign_proc : process(grp_flattening_fu_52_flat_to_dense_streams_0_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            flat_to_dense_streams_3_write <= grp_flattening_fu_52_flat_to_dense_streams_0_write;
        else 
            flat_to_dense_streams_3_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_flattening_fu_28_ap_start <= grp_flattening_fu_28_ap_start_reg;
    grp_flattening_fu_36_ap_start <= grp_flattening_fu_36_ap_start_reg;
    grp_flattening_fu_44_ap_start <= grp_flattening_fu_44_ap_start_reg;
    grp_flattening_fu_52_ap_start <= grp_flattening_fu_52_ap_start_reg;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    pool_to_flat_streams_0_read_assign_proc : process(grp_flattening_fu_28_pool_to_flat_streams_0_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pool_to_flat_streams_0_read <= grp_flattening_fu_28_pool_to_flat_streams_0_read;
        else 
            pool_to_flat_streams_0_read <= ap_const_logic_0;
        end if; 
    end process;


    pool_to_flat_streams_1_read_assign_proc : process(grp_flattening_fu_36_pool_to_flat_streams_0_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pool_to_flat_streams_1_read <= grp_flattening_fu_36_pool_to_flat_streams_0_read;
        else 
            pool_to_flat_streams_1_read <= ap_const_logic_0;
        end if; 
    end process;


    pool_to_flat_streams_2_read_assign_proc : process(grp_flattening_fu_44_pool_to_flat_streams_0_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pool_to_flat_streams_2_read <= grp_flattening_fu_44_pool_to_flat_streams_0_read;
        else 
            pool_to_flat_streams_2_read <= ap_const_logic_0;
        end if; 
    end process;


    pool_to_flat_streams_3_read_assign_proc : process(grp_flattening_fu_52_pool_to_flat_streams_0_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pool_to_flat_streams_3_read <= grp_flattening_fu_52_pool_to_flat_streams_0_read;
        else 
            pool_to_flat_streams_3_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
