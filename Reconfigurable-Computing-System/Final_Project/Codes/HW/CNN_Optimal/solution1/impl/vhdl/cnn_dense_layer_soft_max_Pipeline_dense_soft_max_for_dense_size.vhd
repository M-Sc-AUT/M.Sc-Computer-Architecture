-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_to_softmax_streams_0_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    dense_to_softmax_streams_0_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_0_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_0_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_0_read : OUT STD_LOGIC;
    dense_to_softmax_streams_1_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    dense_to_softmax_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_1_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_1_read : OUT STD_LOGIC;
    dense_to_softmax_streams_2_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    dense_to_softmax_streams_2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_2_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_2_read : OUT STD_LOGIC;
    dense_to_softmax_streams_3_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    dense_to_softmax_streams_3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    dense_to_softmax_streams_3_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_3_read : OUT STD_LOGIC;
    prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce0 : OUT STD_LOGIC;
    prediction_we0 : OUT STD_LOGIC;
    prediction_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv11_7F8 : STD_LOGIC_VECTOR (10 downto 0) := "11111111000";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv11_36 : STD_LOGIC_VECTOR (10 downto 0) := "00000110110";
    constant ap_const_lv11_18 : STD_LOGIC_VECTOR (10 downto 0) := "00000011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln13_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dense_biases_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_biases_ce0 : STD_LOGIC;
    signal dense_biases_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_to_softmax_streams_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dense_to_softmax_streams_1_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_2_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal d_1_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln13_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_813_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_817_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_to_softmax_streams_0_read_reg_827 : STD_LOGIC_VECTOR (23 downto 0);
    signal dense_to_softmax_streams_1_read_reg_832 : STD_LOGIC_VECTOR (23 downto 0);
    signal dense_to_softmax_streams_1_read_reg_832_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal dense_to_softmax_streams_2_read_reg_837 : STD_LOGIC_VECTOR (23 downto 0);
    signal dense_to_softmax_streams_2_read_reg_837_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal dense_to_softmax_streams_3_read_reg_842 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln19_2_fu_250_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln19_2_reg_847 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_1_fu_259_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_1_reg_852 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_858_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_858_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_858_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln22_fu_272_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln22_reg_864 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln22_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_869_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_869_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_fu_283_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_reg_874 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln22_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_reg_881_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln22_reg_881_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln22_1_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln22_1_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln22_7_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln22_7_reg_893 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln_fu_422_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_898 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln22_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln22_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln22_reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln22_fu_463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln22_reg_913 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln22_1_reg_918 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_8_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_7_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_7_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_933_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_933_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_933_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_3_fu_560_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln22_3_reg_939 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_9_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_949 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln22_4_fu_582_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln22_4_reg_954 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln22_2_fu_606_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln22_2_reg_959 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln22_4_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_5_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_5_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_3_fu_646_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln22_3_reg_976 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln22_6_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_6_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_6_fu_660_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln22_6_reg_990 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_10_fu_768_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_10_reg_996 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_fu_134 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal add_ln22_5_fu_779_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal d_fu_138 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln13_fu_226_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_d_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sum_cast_fu_241_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln19_1_fu_245_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln19_fu_255_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_288_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_298_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln22_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_310_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_1_fu_328_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln22_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_343_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln22_5_fu_359_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln22_2_fu_362_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln22_4_fu_368_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln22_1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_2_fu_399_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal bit_select30_i_i_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_2_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_1_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln22_2_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_2_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln22_1_fu_469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_3_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_2_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln22_6_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln22_6_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_3_fu_516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln22_8_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_522_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_fu_529_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln766_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_5_cast_fu_589_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln22_9_fu_596_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln22_3_fu_600_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln22_4_fu_586_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln22_4_fu_618_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln22_5_fu_624_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln22_4_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln22_5_fu_640_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln22_7_fu_669_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln22_fu_672_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_1_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_7_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_7_fu_677_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_11_fu_692_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_3cast_fu_713_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln22_8_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln22_1_fu_716_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_5_fu_721_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln22_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_2_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_8_fu_729_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln22_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_1_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_3_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_4_fu_700_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln22_9_fu_746_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_199_ce : STD_LOGIC;
    signal grp_fu_202_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_fexp_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size_dense_biases_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dense_biases_U : component cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size_dense_biases_ROM_bkb
    generic map (
        DataWidth => 7,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_biases_address0,
        ce0 => dense_biases_ce0,
        q0 => dense_biases_q0);

    fpext_32ns_64_2_no_dsp_1_U2979 : component cnn_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_933,
        ce => grp_fu_199_ce,
        dout => grp_fu_199_p1);

    fexp_32ns_32ns_32_10_full_dsp_1_U2980 : component cnn_fexp_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => select_ln22_7_reg_928,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_220_p2 = ap_const_lv1_0))) then 
                    d_fu_138 <= add_ln13_fu_226_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    d_fu_138 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_134 <= ap_const_lv24_0;
                elsif ((ap_enable_reg_pp0_iter22 = ap_const_logic_1)) then 
                    empty_fu_134 <= add_ln22_5_fu_779_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln19_2_reg_847 <= add_ln19_2_fu_250_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                dense_to_softmax_streams_1_read_reg_832_pp0_iter2_reg <= dense_to_softmax_streams_1_read_reg_832;
                dense_to_softmax_streams_2_read_reg_837_pp0_iter2_reg <= dense_to_softmax_streams_2_read_reg_837;
                icmp_ln13_reg_813_pp0_iter10_reg <= icmp_ln13_reg_813_pp0_iter9_reg;
                icmp_ln13_reg_813_pp0_iter11_reg <= icmp_ln13_reg_813_pp0_iter10_reg;
                icmp_ln13_reg_813_pp0_iter12_reg <= icmp_ln13_reg_813_pp0_iter11_reg;
                icmp_ln13_reg_813_pp0_iter13_reg <= icmp_ln13_reg_813_pp0_iter12_reg;
                icmp_ln13_reg_813_pp0_iter14_reg <= icmp_ln13_reg_813_pp0_iter13_reg;
                icmp_ln13_reg_813_pp0_iter15_reg <= icmp_ln13_reg_813_pp0_iter14_reg;
                icmp_ln13_reg_813_pp0_iter16_reg <= icmp_ln13_reg_813_pp0_iter15_reg;
                icmp_ln13_reg_813_pp0_iter17_reg <= icmp_ln13_reg_813_pp0_iter16_reg;
                icmp_ln13_reg_813_pp0_iter18_reg <= icmp_ln13_reg_813_pp0_iter17_reg;
                icmp_ln13_reg_813_pp0_iter19_reg <= icmp_ln13_reg_813_pp0_iter18_reg;
                icmp_ln13_reg_813_pp0_iter20_reg <= icmp_ln13_reg_813_pp0_iter19_reg;
                icmp_ln13_reg_813_pp0_iter2_reg <= icmp_ln13_reg_813_pp0_iter1_reg;
                icmp_ln13_reg_813_pp0_iter3_reg <= icmp_ln13_reg_813_pp0_iter2_reg;
                icmp_ln13_reg_813_pp0_iter4_reg <= icmp_ln13_reg_813_pp0_iter3_reg;
                icmp_ln13_reg_813_pp0_iter5_reg <= icmp_ln13_reg_813_pp0_iter4_reg;
                icmp_ln13_reg_813_pp0_iter6_reg <= icmp_ln13_reg_813_pp0_iter5_reg;
                icmp_ln13_reg_813_pp0_iter7_reg <= icmp_ln13_reg_813_pp0_iter6_reg;
                icmp_ln13_reg_813_pp0_iter8_reg <= icmp_ln13_reg_813_pp0_iter7_reg;
                icmp_ln13_reg_813_pp0_iter9_reg <= icmp_ln13_reg_813_pp0_iter8_reg;
                icmp_ln22_3_reg_903 <= icmp_ln22_3_fu_433_p2;
                icmp_ln22_4_reg_964 <= icmp_ln22_4_fu_613_p2;
                icmp_ln22_5_reg_971 <= icmp_ln22_5_fu_628_p2;
                icmp_ln22_6_reg_984 <= icmp_ln22_6_fu_654_p2;
                icmp_ln22_reg_869 <= icmp_ln22_fu_278_p2;
                icmp_ln22_reg_869_pp0_iter5_reg <= icmp_ln22_reg_869;
                icmp_ln22_reg_869_pp0_iter6_reg <= icmp_ln22_reg_869_pp0_iter5_reg;
                lshr_ln22_1_reg_918 <= add_ln22_2_fu_477_p2(63 downto 1);
                lshr_ln22_reg_908 <= lshr_ln22_fu_448_p2;
                    or_ln_reg_898(0) <= or_ln_fu_422_p3(0);
                select_ln22_10_reg_996 <= select_ln22_10_fu_768_p3;
                select_ln22_2_reg_959 <= select_ln22_2_fu_606_p3;
                select_ln22_3_reg_976 <= select_ln22_3_fu_646_p3;
                select_ln22_7_reg_928 <= select_ln22_7_fu_549_p3;
                select_ln22_reg_874 <= select_ln22_fu_283_p3;
                shl_ln22_reg_913 <= shl_ln22_fu_463_p2;
                sub_ln22_1_reg_886 <= sub_ln22_1_fu_322_p2;
                sub_ln22_7_reg_893 <= sub_ln22_7_fu_332_p2;
                sub_ln22_reg_864 <= sub_ln22_fu_272_p2;
                sum_1_reg_852 <= sum_1_fu_259_p2;
                tmp_3_reg_858 <= sum_1_fu_259_p2(23 downto 23);
                tmp_3_reg_858_pp0_iter4_reg <= tmp_3_reg_858;
                tmp_3_reg_858_pp0_iter5_reg <= tmp_3_reg_858_pp0_iter4_reg;
                tmp_3_reg_858_pp0_iter6_reg <= tmp_3_reg_858_pp0_iter5_reg;
                tmp_6_reg_933 <= grp_fu_202_p2;
                tmp_6_reg_933_pp0_iter18_reg <= tmp_6_reg_933;
                tmp_6_reg_933_pp0_iter19_reg <= tmp_6_reg_933_pp0_iter18_reg;
                tmp_6_reg_933_pp0_iter20_reg <= tmp_6_reg_933_pp0_iter19_reg;
                tmp_8_reg_923 <= add_ln22_2_fu_477_p2(25 downto 25);
                tmp_9_reg_944 <= bitcast_ln724_fu_556_p1(63 downto 63);
                tmp_s_reg_949 <= bitcast_ln724_fu_556_p1(62 downto 52);
                trunc_ln22_3_reg_939 <= trunc_ln22_3_fu_560_p1;
                trunc_ln22_4_reg_954 <= trunc_ln22_4_fu_582_p1;
                trunc_ln22_6_reg_990 <= trunc_ln22_6_fu_660_p1;
                trunc_ln22_reg_881 <= trunc_ln22_fu_318_p1;
                trunc_ln22_reg_881_pp0_iter5_reg <= trunc_ln22_reg_881;
                trunc_ln22_reg_881_pp0_iter6_reg <= trunc_ln22_reg_881_pp0_iter5_reg;
                    zext_ln13_reg_817_pp0_iter10_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter9_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter11_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter10_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter12_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter11_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter13_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter12_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter14_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter13_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter15_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter14_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter16_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter15_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter17_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter16_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter18_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter17_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter19_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter18_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter20_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter19_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter21_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter20_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter2_reg(3 downto 0) <= zext_ln13_reg_817(3 downto 0);
                    zext_ln13_reg_817_pp0_iter3_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter2_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter4_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter3_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter5_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter4_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter6_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter5_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter7_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter6_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter8_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter7_reg(3 downto 0);
                    zext_ln13_reg_817_pp0_iter9_reg(3 downto 0) <= zext_ln13_reg_817_pp0_iter8_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                d_1_reg_808 <= ap_sig_allocacmp_d_1;
                dense_to_softmax_streams_0_read_reg_827 <= dense_to_softmax_streams_0_dout;
                dense_to_softmax_streams_1_read_reg_832 <= dense_to_softmax_streams_1_dout;
                dense_to_softmax_streams_2_read_reg_837 <= dense_to_softmax_streams_2_dout;
                dense_to_softmax_streams_3_read_reg_842 <= dense_to_softmax_streams_3_dout;
                icmp_ln13_reg_813 <= icmp_ln13_fu_220_p2;
                icmp_ln13_reg_813_pp0_iter1_reg <= icmp_ln13_reg_813;
                    zext_ln13_reg_817(3 downto 0) <= zext_ln13_fu_237_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_817(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter11_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter12_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter13_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter14_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter15_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter16_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter17_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter18_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter19_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter20_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_817_pp0_iter21_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_898(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LD_fu_541_p1 <= pi_assign_fu_529_p5(32 - 1 downto 0);
    add_ln13_fu_226_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_d_1) + unsigned(ap_const_lv4_1));
    add_ln19_1_fu_245_p2 <= std_logic_vector(unsigned(dense_to_softmax_streams_3_read_reg_842) + unsigned(sum_cast_fu_241_p1));
    add_ln19_2_fu_250_p2 <= std_logic_vector(unsigned(add_ln19_1_fu_245_p2) + unsigned(dense_to_softmax_streams_0_read_reg_827));
    add_ln19_fu_255_p2 <= std_logic_vector(unsigned(dense_to_softmax_streams_2_read_reg_837_pp0_iter2_reg) + unsigned(dense_to_softmax_streams_1_read_reg_832_pp0_iter2_reg));
    add_ln22_1_fu_439_p2 <= std_logic_vector(unsigned(sub_ln22_1_reg_886) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln22_2_fu_477_p2 <= std_logic_vector(unsigned(select_ln22_1_fu_469_p3) + unsigned(zext_ln22_3_fu_474_p1));
    add_ln22_3_fu_516_p2 <= std_logic_vector(unsigned(sub_ln22_6_fu_511_p2) + unsigned(select_ln22_6_fu_504_p3));
    add_ln22_4_fu_634_p2 <= std_logic_vector(unsigned(trunc_ln22_5_fu_624_p1) + unsigned(ap_const_lv11_7F8));
    add_ln22_5_fu_779_p2 <= std_logic_vector(unsigned(select_ln22_10_reg_996) + unsigned(empty_fu_134));
    add_ln22_fu_338_p2 <= std_logic_vector(unsigned(sub_ln22_1_reg_886) + unsigned(ap_const_lv32_FFFFFFE8));
    and_ln22_1_fu_410_p2 <= (xor_ln22_2_fu_393_p2 and bit_select30_i_i_fu_403_p3);
    and_ln22_2_fu_741_p2 <= (xor_ln22_fu_736_p2 and icmp_ln22_6_reg_984);
    and_ln22_3_fu_763_p2 <= (xor_ln22_1_fu_757_p2 and icmp_ln22_5_reg_971);
    and_ln22_4_fu_368_p2 <= (select_ln22_reg_874 and lshr_ln22_2_fu_362_p2);
    and_ln22_fu_379_p2 <= (icmp_ln22_2_fu_373_p2 and icmp_ln22_1_fu_353_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(dense_to_softmax_streams_0_empty_n, dense_to_softmax_streams_1_empty_n, dense_to_softmax_streams_2_empty_n, dense_to_softmax_streams_3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((dense_to_softmax_streams_0_empty_n = ap_const_logic_0) or (dense_to_softmax_streams_3_empty_n = ap_const_logic_0) or (dense_to_softmax_streams_2_empty_n = ap_const_logic_0) or (dense_to_softmax_streams_1_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln13_fu_220_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter21_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_d_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, d_fu_138)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_d_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_d_1 <= d_fu_138;
        end if; 
    end process;

    ashr_ln22_fu_672_p2 <= std_logic_vector(shift_right(signed(select_ln22_2_reg_959),to_integer(unsigned('0' & zext_ln22_7_fu_669_p1(31-1 downto 0)))));
    bit_select30_i_i_fu_403_p3 <= select_ln22_reg_874(to_integer(unsigned(trunc_ln22_2_fu_399_p1)) downto to_integer(unsigned(trunc_ln22_2_fu_399_p1))) when (to_integer(unsigned(trunc_ln22_2_fu_399_p1)) >= 0 and to_integer(unsigned(trunc_ln22_2_fu_399_p1)) <=23) else "-";
    bitcast_ln724_1_fu_681_p1 <= tmp_6_reg_933_pp0_iter20_reg;
    bitcast_ln724_fu_556_p1 <= grp_fu_199_p1;
    bitcast_ln766_fu_545_p1 <= LD_fu_541_p1;
    dense_biases_address0 <= zext_ln13_fu_237_p1(4 - 1 downto 0);

    dense_biases_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_biases_ce0 <= ap_const_logic_1;
        else 
            dense_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, dense_to_softmax_streams_0_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_to_softmax_streams_0_blk_n <= dense_to_softmax_streams_0_empty_n;
        else 
            dense_to_softmax_streams_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_to_softmax_streams_0_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_0_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, dense_to_softmax_streams_1_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_to_softmax_streams_1_blk_n <= dense_to_softmax_streams_1_empty_n;
        else 
            dense_to_softmax_streams_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_to_softmax_streams_1_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_1_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, dense_to_softmax_streams_2_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_to_softmax_streams_2_blk_n <= dense_to_softmax_streams_2_empty_n;
        else 
            dense_to_softmax_streams_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_to_softmax_streams_2_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_2_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, dense_to_softmax_streams_3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_to_softmax_streams_3_blk_n <= dense_to_softmax_streams_3_empty_n;
        else 
            dense_to_softmax_streams_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_to_softmax_streams_3_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_3_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_199_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_199_ce <= ap_const_logic_1;
        else 
            grp_fu_199_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_202_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_202_ce <= ap_const_logic_1;
        else 
            grp_fu_202_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln13_fu_220_p2 <= "1" when (ap_sig_allocacmp_d_1 = ap_const_lv4_A) else "0";
    icmp_ln22_1_fu_353_p2 <= "1" when (signed(tmp_4_fu_343_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln22_2_fu_373_p2 <= "0" when (and_ln22_4_fu_368_p2 = ap_const_lv24_0) else "1";
    icmp_ln22_3_fu_433_p2 <= "1" when (signed(add_ln22_fu_338_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln22_4_fu_613_p2 <= "1" when (trunc_ln22_3_reg_939 = ap_const_lv63_0) else "0";
    icmp_ln22_5_fu_628_p2 <= "1" when (signed(sub_ln22_4_fu_618_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln22_6_fu_654_p2 <= "1" when (sub_ln22_4_fu_618_p2 = ap_const_lv12_8) else "0";
    icmp_ln22_7_fu_664_p2 <= "1" when (unsigned(select_ln22_3_reg_976) < unsigned(ap_const_lv11_36)) else "0";
    icmp_ln22_8_fu_708_p2 <= "1" when (unsigned(select_ln22_3_reg_976) < unsigned(ap_const_lv11_18)) else "0";
    icmp_ln22_fu_278_p2 <= "1" when (sum_1_reg_852 = ap_const_lv24_0) else "0";
    lshr_ln22_2_fu_362_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln22_5_fu_359_p1(24-1 downto 0)))));
    lshr_ln22_fu_448_p2 <= std_logic_vector(shift_right(unsigned(zext_ln22_fu_430_p1),to_integer(unsigned('0' & zext_ln22_1_fu_444_p1(31-1 downto 0)))));
    or_ln22_1_fu_753_p2 <= (icmp_ln22_6_reg_984 or icmp_ln22_4_reg_964);
    or_ln22_fu_416_p2 <= (and_ln22_fu_379_p2 or and_ln22_1_fu_410_p2);
    or_ln_fu_422_p3 <= (ap_const_lv1_0 & or_ln22_fu_416_p2);
    p_out <= empty_fu_134;

    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln13_reg_813_pp0_iter20_reg)
    begin
        if (((icmp_ln13_reg_813_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    pi_assign_fu_529_p5 <= (zext_ln22_8_fu_501_p1(63 downto 32) & tmp_5_fu_522_p3 & zext_ln22_8_fu_501_p1(22 downto 0));
    prediction_address0 <= zext_ln13_reg_817_pp0_iter21_reg(4 - 1 downto 0);

    prediction_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            prediction_ce0 <= ap_const_logic_1;
        else 
            prediction_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_d0 <= select_ln22_10_reg_996;

    prediction_we0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            prediction_we0 <= ap_const_logic_1;
        else 
            prediction_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln22_10_fu_768_p3 <= 
        select_ln22_4_fu_700_p3 when (and_ln22_3_fu_763_p2(0) = '1') else 
        select_ln22_9_fu_746_p3;
    select_ln22_11_fu_692_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_10_fu_684_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln22_1_fu_469_p3 <= 
        lshr_ln22_reg_908 when (icmp_ln22_3_reg_903(0) = '1') else 
        shl_ln22_reg_913;
    select_ln22_2_fu_606_p3 <= 
        sub_ln22_3_fu_600_p2 when (tmp_9_reg_944(0) = '1') else 
        zext_ln22_9_fu_596_p1;
    select_ln22_3_fu_646_p3 <= 
        add_ln22_4_fu_634_p2 when (icmp_ln22_5_fu_628_p2(0) = '1') else 
        sub_ln22_5_fu_640_p2;
    select_ln22_3cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_3_reg_976),24));
    select_ln22_4_fu_700_p3 <= 
        trunc_ln22_7_fu_677_p1 when (icmp_ln22_7_fu_664_p2(0) = '1') else 
        select_ln22_11_fu_692_p3;
    select_ln22_5_fu_721_p3 <= 
        shl_ln22_1_fu_716_p2 when (icmp_ln22_8_fu_708_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln22_6_fu_504_p3 <= 
        ap_const_lv8_7F when (tmp_8_reg_923(0) = '1') else 
        ap_const_lv8_7E;
    select_ln22_7_fu_549_p3 <= 
        ap_const_lv32_0 when (icmp_ln22_reg_869_pp0_iter6_reg(0) = '1') else 
        bitcast_ln766_fu_545_p1;
    select_ln22_8_fu_729_p3 <= 
        ap_const_lv24_0 when (icmp_ln22_4_reg_964(0) = '1') else 
        select_ln22_5_fu_721_p3;
    select_ln22_9_fu_746_p3 <= 
        trunc_ln22_6_reg_990 when (and_ln22_2_fu_741_p2(0) = '1') else 
        select_ln22_8_fu_729_p3;
    select_ln22_fu_283_p3 <= 
        sub_ln22_reg_864 when (tmp_3_reg_858(0) = '1') else 
        sum_1_reg_852;
        sext_ln22_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_298_p3),32));

    shl_ln22_1_fu_716_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln22_6_reg_990),to_integer(unsigned('0' & select_ln22_3cast_fu_713_p1(24-1 downto 0)))));
    shl_ln22_fu_463_p2 <= std_logic_vector(shift_left(unsigned(zext_ln22_fu_430_p1),to_integer(unsigned('0' & zext_ln22_2_fu_459_p1(31-1 downto 0)))));
    sub_ln22_1_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) - unsigned(tmp_2_fu_310_p3));
    sub_ln22_2_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln22_1_reg_886));
    sub_ln22_3_fu_600_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln22_9_fu_596_p1));
    sub_ln22_4_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln22_4_fu_586_p1));
    sub_ln22_5_fu_640_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) - unsigned(trunc_ln22_5_fu_624_p1));
    sub_ln22_6_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) - unsigned(trunc_ln22_reg_881_pp0_iter6_reg));
    sub_ln22_7_fu_332_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(trunc_ln22_1_fu_328_p1));
    sub_ln22_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(sum_1_fu_259_p2));
    sum_1_fu_259_p2 <= std_logic_vector(unsigned(add_ln19_2_reg_847) + unsigned(add_ln19_fu_255_p2));
        sum_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_biases_q0),24));

    tmp_10_fu_684_p3 <= bitcast_ln724_1_fu_681_p1(31 downto 31);
    tmp_1_fu_298_p3 <= (ap_const_lv1_1 & tmp_fu_288_p4);
    
    tmp_2_fu_310_p3_proc : process(sext_ln22_fu_306_p1)
    begin
        tmp_2_fu_310_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln22_fu_306_p1(i) = '1' then
                tmp_2_fu_310_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_4_fu_343_p4 <= add_ln22_fu_338_p2(31 downto 1);
    tmp_5_fu_522_p3 <= (tmp_3_reg_858_pp0_iter6_reg & add_ln22_3_fu_516_p2);
    tmp_7_fu_385_p3 <= add_ln22_fu_338_p2(31 downto 31);
    
    tmp_fu_288_p4_proc : process(select_ln22_fu_283_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_fu_288_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := select_ln22_fu_283_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_fu_288_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_fu_288_p4_i) := select_ln22_fu_283_p3(24-1-tmp_fu_288_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_288_p4 <= resvalue(24-1 downto 0);
    end process;

    trunc_ln22_1_fu_328_p1 <= sub_ln22_1_fu_322_p2(5 - 1 downto 0);
    trunc_ln22_2_fu_399_p1 <= add_ln22_fu_338_p2(24 - 1 downto 0);
    trunc_ln22_3_fu_560_p1 <= bitcast_ln724_fu_556_p1(63 - 1 downto 0);
    trunc_ln22_4_fu_582_p1 <= bitcast_ln724_fu_556_p1(52 - 1 downto 0);
    trunc_ln22_5_fu_624_p1 <= sub_ln22_4_fu_618_p2(11 - 1 downto 0);
    trunc_ln22_6_fu_660_p1 <= select_ln22_2_fu_606_p3(24 - 1 downto 0);
    trunc_ln22_7_fu_677_p1 <= ashr_ln22_fu_672_p2(24 - 1 downto 0);
    trunc_ln22_fu_318_p1 <= tmp_2_fu_310_p3(8 - 1 downto 0);
    xor_ln22_1_fu_757_p2 <= (or_ln22_1_fu_753_p2 xor ap_const_lv1_1);
    xor_ln22_2_fu_393_p2 <= (tmp_7_fu_385_p3 xor ap_const_lv1_1);
    xor_ln22_fu_736_p2 <= (icmp_ln22_4_reg_964 xor ap_const_lv1_1);
    zext_ln13_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_1_reg_808),64));
    zext_ln22_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln22_1_fu_439_p2),64));
    zext_ln22_2_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln22_2_fu_454_p2),64));
    zext_ln22_3_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_898),64));
    zext_ln22_4_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_949),12));
    zext_ln22_5_cast_fu_589_p3 <= (ap_const_lv1_1 & trunc_ln22_4_reg_954);
    zext_ln22_5_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln22_7_reg_893),24));
    zext_ln22_7_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_3_reg_976),54));
    zext_ln22_8_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln22_1_reg_918),64));
    zext_ln22_9_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln22_5_cast_fu_589_p3),54));
    zext_ln22_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_reg_874),64));
end behav;
