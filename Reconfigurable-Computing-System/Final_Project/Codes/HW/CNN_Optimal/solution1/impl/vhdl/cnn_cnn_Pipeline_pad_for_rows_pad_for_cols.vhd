-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_cnn_Pipeline_pad_for_rows_pad_for_cols is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img0_ce0 : OUT STD_LOGIC;
    pad_img0_we0 : OUT STD_LOGIC;
    pad_img0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_cnn_Pipeline_pad_for_rows_pad_for_cols is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln10_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln10_fu_145_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_301_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_fu_153_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_reg_307_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal img_in_load_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv7_i_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_fu_229_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_4_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln16_6_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_54 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln12_fu_161_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_58 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_r_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_62 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln10_1_fu_121_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_92_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln12_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_133_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_189_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_182_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln16_fu_196_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln16_fu_200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln16_3_fu_206_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_2_fu_209_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_358_fu_234_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_359_fu_245_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_1_fu_241_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln16_2_fu_252_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_1_fu_256_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln16_5_fu_262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_3_fu_265_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fdiv_32ns_32ns_32_16_no_dsp_1_U2 : component cnn_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_92_p0,
        din1 => ap_const_lv32_437F0000,
        ce => ap_const_logic_1,
        dout => grp_fu_92_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln10_fu_115_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_54 <= add_ln12_fu_161_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_54 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln10_fu_115_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_62 <= add_ln10_1_fu_121_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_62 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln10_fu_115_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    r_fu_58 <= select_ln10_1_fu_153_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_58 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln16_reg_340 <= add_ln16_fu_229_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv7_i_reg_335 <= grp_fu_92_p2;
                empty_reg_329 <= empty_fu_224_p2;
                img_in_load_reg_319 <= img_in_q0;
                select_ln10_1_reg_307_pp0_iter10_reg <= select_ln10_1_reg_307_pp0_iter9_reg;
                select_ln10_1_reg_307_pp0_iter11_reg <= select_ln10_1_reg_307_pp0_iter10_reg;
                select_ln10_1_reg_307_pp0_iter12_reg <= select_ln10_1_reg_307_pp0_iter11_reg;
                select_ln10_1_reg_307_pp0_iter13_reg <= select_ln10_1_reg_307_pp0_iter12_reg;
                select_ln10_1_reg_307_pp0_iter14_reg <= select_ln10_1_reg_307_pp0_iter13_reg;
                select_ln10_1_reg_307_pp0_iter15_reg <= select_ln10_1_reg_307_pp0_iter14_reg;
                select_ln10_1_reg_307_pp0_iter16_reg <= select_ln10_1_reg_307_pp0_iter15_reg;
                select_ln10_1_reg_307_pp0_iter17_reg <= select_ln10_1_reg_307_pp0_iter16_reg;
                select_ln10_1_reg_307_pp0_iter2_reg <= select_ln10_1_reg_307_pp0_iter1_reg;
                select_ln10_1_reg_307_pp0_iter3_reg <= select_ln10_1_reg_307_pp0_iter2_reg;
                select_ln10_1_reg_307_pp0_iter4_reg <= select_ln10_1_reg_307_pp0_iter3_reg;
                select_ln10_1_reg_307_pp0_iter5_reg <= select_ln10_1_reg_307_pp0_iter4_reg;
                select_ln10_1_reg_307_pp0_iter6_reg <= select_ln10_1_reg_307_pp0_iter5_reg;
                select_ln10_1_reg_307_pp0_iter7_reg <= select_ln10_1_reg_307_pp0_iter6_reg;
                select_ln10_1_reg_307_pp0_iter8_reg <= select_ln10_1_reg_307_pp0_iter7_reg;
                select_ln10_1_reg_307_pp0_iter9_reg <= select_ln10_1_reg_307_pp0_iter8_reg;
                select_ln10_reg_301_pp0_iter10_reg <= select_ln10_reg_301_pp0_iter9_reg;
                select_ln10_reg_301_pp0_iter11_reg <= select_ln10_reg_301_pp0_iter10_reg;
                select_ln10_reg_301_pp0_iter12_reg <= select_ln10_reg_301_pp0_iter11_reg;
                select_ln10_reg_301_pp0_iter13_reg <= select_ln10_reg_301_pp0_iter12_reg;
                select_ln10_reg_301_pp0_iter14_reg <= select_ln10_reg_301_pp0_iter13_reg;
                select_ln10_reg_301_pp0_iter15_reg <= select_ln10_reg_301_pp0_iter14_reg;
                select_ln10_reg_301_pp0_iter16_reg <= select_ln10_reg_301_pp0_iter15_reg;
                select_ln10_reg_301_pp0_iter17_reg <= select_ln10_reg_301_pp0_iter16_reg;
                select_ln10_reg_301_pp0_iter2_reg <= select_ln10_reg_301_pp0_iter1_reg;
                select_ln10_reg_301_pp0_iter3_reg <= select_ln10_reg_301_pp0_iter2_reg;
                select_ln10_reg_301_pp0_iter4_reg <= select_ln10_reg_301_pp0_iter3_reg;
                select_ln10_reg_301_pp0_iter5_reg <= select_ln10_reg_301_pp0_iter4_reg;
                select_ln10_reg_301_pp0_iter6_reg <= select_ln10_reg_301_pp0_iter5_reg;
                select_ln10_reg_301_pp0_iter7_reg <= select_ln10_reg_301_pp0_iter6_reg;
                select_ln10_reg_301_pp0_iter8_reg <= select_ln10_reg_301_pp0_iter7_reg;
                select_ln10_reg_301_pp0_iter9_reg <= select_ln10_reg_301_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln10_1_reg_307 <= select_ln10_1_fu_153_p3;
                select_ln10_1_reg_307_pp0_iter1_reg <= select_ln10_1_reg_307;
                select_ln10_reg_301 <= select_ln10_fu_145_p3;
                select_ln10_reg_301_pp0_iter1_reg <= select_ln10_reg_301;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_1_fu_121_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln10_fu_133_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_load) + unsigned(ap_const_lv5_1));
    add_ln12_fu_161_p2 <= std_logic_vector(unsigned(select_ln10_fu_145_p3) + unsigned(ap_const_lv5_1));
    add_ln16_1_fu_256_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_241_p1) + unsigned(zext_ln16_2_fu_252_p1));
    add_ln16_2_fu_209_p2 <= std_logic_vector(unsigned(sub_ln16_fu_200_p2) + unsigned(zext_ln16_3_fu_206_p1));
    add_ln16_3_fu_265_p2 <= std_logic_vector(unsigned(add_ln16_1_fu_256_p2) + unsigned(zext_ln16_5_fu_262_p1));
    add_ln16_fu_229_p2 <= std_logic_vector(unsigned(select_ln10_reg_301_pp0_iter17_reg) + unsigned(ap_const_lv5_3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln10_fu_115_p2)
    begin
        if (((icmp_ln10_fu_115_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c_fu_54, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_54;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_r_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_r_load <= r_fu_58;
        end if; 
    end process;

    empty_fu_224_p2 <= std_logic_vector(unsigned(select_ln10_1_reg_307_pp0_iter17_reg) + unsigned(ap_const_lv5_3));
    grp_fu_92_p0 <= img_in_load_reg_319;
    icmp_ln10_fu_115_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_310) else "0";
    icmp_ln12_fu_139_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv5_1C) else "0";
    img_in_address0 <= zext_ln16_4_fu_215_p1(10 - 1 downto 0);

    img_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_in_ce0 <= ap_const_logic_1;
        else 
            img_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_address0 <= zext_ln16_6_fu_271_p1(11 - 1 downto 0);

    pad_img0_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            pad_img0_ce0 <= ap_const_logic_1;
        else 
            pad_img0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img0_d0 <= conv7_i_reg_335;

    pad_img0_we0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            pad_img0_we0 <= ap_const_logic_1;
        else 
            pad_img0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln10_1_fu_153_p3 <= 
        add_ln10_fu_133_p2 when (icmp_ln12_fu_139_p2(0) = '1') else 
        ap_sig_allocacmp_r_load;
    select_ln10_fu_145_p3 <= 
        ap_const_lv5_0 when (icmp_ln12_fu_139_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    sub_ln16_fu_200_p2 <= std_logic_vector(unsigned(tmp_fu_182_p3) - unsigned(zext_ln16_fu_196_p1));
    tmp_358_fu_234_p3 <= (empty_reg_329 & ap_const_lv5_0);
    tmp_359_fu_245_p3 <= (empty_reg_329 & ap_const_lv1_0);
    tmp_fu_182_p3 <= (select_ln10_1_reg_307 & ap_const_lv5_0);
    tmp_s_fu_189_p3 <= (select_ln10_1_reg_307 & ap_const_lv2_0);
    zext_ln16_1_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_358_fu_234_p3),11));
    zext_ln16_2_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_359_fu_245_p3),11));
    zext_ln16_3_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_301),10));
    zext_ln16_4_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_2_fu_209_p2),64));
    zext_ln16_5_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_340),11));
    zext_ln16_6_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_3_fu_265_p2),64));
    zext_ln16_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_189_p3),10));
end behav;
