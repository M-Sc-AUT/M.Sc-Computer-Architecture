-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_convolution_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pad_img_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img_ce0 : OUT STD_LOGIC;
    pad_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pad_img_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pad_img_ce1 : OUT STD_LOGIC;
    pad_img_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter : IN STD_LOGIC_VECTOR (1 downto 0);
    conv_to_pool_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_to_pool_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    conv_to_pool_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    conv_to_pool_streams_1_full_n : IN STD_LOGIC;
    conv_to_pool_streams_1_write : OUT STD_LOGIC );
end;


architecture behav of cnn_convolution_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_biases_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_biases_ce0 : STD_LOGIC;
    signal conv_biases_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_0_ce0 : STD_LOGIC;
    signal conv_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_1_ce0 : STD_LOGIC;
    signal conv_weights_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_2_ce0 : STD_LOGIC;
    signal conv_weights_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_3_ce0 : STD_LOGIC;
    signal conv_weights_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_4_ce0 : STD_LOGIC;
    signal conv_weights_0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_5_ce0 : STD_LOGIC;
    signal conv_weights_0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_0_6_ce0 : STD_LOGIC;
    signal conv_weights_0_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_0_ce0 : STD_LOGIC;
    signal conv_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_1_ce0 : STD_LOGIC;
    signal conv_weights_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_2_ce0 : STD_LOGIC;
    signal conv_weights_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_3_ce0 : STD_LOGIC;
    signal conv_weights_1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_4_ce0 : STD_LOGIC;
    signal conv_weights_1_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_5_ce0 : STD_LOGIC;
    signal conv_weights_1_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_6_ce0 : STD_LOGIC;
    signal conv_weights_1_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_0_ce0 : STD_LOGIC;
    signal conv_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_1_ce0 : STD_LOGIC;
    signal conv_weights_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_2_ce0 : STD_LOGIC;
    signal conv_weights_2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_3_ce0 : STD_LOGIC;
    signal conv_weights_2_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_4_ce0 : STD_LOGIC;
    signal conv_weights_2_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_5_ce0 : STD_LOGIC;
    signal conv_weights_2_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_2_6_ce0 : STD_LOGIC;
    signal conv_weights_2_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_0_ce0 : STD_LOGIC;
    signal conv_weights_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_1_ce0 : STD_LOGIC;
    signal conv_weights_3_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_2_ce0 : STD_LOGIC;
    signal conv_weights_3_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_3_ce0 : STD_LOGIC;
    signal conv_weights_3_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_4_ce0 : STD_LOGIC;
    signal conv_weights_3_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_5_ce0 : STD_LOGIC;
    signal conv_weights_3_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_3_6_ce0 : STD_LOGIC;
    signal conv_weights_3_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_0_ce0 : STD_LOGIC;
    signal conv_weights_4_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_1_ce0 : STD_LOGIC;
    signal conv_weights_4_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_2_ce0 : STD_LOGIC;
    signal conv_weights_4_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_3_ce0 : STD_LOGIC;
    signal conv_weights_4_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_4_ce0 : STD_LOGIC;
    signal conv_weights_4_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_5_ce0 : STD_LOGIC;
    signal conv_weights_4_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_4_6_ce0 : STD_LOGIC;
    signal conv_weights_4_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_0_ce0 : STD_LOGIC;
    signal conv_weights_5_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_1_ce0 : STD_LOGIC;
    signal conv_weights_5_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_2_ce0 : STD_LOGIC;
    signal conv_weights_5_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_3_ce0 : STD_LOGIC;
    signal conv_weights_5_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_4_ce0 : STD_LOGIC;
    signal conv_weights_5_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_5_ce0 : STD_LOGIC;
    signal conv_weights_5_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_5_6_ce0 : STD_LOGIC;
    signal conv_weights_5_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_0_ce0 : STD_LOGIC;
    signal conv_weights_6_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_1_ce0 : STD_LOGIC;
    signal conv_weights_6_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_2_ce0 : STD_LOGIC;
    signal conv_weights_6_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_3_ce0 : STD_LOGIC;
    signal conv_weights_6_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_4_ce0 : STD_LOGIC;
    signal conv_weights_6_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_5_ce0 : STD_LOGIC;
    signal conv_weights_6_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_6_6_ce0 : STD_LOGIC;
    signal conv_weights_6_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_biases_load_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal conv_weights_0_0_load_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_1_load_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_2_load_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_3_load_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_4_load_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_5_load_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_6_load_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_0_load_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_1_load_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_2_load_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_3_load_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_4_load_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_5_load_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_6_load_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_0_load_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_1_load_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_2_load_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_3_load_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_4_load_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_5_load_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_6_load_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_0_load_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_1_load_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_2_load_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_3_load_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_4_load_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_5_load_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_6_load_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_0_load_reg_1337 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_1_load_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_2_load_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_3_load_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_4_load_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_5_load_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_6_load_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_0_load_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_1_load_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_2_load_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_3_load_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_4_load_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_5_load_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_6_load_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_0_load_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_1_load_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_2_load_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_3_load_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_4_load_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_5_load_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_6_6_load_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_idle : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_ready : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce0 : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce1 : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write : STD_LOGIC;
    signal grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal idxprom_fu_888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pad_img_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img_ce0 : OUT STD_LOGIC;
        pad_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pad_img_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pad_img_ce1 : OUT STD_LOGIC;
        pad_img_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w : IN STD_LOGIC_VECTOR (31 downto 0);
        w_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_9 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_10 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_11 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_12 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_13 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_14 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_15 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_16 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_17 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_18 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_19 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_20 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_21 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_22 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_23 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_24 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_25 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_26 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_27 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_28 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_29 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_30 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_31 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_32 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_33 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_34 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_35 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_36 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_37 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_38 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_39 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_40 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_41 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_42 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_43 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_44 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_45 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_46 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_47 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_48 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_biases_load : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_to_pool_streams_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        conv_to_pool_streams_1_full_n : IN STD_LOGIC;
        conv_to_pool_streams_1_write : OUT STD_LOGIC );
    end component;


    component cnn_convolution_1_conv_biases_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_0_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_1_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_2_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_3_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_4_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_5_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_convolution_1_conv_weights_6_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_biases_U : component cnn_convolution_1_conv_biases_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_biases_address0,
        ce0 => conv_biases_ce0,
        q0 => conv_biases_q0);

    conv_weights_0_0_U : component cnn_convolution_1_conv_weights_0_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_0_address0,
        ce0 => conv_weights_0_0_ce0,
        q0 => conv_weights_0_0_q0);

    conv_weights_0_1_U : component cnn_convolution_1_conv_weights_0_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_1_address0,
        ce0 => conv_weights_0_1_ce0,
        q0 => conv_weights_0_1_q0);

    conv_weights_0_2_U : component cnn_convolution_1_conv_weights_0_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_2_address0,
        ce0 => conv_weights_0_2_ce0,
        q0 => conv_weights_0_2_q0);

    conv_weights_0_3_U : component cnn_convolution_1_conv_weights_0_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_3_address0,
        ce0 => conv_weights_0_3_ce0,
        q0 => conv_weights_0_3_q0);

    conv_weights_0_4_U : component cnn_convolution_1_conv_weights_0_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_4_address0,
        ce0 => conv_weights_0_4_ce0,
        q0 => conv_weights_0_4_q0);

    conv_weights_0_5_U : component cnn_convolution_1_conv_weights_0_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_5_address0,
        ce0 => conv_weights_0_5_ce0,
        q0 => conv_weights_0_5_q0);

    conv_weights_0_6_U : component cnn_convolution_1_conv_weights_0_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_6_address0,
        ce0 => conv_weights_0_6_ce0,
        q0 => conv_weights_0_6_q0);

    conv_weights_1_0_U : component cnn_convolution_1_conv_weights_1_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_0_address0,
        ce0 => conv_weights_1_0_ce0,
        q0 => conv_weights_1_0_q0);

    conv_weights_1_1_U : component cnn_convolution_1_conv_weights_1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_1_address0,
        ce0 => conv_weights_1_1_ce0,
        q0 => conv_weights_1_1_q0);

    conv_weights_1_2_U : component cnn_convolution_1_conv_weights_1_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_2_address0,
        ce0 => conv_weights_1_2_ce0,
        q0 => conv_weights_1_2_q0);

    conv_weights_1_3_U : component cnn_convolution_1_conv_weights_1_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_3_address0,
        ce0 => conv_weights_1_3_ce0,
        q0 => conv_weights_1_3_q0);

    conv_weights_1_4_U : component cnn_convolution_1_conv_weights_1_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_4_address0,
        ce0 => conv_weights_1_4_ce0,
        q0 => conv_weights_1_4_q0);

    conv_weights_1_5_U : component cnn_convolution_1_conv_weights_1_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_5_address0,
        ce0 => conv_weights_1_5_ce0,
        q0 => conv_weights_1_5_q0);

    conv_weights_1_6_U : component cnn_convolution_1_conv_weights_1_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_6_address0,
        ce0 => conv_weights_1_6_ce0,
        q0 => conv_weights_1_6_q0);

    conv_weights_2_0_U : component cnn_convolution_1_conv_weights_2_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_0_address0,
        ce0 => conv_weights_2_0_ce0,
        q0 => conv_weights_2_0_q0);

    conv_weights_2_1_U : component cnn_convolution_1_conv_weights_2_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_1_address0,
        ce0 => conv_weights_2_1_ce0,
        q0 => conv_weights_2_1_q0);

    conv_weights_2_2_U : component cnn_convolution_1_conv_weights_2_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_2_address0,
        ce0 => conv_weights_2_2_ce0,
        q0 => conv_weights_2_2_q0);

    conv_weights_2_3_U : component cnn_convolution_1_conv_weights_2_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_3_address0,
        ce0 => conv_weights_2_3_ce0,
        q0 => conv_weights_2_3_q0);

    conv_weights_2_4_U : component cnn_convolution_1_conv_weights_2_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_4_address0,
        ce0 => conv_weights_2_4_ce0,
        q0 => conv_weights_2_4_q0);

    conv_weights_2_5_U : component cnn_convolution_1_conv_weights_2_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_5_address0,
        ce0 => conv_weights_2_5_ce0,
        q0 => conv_weights_2_5_q0);

    conv_weights_2_6_U : component cnn_convolution_1_conv_weights_2_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_6_address0,
        ce0 => conv_weights_2_6_ce0,
        q0 => conv_weights_2_6_q0);

    conv_weights_3_0_U : component cnn_convolution_1_conv_weights_3_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_0_address0,
        ce0 => conv_weights_3_0_ce0,
        q0 => conv_weights_3_0_q0);

    conv_weights_3_1_U : component cnn_convolution_1_conv_weights_3_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_1_address0,
        ce0 => conv_weights_3_1_ce0,
        q0 => conv_weights_3_1_q0);

    conv_weights_3_2_U : component cnn_convolution_1_conv_weights_3_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_2_address0,
        ce0 => conv_weights_3_2_ce0,
        q0 => conv_weights_3_2_q0);

    conv_weights_3_3_U : component cnn_convolution_1_conv_weights_3_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_3_address0,
        ce0 => conv_weights_3_3_ce0,
        q0 => conv_weights_3_3_q0);

    conv_weights_3_4_U : component cnn_convolution_1_conv_weights_3_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_4_address0,
        ce0 => conv_weights_3_4_ce0,
        q0 => conv_weights_3_4_q0);

    conv_weights_3_5_U : component cnn_convolution_1_conv_weights_3_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_5_address0,
        ce0 => conv_weights_3_5_ce0,
        q0 => conv_weights_3_5_q0);

    conv_weights_3_6_U : component cnn_convolution_1_conv_weights_3_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_6_address0,
        ce0 => conv_weights_3_6_ce0,
        q0 => conv_weights_3_6_q0);

    conv_weights_4_0_U : component cnn_convolution_1_conv_weights_4_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_0_address0,
        ce0 => conv_weights_4_0_ce0,
        q0 => conv_weights_4_0_q0);

    conv_weights_4_1_U : component cnn_convolution_1_conv_weights_4_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_1_address0,
        ce0 => conv_weights_4_1_ce0,
        q0 => conv_weights_4_1_q0);

    conv_weights_4_2_U : component cnn_convolution_1_conv_weights_4_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_2_address0,
        ce0 => conv_weights_4_2_ce0,
        q0 => conv_weights_4_2_q0);

    conv_weights_4_3_U : component cnn_convolution_1_conv_weights_4_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_3_address0,
        ce0 => conv_weights_4_3_ce0,
        q0 => conv_weights_4_3_q0);

    conv_weights_4_4_U : component cnn_convolution_1_conv_weights_4_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_4_address0,
        ce0 => conv_weights_4_4_ce0,
        q0 => conv_weights_4_4_q0);

    conv_weights_4_5_U : component cnn_convolution_1_conv_weights_4_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_5_address0,
        ce0 => conv_weights_4_5_ce0,
        q0 => conv_weights_4_5_q0);

    conv_weights_4_6_U : component cnn_convolution_1_conv_weights_4_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_6_address0,
        ce0 => conv_weights_4_6_ce0,
        q0 => conv_weights_4_6_q0);

    conv_weights_5_0_U : component cnn_convolution_1_conv_weights_5_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_0_address0,
        ce0 => conv_weights_5_0_ce0,
        q0 => conv_weights_5_0_q0);

    conv_weights_5_1_U : component cnn_convolution_1_conv_weights_5_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_1_address0,
        ce0 => conv_weights_5_1_ce0,
        q0 => conv_weights_5_1_q0);

    conv_weights_5_2_U : component cnn_convolution_1_conv_weights_5_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_2_address0,
        ce0 => conv_weights_5_2_ce0,
        q0 => conv_weights_5_2_q0);

    conv_weights_5_3_U : component cnn_convolution_1_conv_weights_5_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_3_address0,
        ce0 => conv_weights_5_3_ce0,
        q0 => conv_weights_5_3_q0);

    conv_weights_5_4_U : component cnn_convolution_1_conv_weights_5_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_4_address0,
        ce0 => conv_weights_5_4_ce0,
        q0 => conv_weights_5_4_q0);

    conv_weights_5_5_U : component cnn_convolution_1_conv_weights_5_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_5_address0,
        ce0 => conv_weights_5_5_ce0,
        q0 => conv_weights_5_5_q0);

    conv_weights_5_6_U : component cnn_convolution_1_conv_weights_5_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_6_address0,
        ce0 => conv_weights_5_6_ce0,
        q0 => conv_weights_5_6_q0);

    conv_weights_6_0_U : component cnn_convolution_1_conv_weights_6_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_0_address0,
        ce0 => conv_weights_6_0_ce0,
        q0 => conv_weights_6_0_q0);

    conv_weights_6_1_U : component cnn_convolution_1_conv_weights_6_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_1_address0,
        ce0 => conv_weights_6_1_ce0,
        q0 => conv_weights_6_1_q0);

    conv_weights_6_2_U : component cnn_convolution_1_conv_weights_6_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_2_address0,
        ce0 => conv_weights_6_2_ce0,
        q0 => conv_weights_6_2_q0);

    conv_weights_6_3_U : component cnn_convolution_1_conv_weights_6_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_3_address0,
        ce0 => conv_weights_6_3_ce0,
        q0 => conv_weights_6_3_q0);

    conv_weights_6_4_U : component cnn_convolution_1_conv_weights_6_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_4_address0,
        ce0 => conv_weights_6_4_ce0,
        q0 => conv_weights_6_4_q0);

    conv_weights_6_5_U : component cnn_convolution_1_conv_weights_6_5_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_5_address0,
        ce0 => conv_weights_6_5_ce0,
        q0 => conv_weights_6_5_q0);

    conv_weights_6_6_U : component cnn_convolution_1_conv_weights_6_6_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_6_6_address0,
        ce0 => conv_weights_6_6_ce0,
        q0 => conv_weights_6_6_q0);

    grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780 : component cnn_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start,
        ap_done => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done,
        ap_idle => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_idle,
        ap_ready => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_ready,
        pad_img_address0 => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address0,
        pad_img_ce0 => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce0,
        pad_img_q0 => pad_img_q0,
        pad_img_address1 => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address1,
        pad_img_ce1 => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce1,
        pad_img_q1 => pad_img_q1,
        w => conv_weights_0_0_load_reg_1197,
        w_1 => conv_weights_0_1_load_reg_1202,
        w_2 => conv_weights_0_2_load_reg_1207,
        w_3 => conv_weights_0_3_load_reg_1212,
        w_4 => conv_weights_0_4_load_reg_1217,
        w_5 => conv_weights_0_5_load_reg_1222,
        w_6 => conv_weights_0_6_load_reg_1227,
        w_7 => conv_weights_1_0_load_reg_1232,
        w_8 => conv_weights_1_1_load_reg_1237,
        w_9 => conv_weights_1_2_load_reg_1242,
        w_10 => conv_weights_1_3_load_reg_1247,
        w_11 => conv_weights_1_4_load_reg_1252,
        w_12 => conv_weights_1_5_load_reg_1257,
        w_13 => conv_weights_1_6_load_reg_1262,
        w_14 => conv_weights_2_0_load_reg_1267,
        w_15 => conv_weights_2_1_load_reg_1272,
        w_16 => conv_weights_2_2_load_reg_1277,
        w_17 => conv_weights_2_3_load_reg_1282,
        w_18 => conv_weights_2_4_load_reg_1287,
        w_19 => conv_weights_2_5_load_reg_1292,
        w_20 => conv_weights_2_6_load_reg_1297,
        w_21 => conv_weights_3_0_load_reg_1302,
        w_22 => conv_weights_3_1_load_reg_1307,
        w_23 => conv_weights_3_2_load_reg_1312,
        w_24 => conv_weights_3_3_load_reg_1317,
        w_25 => conv_weights_3_4_load_reg_1322,
        w_26 => conv_weights_3_5_load_reg_1327,
        w_27 => conv_weights_3_6_load_reg_1332,
        w_28 => conv_weights_4_0_load_reg_1337,
        w_29 => conv_weights_4_1_load_reg_1342,
        w_30 => conv_weights_4_2_load_reg_1347,
        w_31 => conv_weights_4_3_load_reg_1352,
        w_32 => conv_weights_4_4_load_reg_1357,
        w_33 => conv_weights_4_5_load_reg_1362,
        w_34 => conv_weights_4_6_load_reg_1367,
        w_35 => conv_weights_5_0_load_reg_1372,
        w_36 => conv_weights_5_1_load_reg_1377,
        w_37 => conv_weights_5_2_load_reg_1382,
        w_38 => conv_weights_5_3_load_reg_1387,
        w_39 => conv_weights_5_4_load_reg_1392,
        w_40 => conv_weights_5_5_load_reg_1397,
        w_41 => conv_weights_5_6_load_reg_1402,
        w_42 => conv_weights_6_0_load_reg_1407,
        w_43 => conv_weights_6_1_load_reg_1412,
        w_44 => conv_weights_6_2_load_reg_1417,
        w_45 => conv_weights_6_3_load_reg_1422,
        w_46 => conv_weights_6_4_load_reg_1427,
        w_47 => conv_weights_6_5_load_reg_1432,
        w_48 => conv_weights_6_6_load_reg_1437,
        conv_biases_load => conv_biases_load_reg_1192,
        conv_to_pool_streams_1_din => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_din,
        conv_to_pool_streams_1_num_data_valid => ap_const_lv11_0,
        conv_to_pool_streams_1_fifo_cap => ap_const_lv11_0,
        conv_to_pool_streams_1_full_n => conv_to_pool_streams_1_full_n,
        conv_to_pool_streams_1_write => grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                conv_biases_load_reg_1192 <= conv_biases_q0;
                conv_weights_0_0_load_reg_1197 <= conv_weights_0_0_q0;
                conv_weights_0_1_load_reg_1202 <= conv_weights_0_1_q0;
                conv_weights_0_2_load_reg_1207 <= conv_weights_0_2_q0;
                conv_weights_0_3_load_reg_1212 <= conv_weights_0_3_q0;
                conv_weights_0_4_load_reg_1217 <= conv_weights_0_4_q0;
                conv_weights_0_5_load_reg_1222 <= conv_weights_0_5_q0;
                conv_weights_0_6_load_reg_1227 <= conv_weights_0_6_q0;
                conv_weights_1_0_load_reg_1232 <= conv_weights_1_0_q0;
                conv_weights_1_1_load_reg_1237 <= conv_weights_1_1_q0;
                conv_weights_1_2_load_reg_1242 <= conv_weights_1_2_q0;
                conv_weights_1_3_load_reg_1247 <= conv_weights_1_3_q0;
                conv_weights_1_4_load_reg_1252 <= conv_weights_1_4_q0;
                conv_weights_1_5_load_reg_1257 <= conv_weights_1_5_q0;
                conv_weights_1_6_load_reg_1262 <= conv_weights_1_6_q0;
                conv_weights_2_0_load_reg_1267 <= conv_weights_2_0_q0;
                conv_weights_2_1_load_reg_1272 <= conv_weights_2_1_q0;
                conv_weights_2_2_load_reg_1277 <= conv_weights_2_2_q0;
                conv_weights_2_3_load_reg_1282 <= conv_weights_2_3_q0;
                conv_weights_2_4_load_reg_1287 <= conv_weights_2_4_q0;
                conv_weights_2_5_load_reg_1292 <= conv_weights_2_5_q0;
                conv_weights_2_6_load_reg_1297 <= conv_weights_2_6_q0;
                conv_weights_3_0_load_reg_1302 <= conv_weights_3_0_q0;
                conv_weights_3_1_load_reg_1307 <= conv_weights_3_1_q0;
                conv_weights_3_2_load_reg_1312 <= conv_weights_3_2_q0;
                conv_weights_3_3_load_reg_1317 <= conv_weights_3_3_q0;
                conv_weights_3_4_load_reg_1322 <= conv_weights_3_4_q0;
                conv_weights_3_5_load_reg_1327 <= conv_weights_3_5_q0;
                conv_weights_3_6_load_reg_1332 <= conv_weights_3_6_q0;
                conv_weights_4_0_load_reg_1337 <= conv_weights_4_0_q0;
                conv_weights_4_1_load_reg_1342 <= conv_weights_4_1_q0;
                conv_weights_4_2_load_reg_1347 <= conv_weights_4_2_q0;
                conv_weights_4_3_load_reg_1352 <= conv_weights_4_3_q0;
                conv_weights_4_4_load_reg_1357 <= conv_weights_4_4_q0;
                conv_weights_4_5_load_reg_1362 <= conv_weights_4_5_q0;
                conv_weights_4_6_load_reg_1367 <= conv_weights_4_6_q0;
                conv_weights_5_0_load_reg_1372 <= conv_weights_5_0_q0;
                conv_weights_5_1_load_reg_1377 <= conv_weights_5_1_q0;
                conv_weights_5_2_load_reg_1382 <= conv_weights_5_2_q0;
                conv_weights_5_3_load_reg_1387 <= conv_weights_5_3_q0;
                conv_weights_5_4_load_reg_1392 <= conv_weights_5_4_q0;
                conv_weights_5_5_load_reg_1397 <= conv_weights_5_5_q0;
                conv_weights_5_6_load_reg_1402 <= conv_weights_5_6_q0;
                conv_weights_6_0_load_reg_1407 <= conv_weights_6_0_q0;
                conv_weights_6_1_load_reg_1412 <= conv_weights_6_1_q0;
                conv_weights_6_2_load_reg_1417 <= conv_weights_6_2_q0;
                conv_weights_6_3_load_reg_1422 <= conv_weights_6_3_q0;
                conv_weights_6_4_load_reg_1427 <= conv_weights_6_4_q0;
                conv_weights_6_5_load_reg_1432 <= conv_weights_6_5_q0;
                conv_weights_6_6_load_reg_1437 <= conv_weights_6_6_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done)
    begin
        if ((grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done, ap_CS_fsm_state3)
    begin
        if ((((grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv_biases_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_biases_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_biases_ce0 <= ap_const_logic_1;
        else 
            conv_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_to_pool_streams_1_din <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_din;

    conv_to_pool_streams_1_write_assign_proc : process(grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_to_pool_streams_1_write <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_conv_to_pool_streams_1_write;
        else 
            conv_to_pool_streams_1_write <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_0_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_0_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_1_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_1_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_2_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_2_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_3_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_3_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_4_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_4_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_5_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_5_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_0_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_1_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_2_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_3_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_4_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_5_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_6_address0 <= idxprom_fu_888_p1(2 - 1 downto 0);

    conv_weights_6_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_weights_6_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_ap_start_reg;
    idxprom_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter),64));
    pad_img_address0 <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address0;
    pad_img_address1 <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_address1;
    pad_img_ce0 <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce0;
    pad_img_ce1 <= grp_convolution_1_Pipeline_conv_for_rows_conv_for_cols_pool_for_rows_pool_for_cols_fu_780_pad_img_ce1;
end behav;
