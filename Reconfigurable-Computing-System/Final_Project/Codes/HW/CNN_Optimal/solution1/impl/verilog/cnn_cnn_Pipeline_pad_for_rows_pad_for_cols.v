// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_cnn_Pipeline_pad_for_rows_pad_for_cols (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_address0,
        img_in_ce0,
        img_in_q0,
        pad_img0_address0,
        pad_img0_ce0,
        pad_img0_we0,
        pad_img0_d0,
        grp_fu_409_p_din0,
        grp_fu_409_p_din1,
        grp_fu_409_p_dout0,
        grp_fu_409_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] img_in_address0;
output   img_in_ce0;
input  [31:0] img_in_q0;
output  [10:0] pad_img0_address0;
output   pad_img0_ce0;
output   pad_img0_we0;
output  [31:0] pad_img0_d0;
output  [31:0] grp_fu_409_p_din0;
output  [31:0] grp_fu_409_p_din1;
input  [31:0] grp_fu_409_p_dout0;
output   grp_fu_409_p_ce;

reg ap_idle;
reg img_in_ce0;
reg pad_img0_ce0;
reg pad_img0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln11_fu_115_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln11_fu_145_p3;
reg   [4:0] select_ln11_reg_303;
wire   [4:0] select_ln11_1_fu_153_p3;
reg   [4:0] select_ln11_1_reg_309;
wire   [10:0] add_ln17_3_fu_264_p2;
reg   [10:0] add_ln17_3_reg_321;
reg   [10:0] add_ln17_3_reg_321_pp0_iter2_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter3_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter4_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter5_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter6_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter7_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter8_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter9_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter10_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter11_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter12_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter13_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter14_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter15_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter16_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter17_reg;
reg   [10:0] add_ln17_3_reg_321_pp0_iter18_reg;
reg   [31:0] img_in_load_reg_326;
wire   [31:0] bitcast_ln17_fu_270_p1;
reg   [31:0] conv7_i_reg_336;
wire   [63:0] zext_ln17_4_fu_250_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln17_6_fu_274_p1;
reg   [4:0] c_fu_54;
wire   [4:0] add_ln13_fu_161_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_c_load;
reg   [4:0] r_fu_58;
reg   [4:0] ap_sig_allocacmp_r_load;
reg   [9:0] indvar_flatten_fu_62;
wire   [9:0] add_ln11_1_fu_121_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln13_fu_139_p2;
wire   [4:0] add_ln11_fu_133_p2;
wire   [6:0] tmp_s_fu_189_p3;
wire   [9:0] tmp_fu_182_p3;
wire   [9:0] zext_ln17_fu_196_p1;
wire   [4:0] empty_fu_206_p2;
wire   [9:0] tmp_372_fu_211_p3;
wire   [5:0] tmp_373_fu_223_p3;
wire   [10:0] zext_ln17_1_fu_219_p1;
wire   [10:0] zext_ln17_2_fu_231_p1;
wire   [9:0] sub_ln17_fu_200_p2;
wire   [9:0] zext_ln17_3_fu_241_p1;
wire   [9:0] add_ln17_2_fu_244_p2;
wire   [4:0] add_ln17_fu_255_p2;
wire   [10:0] add_ln17_1_fu_235_p2;
wire   [10:0] zext_ln17_5_fu_260_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 c_fu_54 = 5'd0;
#0 r_fu_58 = 5'd0;
#0 indvar_flatten_fu_62 = 10'd0;
#0 ap_done_reg = 1'b0;
end

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter18_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln11_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_fu_54 <= add_ln13_fu_161_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_54 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln11_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln11_1_fu_121_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln11_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            r_fu_58 <= select_ln11_1_fu_153_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_58 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln17_3_reg_321 <= add_ln17_3_fu_264_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln11_1_reg_309 <= select_ln11_1_fu_153_p3;
        select_ln11_reg_303 <= select_ln11_fu_145_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln17_3_reg_321_pp0_iter10_reg <= add_ln17_3_reg_321_pp0_iter9_reg;
        add_ln17_3_reg_321_pp0_iter11_reg <= add_ln17_3_reg_321_pp0_iter10_reg;
        add_ln17_3_reg_321_pp0_iter12_reg <= add_ln17_3_reg_321_pp0_iter11_reg;
        add_ln17_3_reg_321_pp0_iter13_reg <= add_ln17_3_reg_321_pp0_iter12_reg;
        add_ln17_3_reg_321_pp0_iter14_reg <= add_ln17_3_reg_321_pp0_iter13_reg;
        add_ln17_3_reg_321_pp0_iter15_reg <= add_ln17_3_reg_321_pp0_iter14_reg;
        add_ln17_3_reg_321_pp0_iter16_reg <= add_ln17_3_reg_321_pp0_iter15_reg;
        add_ln17_3_reg_321_pp0_iter17_reg <= add_ln17_3_reg_321_pp0_iter16_reg;
        add_ln17_3_reg_321_pp0_iter18_reg <= add_ln17_3_reg_321_pp0_iter17_reg;
        add_ln17_3_reg_321_pp0_iter2_reg <= add_ln17_3_reg_321;
        add_ln17_3_reg_321_pp0_iter3_reg <= add_ln17_3_reg_321_pp0_iter2_reg;
        add_ln17_3_reg_321_pp0_iter4_reg <= add_ln17_3_reg_321_pp0_iter3_reg;
        add_ln17_3_reg_321_pp0_iter5_reg <= add_ln17_3_reg_321_pp0_iter4_reg;
        add_ln17_3_reg_321_pp0_iter6_reg <= add_ln17_3_reg_321_pp0_iter5_reg;
        add_ln17_3_reg_321_pp0_iter7_reg <= add_ln17_3_reg_321_pp0_iter6_reg;
        add_ln17_3_reg_321_pp0_iter8_reg <= add_ln17_3_reg_321_pp0_iter7_reg;
        add_ln17_3_reg_321_pp0_iter9_reg <= add_ln17_3_reg_321_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        conv7_i_reg_336 <= grp_fu_409_p_dout0;
        img_in_load_reg_326 <= img_in_q0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_115_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter18_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 5'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_r_load = 5'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in_ce0 = 1'b1;
    end else begin
        img_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        pad_img0_ce0 = 1'b1;
    end else begin
        pad_img0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        pad_img0_we0 = 1'b1;
    end else begin
        pad_img0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_121_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln11_fu_133_p2 = (ap_sig_allocacmp_r_load + 5'd1);

assign add_ln13_fu_161_p2 = (select_ln11_fu_145_p3 + 5'd1);

assign add_ln17_1_fu_235_p2 = (zext_ln17_1_fu_219_p1 + zext_ln17_2_fu_231_p1);

assign add_ln17_2_fu_244_p2 = (sub_ln17_fu_200_p2 + zext_ln17_3_fu_241_p1);

assign add_ln17_3_fu_264_p2 = (add_ln17_1_fu_235_p2 + zext_ln17_5_fu_260_p1);

assign add_ln17_fu_255_p2 = (select_ln11_reg_303 + 5'd3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln17_fu_270_p1 = img_in_load_reg_326;

assign empty_fu_206_p2 = (select_ln11_1_reg_309 + 5'd3);

assign grp_fu_409_p_ce = 1'b1;

assign grp_fu_409_p_din0 = bitcast_ln17_fu_270_p1;

assign grp_fu_409_p_din1 = 32'd1132396544;

assign icmp_ln11_fu_115_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_139_p2 = ((ap_sig_allocacmp_c_load == 5'd28) ? 1'b1 : 1'b0);

assign img_in_address0 = zext_ln17_4_fu_250_p1;

assign pad_img0_address0 = zext_ln17_6_fu_274_p1;

assign pad_img0_d0 = conv7_i_reg_336;

assign select_ln11_1_fu_153_p3 = ((icmp_ln13_fu_139_p2[0:0] == 1'b1) ? add_ln11_fu_133_p2 : ap_sig_allocacmp_r_load);

assign select_ln11_fu_145_p3 = ((icmp_ln13_fu_139_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_c_load);

assign sub_ln17_fu_200_p2 = (tmp_fu_182_p3 - zext_ln17_fu_196_p1);

assign tmp_372_fu_211_p3 = {{empty_fu_206_p2}, {5'd0}};

assign tmp_373_fu_223_p3 = {{empty_fu_206_p2}, {1'd0}};

assign tmp_fu_182_p3 = {{select_ln11_1_reg_309}, {5'd0}};

assign tmp_s_fu_189_p3 = {{select_ln11_1_reg_309}, {2'd0}};

assign zext_ln17_1_fu_219_p1 = tmp_372_fu_211_p3;

assign zext_ln17_2_fu_231_p1 = tmp_373_fu_223_p3;

assign zext_ln17_3_fu_241_p1 = select_ln11_reg_303;

assign zext_ln17_4_fu_250_p1 = add_ln17_2_fu_244_p2;

assign zext_ln17_5_fu_260_p1 = add_ln17_fu_255_p2;

assign zext_ln17_6_fu_274_p1 = add_ln17_3_reg_321_pp0_iter18_reg;

assign zext_ln17_fu_196_p1 = tmp_s_fu_189_p3;

endmodule //cnn_cnn_Pipeline_pad_for_rows_pad_for_cols
