// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_max_pooling_layer_Pipeline_pool_for_rows_pool_for_cols (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_to_pool_streams_0_dout,
        conv_to_pool_streams_0_num_data_valid,
        conv_to_pool_streams_0_fifo_cap,
        conv_to_pool_streams_0_empty_n,
        conv_to_pool_streams_0_read,
        pool_to_flat_streams_0_din,
        pool_to_flat_streams_0_num_data_valid,
        pool_to_flat_streams_0_fifo_cap,
        pool_to_flat_streams_0_full_n,
        pool_to_flat_streams_0_write,
        grp_fu_68_p_din0,
        grp_fu_68_p_din1,
        grp_fu_68_p_opcode,
        grp_fu_68_p_dout0,
        grp_fu_68_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] conv_to_pool_streams_0_dout;
input  [10:0] conv_to_pool_streams_0_num_data_valid;
input  [10:0] conv_to_pool_streams_0_fifo_cap;
input   conv_to_pool_streams_0_empty_n;
output   conv_to_pool_streams_0_read;
output  [31:0] pool_to_flat_streams_0_din;
input  [8:0] pool_to_flat_streams_0_num_data_valid;
input  [8:0] pool_to_flat_streams_0_fifo_cap;
input   pool_to_flat_streams_0_full_n;
output   pool_to_flat_streams_0_write;
output  [31:0] grp_fu_68_p_din0;
output  [31:0] grp_fu_68_p_din1;
output  [4:0] grp_fu_68_p_opcode;
input  [0:0] grp_fu_68_p_dout0;
output   grp_fu_68_p_ce;

reg ap_idle;
reg conv_to_pool_streams_0_read;
reg pool_to_flat_streams_0_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg   [0:0] icmp_ln13_reg_371;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state12_pp0_stage3_iter2;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv_to_pool_streams_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg    pool_to_flat_streams_0_blk_n;
reg   [31:0] reg_86;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln13_fu_98_p2;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] add_ln13_fu_104_p2;
reg   [7:0] add_ln13_reg_375;
wire   [0:0] grp_fu_80_p2;
reg   [0:0] icmp_ln27_reg_380;
wire   [0:0] icmp_ln27_1_fu_114_p2;
reg   [0:0] icmp_ln27_1_reg_385;
wire   [31:0] value_fu_124_p1;
reg   [31:0] value_reg_390;
reg   [0:0] icmp_ln27_2_reg_396;
wire   [0:0] icmp_ln27_3_fu_133_p2;
reg   [0:0] icmp_ln27_3_reg_401;
wire   [31:0] pool_23_fu_149_p3;
reg   [31:0] pool_23_reg_406;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] conv_to_pool_streams_0_read_2_reg_413;
reg   [0:0] icmp_ln27_6_reg_418;
reg   [0:0] icmp_ln27_6_reg_418_pp0_iter1_reg;
wire   [0:0] icmp_ln27_7_fu_160_p2;
reg   [0:0] icmp_ln27_7_reg_423;
reg   [0:0] icmp_ln27_7_reg_423_pp0_iter1_reg;
wire   [31:0] value_10_fu_166_p1;
reg   [31:0] value_10_reg_428;
reg   [31:0] conv_to_pool_streams_0_read_3_reg_434;
reg   [31:0] conv_to_pool_streams_0_read_3_reg_434_pp0_iter2_reg;
reg   [0:0] icmp_ln27_10_reg_439;
reg   [0:0] icmp_ln27_10_reg_439_pp0_iter2_reg;
wire   [0:0] icmp_ln27_11_fu_175_p2;
reg   [0:0] icmp_ln27_11_reg_444;
reg   [0:0] icmp_ln27_11_reg_444_pp0_iter2_reg;
wire   [31:0] pool_25_fu_232_p3;
reg   [31:0] pool_25_reg_449;
wire   [31:0] value_11_fu_238_p1;
reg   [31:0] value_11_reg_456;
wire   [31:0] pool_27_fu_293_p3;
reg   [31:0] pool_27_reg_462;
wire   [31:0] value_12_fu_299_p1;
reg   [31:0] value_12_reg_469;
wire   [31:0] pool_29_fu_354_p3;
reg   [31:0] pool_29_reg_475;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [7:0] indvar_flatten_fu_48;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage3_01001;
reg   [31:0] grp_fu_65_p0;
reg   [31:0] grp_fu_65_p1;
wire   [7:0] grp_fu_70_p4;
wire   [22:0] trunc_ln27_fu_110_p1;
wire   [22:0] trunc_ln27_19_fu_129_p1;
wire   [0:0] or_ln27_fu_139_p2;
wire   [0:0] and_ln27_fu_143_p2;
wire   [22:0] trunc_ln27_21_fu_156_p1;
wire   [22:0] trunc_ln27_23_fu_171_p1;
wire   [31:0] bitcast_ln27_fu_181_p1;
wire   [7:0] tmp_3_fu_184_p4;
wire   [22:0] trunc_ln27_20_fu_194_p1;
wire   [0:0] icmp_ln27_5_fu_208_p2;
wire   [0:0] icmp_ln27_4_fu_202_p2;
wire   [0:0] or_ln27_1_fu_198_p2;
wire   [0:0] or_ln27_2_fu_214_p2;
wire   [0:0] and_ln27_1_fu_220_p2;
wire   [0:0] and_ln27_2_fu_226_p2;
wire   [31:0] bitcast_ln27_1_fu_242_p1;
wire   [7:0] tmp_6_fu_245_p4;
wire   [22:0] trunc_ln27_22_fu_255_p1;
wire   [0:0] icmp_ln27_9_fu_269_p2;
wire   [0:0] icmp_ln27_8_fu_263_p2;
wire   [0:0] or_ln27_3_fu_259_p2;
wire   [0:0] or_ln27_4_fu_275_p2;
wire   [0:0] and_ln27_3_fu_281_p2;
wire   [0:0] and_ln27_4_fu_287_p2;
wire   [31:0] bitcast_ln27_2_fu_303_p1;
wire   [7:0] tmp_9_fu_306_p4;
wire   [22:0] trunc_ln27_24_fu_316_p1;
wire   [0:0] icmp_ln27_13_fu_330_p2;
wire   [0:0] icmp_ln27_12_fu_324_p2;
wire   [0:0] or_ln27_5_fu_320_p2;
wire   [0:0] or_ln27_6_fu_336_p2;
wire   [0:0] and_ln27_5_fu_342_p2;
wire   [0:0] and_ln27_6_fu_348_p2;
reg    grp_fu_65_ce;
reg    ap_block_pp0_stage2_00001;
reg    ap_block_pp0_stage0_00001;
reg    ap_block_pp0_stage3_00001;
reg    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 indvar_flatten_fu_48 = 8'd0;
#0 ap_done_reg = 1'b0;
end

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_48 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_fu_48 <= add_ln13_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_reg_375 <= add_ln13_fu_104_p2;
        conv_to_pool_streams_0_read_3_reg_434_pp0_iter2_reg <= conv_to_pool_streams_0_read_3_reg_434;
        icmp_ln13_reg_371 <= icmp_ln13_fu_98_p2;
        icmp_ln27_10_reg_439_pp0_iter2_reg <= icmp_ln27_10_reg_439;
        icmp_ln27_11_reg_444 <= icmp_ln27_11_fu_175_p2;
        icmp_ln27_11_reg_444_pp0_iter2_reg <= icmp_ln27_11_reg_444;
        pool_27_reg_462 <= pool_27_fu_293_p3;
        value_10_reg_428 <= value_10_fu_166_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln27_6_reg_418_pp0_iter1_reg <= icmp_ln27_6_reg_418;
        icmp_ln27_7_reg_423 <= icmp_ln27_7_fu_160_p2;
        icmp_ln27_7_reg_423_pp0_iter1_reg <= icmp_ln27_7_reg_423;
        pool_23_reg_406 <= pool_23_fu_149_p3;
        value_11_reg_456 <= value_11_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_to_pool_streams_0_read_2_reg_413 <= conv_to_pool_streams_0_dout;
        icmp_ln27_6_reg_418 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_to_pool_streams_0_read_3_reg_434 <= conv_to_pool_streams_0_dout;
        icmp_ln27_10_reg_439 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln27_1_reg_385 <= icmp_ln27_1_fu_114_p2;
        pool_25_reg_449 <= pool_25_fu_232_p3;
        value_12_reg_469 <= value_12_fu_299_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln27_2_reg_396 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln27_3_reg_401 <= icmp_ln27_3_fu_133_p2;
        pool_29_reg_475 <= pool_29_fu_354_p3;
        value_reg_390 <= value_fu_124_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln27_reg_380 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_86 <= conv_to_pool_streams_0_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln13_reg_371 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_48;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        conv_to_pool_streams_0_blk_n = conv_to_pool_streams_0_empty_n;
    end else begin
        conv_to_pool_streams_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln13_reg_371 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_to_pool_streams_0_read = 1'b1;
    end else begin
        conv_to_pool_streams_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_65_ce = 1'b1;
    end else begin
        grp_fu_65_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_65_p0 = value_12_fu_299_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_65_p0 = value_11_fu_238_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_65_p0 = value_10_fu_166_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_65_p0 = value_fu_124_p1;
    end else begin
        grp_fu_65_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_65_p1 = pool_27_reg_462;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_65_p1 = pool_25_reg_449;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_65_p1 = pool_23_reg_406;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_65_p1 = 32'd8388608;
    end else begin
        grp_fu_65_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        pool_to_flat_streams_0_blk_n = pool_to_flat_streams_0_full_n;
    end else begin
        pool_to_flat_streams_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        pool_to_flat_streams_0_write = 1'b1;
    end else begin
        pool_to_flat_streams_0_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_104_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln27_1_fu_220_p2 = (or_ln27_2_fu_214_p2 & or_ln27_1_fu_198_p2);

assign and_ln27_2_fu_226_p2 = (grp_fu_68_p_dout0 & and_ln27_1_fu_220_p2);

assign and_ln27_3_fu_281_p2 = (or_ln27_4_fu_275_p2 & or_ln27_3_fu_259_p2);

assign and_ln27_4_fu_287_p2 = (grp_fu_68_p_dout0 & and_ln27_3_fu_281_p2);

assign and_ln27_5_fu_342_p2 = (or_ln27_6_fu_336_p2 & or_ln27_5_fu_320_p2);

assign and_ln27_6_fu_348_p2 = (grp_fu_68_p_dout0 & and_ln27_5_fu_342_p2);

assign and_ln27_fu_143_p2 = (or_ln27_fu_139_p2 & grp_fu_68_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_00001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage3_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage3_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0)));
end

always @ (*) begin
    ap_block_state12_pp0_stage3_iter2 = (pool_to_flat_streams_0_full_n == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln13_reg_371 == 1'd0) & (conv_to_pool_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln13_reg_371 == 1'd0) & (conv_to_pool_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln13_reg_371 == 1'd0) & (conv_to_pool_streams_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (conv_to_pool_streams_0_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln27_1_fu_242_p1 = pool_25_reg_449;

assign bitcast_ln27_2_fu_303_p1 = pool_27_reg_462;

assign bitcast_ln27_fu_181_p1 = pool_23_reg_406;

assign grp_fu_68_p_ce = grp_fu_65_ce;

assign grp_fu_68_p_din0 = grp_fu_65_p0;

assign grp_fu_68_p_din1 = grp_fu_65_p1;

assign grp_fu_68_p_opcode = 5'd2;

assign grp_fu_70_p4 = {{conv_to_pool_streams_0_dout[30:23]}};

assign grp_fu_80_p2 = ((grp_fu_70_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_98_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln27_11_fu_175_p2 = ((trunc_ln27_23_fu_171_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_12_fu_324_p2 = ((tmp_9_fu_306_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_13_fu_330_p2 = ((trunc_ln27_24_fu_316_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_114_p2 = ((trunc_ln27_fu_110_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_3_fu_133_p2 = ((trunc_ln27_19_fu_129_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_4_fu_202_p2 = ((tmp_3_fu_184_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_5_fu_208_p2 = ((trunc_ln27_20_fu_194_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_7_fu_160_p2 = ((trunc_ln27_21_fu_156_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_8_fu_263_p2 = ((tmp_6_fu_245_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_9_fu_269_p2 = ((trunc_ln27_22_fu_255_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_ln27_1_fu_198_p2 = (icmp_ln27_3_reg_401 | icmp_ln27_2_reg_396);

assign or_ln27_2_fu_214_p2 = (icmp_ln27_5_fu_208_p2 | icmp_ln27_4_fu_202_p2);

assign or_ln27_3_fu_259_p2 = (icmp_ln27_7_reg_423_pp0_iter1_reg | icmp_ln27_6_reg_418_pp0_iter1_reg);

assign or_ln27_4_fu_275_p2 = (icmp_ln27_9_fu_269_p2 | icmp_ln27_8_fu_263_p2);

assign or_ln27_5_fu_320_p2 = (icmp_ln27_11_reg_444_pp0_iter2_reg | icmp_ln27_10_reg_439_pp0_iter2_reg);

assign or_ln27_6_fu_336_p2 = (icmp_ln27_13_fu_330_p2 | icmp_ln27_12_fu_324_p2);

assign or_ln27_fu_139_p2 = (icmp_ln27_reg_380 | icmp_ln27_1_reg_385);

assign pool_23_fu_149_p3 = ((and_ln27_fu_143_p2[0:0] == 1'b1) ? value_reg_390 : 32'd8388608);

assign pool_25_fu_232_p3 = ((and_ln27_2_fu_226_p2[0:0] == 1'b1) ? value_10_reg_428 : pool_23_reg_406);

assign pool_27_fu_293_p3 = ((and_ln27_4_fu_287_p2[0:0] == 1'b1) ? value_11_reg_456 : pool_25_reg_449);

assign pool_29_fu_354_p3 = ((and_ln27_6_fu_348_p2[0:0] == 1'b1) ? value_12_reg_469 : pool_27_reg_462);

assign pool_to_flat_streams_0_din = pool_29_reg_475;

assign tmp_3_fu_184_p4 = {{bitcast_ln27_fu_181_p1[30:23]}};

assign tmp_6_fu_245_p4 = {{bitcast_ln27_1_fu_242_p1[30:23]}};

assign tmp_9_fu_306_p4 = {{bitcast_ln27_2_fu_303_p1[30:23]}};

assign trunc_ln27_19_fu_129_p1 = conv_to_pool_streams_0_dout[22:0];

assign trunc_ln27_20_fu_194_p1 = bitcast_ln27_fu_181_p1[22:0];

assign trunc_ln27_21_fu_156_p1 = conv_to_pool_streams_0_dout[22:0];

assign trunc_ln27_22_fu_255_p1 = bitcast_ln27_1_fu_242_p1[22:0];

assign trunc_ln27_23_fu_171_p1 = conv_to_pool_streams_0_dout[22:0];

assign trunc_ln27_24_fu_316_p1 = bitcast_ln27_2_fu_303_p1[22:0];

assign trunc_ln27_fu_110_p1 = conv_to_pool_streams_0_dout[22:0];

assign value_10_fu_166_p1 = reg_86;

assign value_11_fu_238_p1 = conv_to_pool_streams_0_read_2_reg_413;

assign value_12_fu_299_p1 = conv_to_pool_streams_0_read_3_reg_434_pp0_iter2_reg;

assign value_fu_124_p1 = reg_86;

endmodule //cnn_max_pooling_layer_Pipeline_pool_for_rows_pool_for_cols
