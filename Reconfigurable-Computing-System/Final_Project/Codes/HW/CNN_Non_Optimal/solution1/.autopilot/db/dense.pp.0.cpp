# 1 "CNN_Non_Optimal/src/dense.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 376 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 105 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "CNN_Non_Optimal/src/dense.cpp" 2
# 1 "CNN_Non_Optimal/src/dense.h" 1


# 1 "CNN_Non_Optimal/src/Headers/definitions.h" 1
# 4 "CNN_Non_Optimal/src/dense.h" 2
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream.h" 1
# 12 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream.h"
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream_39.h" 1
# 23 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream_39.h"
namespace hls {
# 49 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream_39.h"
template<typename __STREAM_T__, int DEPTH=0>
class stream;

template<typename __STREAM_T__>
class stream<__STREAM_T__, 0>
{
  public:
    using value_type = __STREAM_T__;

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
      (void)(name);
    }


  private:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool empty() const {
        return !__fpga_fifo_not_empty(&V);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool full() const {
        return !__fpga_fifo_not_full(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void read(__STREAM_T__& dout) {
        __fpga_fifo_pop(&V, &dout);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool read_dep(__STREAM_T__& dout, volatile bool flag) {
        __fpga_fifo_pop(&V, &dout);
        return flag;
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) __STREAM_T__ read() {
        __STREAM_T__ tmp;
        read(tmp);
        return tmp;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;

        if (__fpga_fifo_nb_pop(&V, &tmp)) {
            dout = tmp;
            return true;
        } else {
            return false;
        }
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const __STREAM_T__& din) {
        __fpga_fifo_push(&V, &din);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool write_dep(const __STREAM_T__& din, volatile bool flag) {
        __fpga_fifo_push(&V, &din);
        return flag;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool write_nb(const __STREAM_T__& din) {
        return __fpga_fifo_nb_push(&V, &din);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned size() const {
        return __fpga_fifo_size(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned capacity() const {
        return __fpga_fifo_capacity(&V);
    }


    void set_name(const char* name) { (void)(name); }

  public:
    __STREAM_T__ V __attribute__((no_ctor));
};

template<typename __STREAM_T__, int DEPTH>
class stream : public stream<__STREAM_T__, 0> {
  public:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
#pragma HLS stream variable=this depth=DEPTH
 }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
#pragma HLS stream variable=this depth=DEPTH
 (void)(name);
    }
};
}
# 13 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/common/technology/autopilot/hls_stream.h" 2
# 5 "CNN_Non_Optimal/src/dense.h" 2

void dense_layer_soft_max(hls::stream<float> dense_to_softmax_streams[4], float prediction[10]);

void dense_layer(hls::stream<float> flat_to_dense_streams[4], hls::stream<float> dense_to_softmax_stream[4]);
# 2 "CNN_Non_Optimal/src/dense.cpp" 2
# 1 "CNN_Non_Optimal/src/Headers/dense_weights.h" 1
# 11 "CNN_Non_Optimal/src/Headers/dense_weights.h"
float dense_weights[(4 * (28 / 2) * (28 / 2))][10]
  = {
   { -0.015101167373359203, 0.08081821352243423, -0.04316626116633415, 0.0032749446108937263, 0.03846549242734909, 0.09282621741294861, 0.0656823068857193, 0.027917800471186638, -0.029244035482406616, -0.04486637935042381 },
   { 0.09202179312705994, 0.08604741841554642, 0.06436700373888016, 0.060237281024456024, -0.01205697376281023, 0.039565809071063995, 0.008406896144151688, 0.03660852089524269, -0.029288485646247864, -0.12135469168424606 },
   { 0.07084456831216812, -0.10946852713823318, 0.03552427887916565, -0.0063918824307620525, -0.05127101019024849, -0.12969806790351868, 0.15018701553344727, -0.04883025214076042, -0.13126696646213531, -0.07555294036865234 },
   { -0.07781650125980377, -0.16549935936927795, 0.00784028135240078, 0.12298962473869324, -0.3354104459285736, -0.21240463852882385, 0.32691121101379395, -0.23069153726100922, -0.1892569363117218, 0.007287210319191217 },
   { -0.047889675945043564, 0.10489360243082047, 0.13732798397541046, -0.09343020617961884, -0.3288353681564331, -0.20607802271842957, 0.26785939931869507, -0.2692432403564453, -0.03957756608724594, -0.2496250569820404 },
   { 0.06853722780942917, 0.19171972572803497, 0.21618111431598663, -0.10309755057096481, -0.31574058532714844, -0.15762798488140106, 0.41342616081237793, -0.3064596652984619, -0.4205678105354309, -0.471865713596344 },
   { 0.008871452882885933, 0.1305566430091858, -0.08228093385696411, 0.011848713271319866, -0.2662770748138428, -0.20104049146175385, 0.25896570086479187, -0.24172265827655792, -0.22818505764007568, -0.34251508116722107 },
   { 0.016148583963513374, 0.15300270915031433, -0.15913552045822144, -0.1799769401550293, 0.09342299401760101, 0.03275159373879433, 0.19569085538387299, -0.11524897068738937, -0.01799001730978489, -0.17013055086135864 },
   { -0.11818241328001022, 0.24027252197265625, -0.15391536056995392, -0.21118605136871338, -0.07658903300762177, 0.2503614127635956, 0.20716635882854462, -0.15260900557041168, -0.07931037247180939, -0.20983146131038666 },
   { 0.024898864328861237, 0.04243837669491768, -0.12905199825763702, -0.30671006441116333, -0.16293761134147644, 0.10660234093666077, 0.11862531304359436, -0.37244921922683716, 0.0067976717837154865, -0.05350693315267563 },
   { -0.13169759511947632, 0.14455682039260864, -0.2681241035461426, -0.05385087803006172, -0.15519672632217407, 0.1562703549861908, 0.29289063811302185, -0.37799543142318726, -0.16671130061149597, -0.10934814810752869 },
   { -0.06129622086882591, -0.20575430989265442, -0.027542702853679657, -0.2031744420528412, -0.08008790016174316, -0.03296066075563431, 0.13734455406665802, 0.008591597899794579, 0.058190666139125824, -0.2945156693458557 },
   { 0.02979002520442009, -0.04883658140897751, -0.15352261066436768, -0.2958930432796478, 0.07103189080953598, 0.04128076136112213, -0.024179406464099884, -0.25387996435165405, -0.12575127184391022, -0.08030974864959717 },
   { 0.027341371402144432, -0.2420453280210495, 0.049232903867959976, -0.10393596440553665, -0.0132242850959301, 0.07411929965019226, -0.20900973677635193, -0.1331210732460022, -0.07115832716226578, -0.07453925162553787 },
   { -0.07576627284288406, -0.04468650743365288, -0.010982413776218891, 0.12734204530715942, 0.045402027666568756, -0.009750784374773502, -0.07281578332185745, -0.046001091599464417, -0.11352577060461044, 0.001227223314344883 },
   { -0.0950152799487114, -0.0870293378829956, -0.04036390781402588, -0.019699033349752426, -0.09660246223211288, -0.06528457999229431, 0.03363323211669922, -0.009977058507502079, -0.0050292303785681725, -0.10699878633022308 },
   { -0.06750553846359253, -0.05296473950147629, -0.005807829089462757, 0.20049096643924713, -0.20816093683242798, -0.2390182614326477, 0.20854882895946503, -0.07604276388883591, -0.27722278237342834, -0.19422458112239838 },
   { 0.053446266800165176, -0.08487127721309662, 0.0629315972328186, 0.11439388990402222, -0.10248830169439316, -0.1810104250907898, 0.014501095749437809, -0.13383996486663818, 0.02094905637204647, -0.3212919533252716 },
   { -0.19726186990737915, -0.10533913224935532, 0.03470560908317566, 0.019066626206040382, 0.011395440436899662, -0.09725725650787354, 0.09939917176961899, -0.33186182379722595, 0.18875479698181152, -0.6260598301887512 },
   { -0.1710009127855301, -0.1700732260942459, 0.11816390603780746, -0.11044500023126602, 0.04375716298818588, -0.04593269154429436, 0.2056712657213211, -0.2825170159339905, 0.1205427274107933, -0.23225568234920502 },
   { -0.055741533637046814, 0.10728833079338074, -0.04022002965211868, -0.09895128756761551, 0.18438689410686493, -0.12083980441093445, 0.1534769982099533, -0.1109432578086853, 0.0002727303362917155, -0.1417105495929718 },
   { 0.025540197268128395, 0.13893361389636993, -0.11087394505739212, -0.29744988679885864, 0.2369428426027298, -0.0648815855383873, 0.06674540042877197, -0.06717503070831299, 0.15374167263507843, -0.23719735443592072 },
   { -0.18641702830791473, 0.30858519673347473, -0.14659330248832703, -0.3062586188316345, 0.3071511685848236, 0.09888957440853119, 0.14661093056201935, -0.13270966708660126, -0.006370891351252794, -0.2987770140171051 },
   { -0.026657268404960632, 0.1555541604757309, -0.2132493406534195, -0.4397486746311188, 0.1989007294178009, 0.1785847395658493, 0.01434299536049366, -0.10657799988985062, 0.0071281930431723595, -0.13624997437000275 },
   { -0.1548876017332077, 0.13786552846431732, -0.29182884097099304, -0.31965503096580505, 0.16335797309875488, 0.2611623704433441, 0.009614509530365467, -0.11760054528713226, 0.13536842167377472, -0.24583669006824493 },
   { -0.03225257247686386, 0.07828447967767715, -0.07728169113397598, -0.26545900106430054, 0.10237716883420944, 0.18646076321601868, -0.007540019229054451, 0.0324002243578434, -0.05298254266381264, -0.16093087196350098 },
   { -0.10156834870576859, -0.06820283085107803, -0.10089100152254105, -0.17324954271316528, 0.2017730176448822, 0.08199551701545715, -0.10763729363679886, -0.10831727832555771, -0.07596711814403534, -0.1641136109828949 },
   { -0.316154420375824, -0.23744191229343414, 0.12612172961235046, -0.267692506313324, -0.12048500031232834, 0.13992047309875488, -0.06292252242565155, -0.2182672917842865, 0.14661480486392975, 0.022968025878071785 },
   { 0.004279203247278929, -0.09921736270189285, -0.003194087650626898, 0.06280804425477982, 0.0426359623670578, -0.04059210419654846, -0.0446612648665905, -0.10304677486419678, -0.05985619127750397, -0.06562354415655136 },
   { 0.003369830083101988, -0.00219927285797894, -0.13184285163879395, 0.37157711386680603, -0.19633358716964722, -0.19417160749435425, -0.03604951500892639, 0.05487370491027832, -0.16938188672065735, -0.2207551747560501 },
   { -0.08807341754436493, -0.038607317954301834, 0.15064138174057007, 0.11592666804790497, -0.11361668258905411, -0.17791542410850525, 0.15686911344528198, -0.18420147895812988, -0.008403275161981583, -0.1562063843011856 },
   { -0.1350579559803009, -0.11502806842327118, 0.14561216533184052, 0.07351721078157425, -0.09720532596111298, -0.07422413676977158, 0.1052701324224472, -0.057047877460718155, 0.05123337730765343, 0.1469675451517105 },
   { -0.11296843737363815, -0.17479334771633148, -0.01914437860250473, -0.03525407984852791, 0.0005464500864036381, -0.04311754181981087, 0.1042211651802063, -0.15771882236003876, 0.13360464572906494, 0.20048858225345612 },
   { -0.04515274986624718, -0.21632760763168335, 0.05763379484415054, -0.18438735604286194, 0.049088820815086365, -0.04800024628639221, 0.12320515513420105, -0.13300272822380066, 0.00023491852334700525, 0.1498098373413086 },
   { -0.0866398960351944, -0.1175415962934494, -0.04887061566114426, -0.2066173255443573, 0.09026183187961578, 0.036311857402324677, 0.17623816430568695, -0.24931637942790985, 0.061595018953084946, 0.08675151318311691 },
   { -0.021602552384138107, 0.01634211651980877, -0.13612380623817444, -0.1423405408859253, 0.13361330330371857, 0.031040016561746597, 0.1564192771911621, -0.3115963637828827, -0.01157176773995161, 0.025773510336875916 },
   { -0.11874943971633911, 0.10209213197231293, -0.1773030161857605, -0.1698366403579712, 0.25497719645500183, -0.026919584721326828, 0.17051227390766144, -0.06182209774851799, -0.15042293071746826, -0.186376690864563 },
   { -0.03481442108750343, 0.11706347018480301, -0.09306955337524414, 0.0467677004635334, 0.5133049488067627, -0.09025838226079941, -0.03916110098361969, 0.08371947705745697, 0.017025023698806763, -0.3907790780067444 },
   { -0.16711194813251495, -0.07667476683855057, -0.1366330236196518, 0.10957835614681244, 0.4581959545612335, -0.06912710517644882, -0.14285586774349213, 0.05512147769331932, 0.08251126110553741, -0.4446711242198944 },
   { -0.046471577137708664, 0.12964826822280884, -0.074163518846035, -0.07485787570476532, 0.22800733149051666, 0.06168518215417862, -0.019850030541419983, 0.09348326921463013, 0.08196684718132019, -0.164261132478714 },
   { -0.06790229678153992, -0.08013371378183365, -0.06668716669082642, -0.12575270235538483, 0.2114105373620987, 0.05778946727514267, 0.0026804497465491295, 0.11893504858016968, 0.08427207171916962, -0.19045455753803253 },
   { -0.07552922517061234, -0.42225882411003113, 0.03552842140197754, -0.29601800441741943, -0.01609867624938488, 0.08833055943250656, 0.008203369565308094, -0.2993646264076233, 0.1455729603767395, -0.37986674904823303 },
   { 0.017256874591112137, -0.19046200811862946, -0.03220251575112343, 0.2213357836008072, -0.0013258650433272123, -0.336870402097702, -0.007693126332014799, 0.22012855112552643, -0.11424484848976135, -0.26745104789733887 },
   { -0.14084076881408691, -0.046001825481653214, 0.12510812282562256, 0.19498705863952637, -0.19451770186424255, -0.29550790786743164, 0.09552787989377975, -0.11069373786449432, -0.08710402995347977, -0.051706306636333466 },
   { -0.04804397001862526, -0.10445605963468552, 0.219137504696846, 0.09379273653030396, -0.17343111336231232, -0.13834358751773834, 0.08925443142652512, -0.07078233361244202, 0.1936345249414444, -0.01793738082051277 },
   { -0.06371447443962097, -0.10566665977239609, 0.0025037825107574463, 0.06445768475532532, -0.07325977087020874, -0.10523003339767456, 0.02432134747505188, -0.1787426769733429, 0.12291262298822403, 0.18272095918655396 },
   { 0.023562343791127205, -0.16720251739025116, 0.007512144278734922, 0.0110829658806324, 0.04332021251320839, -0.05405101552605629, 0.05220847204327583, -0.07258063554763794, 0.021738681942224503, 0.11043205112218857 },
   { 0.09510600566864014, -0.1983986794948578, 0.033745959401130676, -0.04234541952610016, -0.005657975096255541, 0.04055093228816986, 0.14368130266666412, -0.06769298017024994, 0.029036113992333412, 0.03333890810608864 },
   { -0.07268834859132767, -0.1819191724061966, -0.03134099021553993, -0.03379768133163452, 0.13109776377677917, -0.014176679775118828, 0.04311255365610123, -0.007734037470072508, -0.0918131172657013, 0.037100087851285934 },
   { -0.06442038714885712, -0.0448271781206131, -0.1517689973115921, -0.02801366150379181, 0.00815253984183073, 0.004948838148266077, 0.08383366465568542, -0.06188669428229332, 0.033611737191677094, -0.015170170925557613 },
   { 0.042767662554979324, 0.13610677421092987, -0.049371495842933655, 0.086797796189785, 0.1577380746603012, -0.1573001891374588, 0.027002114802598953, 0.030641090124845505, 0.047676581889390945, -0.14860455691814423 },
   { -0.08724451065063477, 0.004671905189752579, 0.07889694720506668, 0.09064379334449768, 0.2526628375053406, -0.1257077008485794, -0.15039381384849548, 0.09444081038236618, -0.00283577898517251, -0.10908899456262589 },
   { 0.06817314773797989, -0.09870035201311111, 0.0407731868326664, -0.014373227022588253, 0.23478032648563385, -0.2632010281085968, -0.06877445429563522, 0.011467857286334038, -0.012080642394721508, -0.20168611407279968 },
   { -0.04198853299021721, -0.08380866050720215, 0.14768891036510468, 0.06709574908018112, 0.19979830086231232, -0.11887802183628082, -0.1488359123468399, 0.07975166290998459, 0.10425759106874466, -0.26928457617759705 },
   { 0.07137621939182281, -0.19972985982894897, -0.08379769325256348, -0.08036685734987259, 0.21289600431919098, -0.05783902853727341, -0.10192332416772842, -0.0900038629770279, 0.0967550128698349, -0.2770148813724518 },
   { -0.13680589199066162, -0.19921888411045074, 0.006718029733747244, -0.25713273882865906, 0.02007160894572735, 0.045357584953308105, 0.009702366776764393, 0.0053728134371340275, 0.14229844510555267, -0.3098752796649933 },
   { -0.006432308815419674, -0.10176078975200653, 0.10950224101543427, 0.11143691092729568, -0.059312544763088226, -0.28302136063575745, -0.09173806756734848, 0.19156965613365173, 0.028266074135899544, -0.16518054902553558 },
   { -0.07752262055873871, -0.0598335899412632, 0.10824886709451675, 0.11816035211086273, -0.21521855890750885, -0.19163759052753448, -0.03536445274949074, -0.05241892486810684, 0.07315195351839066, 0.008631623350083828 },
   { -0.06102944165468216, -0.05358339846134186, -0.013296389020979404, 0.15493550896644592, -0.10299605876207352, -0.11868520826101303, -0.011617724783718586, -0.05699218437075615, 0.04312983155250549, 0.11083533614873886 },
   { 0.15858733654022217, 0.0740068256855011, -0.09049060195684433, 0.0543702132999897, -0.005402910057455301, -0.09527966380119324, 0.02967257797718048, -0.10125645995140076, 0.04401613399386406, 0.03753652423620224 },
   { 0.036603230983018875, -0.029061835259199142, -0.06886283308267593, 0.048491302877664566, -0.0606684684753418, -0.00539203267544508, 0.02998490259051323, -0.035072211176157, -0.06618846952915192, 0.05897746607661247 },
   { 0.015748457983136177, -0.008364252746105194, -0.05535167455673218, 0.0781884640455246, 0.06405960768461227, 0.1006166934967041, 0.08875259757041931, 0.10705392807722092, -0.14038577675819397, 0.05637893080711365 },
   { -0.010082178749144077, 0.03394132852554321, -0.09038888663053513, -0.007746068295091391, -0.04606294631958008, 0.025239845737814903, 0.00961451418697834, 0.05994132533669472, -0.0853169709444046, 0.03416483476758003 },
   { -0.007227696478366852, -0.006521325092762709, -0.13220654428005219, 0.08786814659833908, -0.06912855058908463, -0.00602801563218236, 0.007498232182115316, 0.028852220624685287, 0.02139345556497574, 0.04083384573459625 },
   { -0.06310264766216278, 0.07047899067401886, -0.03295233100652695, 0.02341420389711857, -0.03765496984124184, -0.21170774102210999, -0.08643179386854172, 0.07804945111274719, 0.037173546850681305, 0.08558754622936249 },
   { -0.14683331549167633, -0.08115379512310028, -0.020681725814938545, 0.09197995066642761, 0.050975311547517776, -0.2642040252685547, -0.17563235759735107, 0.12651501595973969, 0.14584313333034515, -0.054178934544324875 },
   { 0.06497016549110413, -0.15830056369304657, 0.07793312519788742, -0.041053228080272675, 0.0032654209062457085, -0.19380927085876465, -0.27157652378082275, 0.07830823957920074, 0.09656894207000732, -0.0808689072728157 },
   { 0.0001299335854128003, 0.0016442122869193554, 0.1302373707294464, 0.025984546169638634, 0.02472500130534172, -0.04219073802232742, -0.1892899125814438, 0.06160793453454971, 0.07679953426122665, -0.06610459089279175 },
   { 0.018560755997896194, 0.01070079393684864, -0.05318642035126686, -0.054807666689157486, -0.005146746523678303, -0.1045360192656517, -0.014279420487582684, 0.028402654454112053, 0.1344265192747116, 0.056573085486888885 },
   { -0.23127542436122894, -0.03566862270236015, 0.04736883193254471, -0.09396308660507202, -0.12272666394710541, 0.05992307513952255, 0.11942038685083389, -0.1525188833475113, -0.017379051074385643, -0.27851858735084534 },
   { 0.008906022645533085, -0.20415596663951874, 0.03156168758869171, 0.08778570592403412, 0.0317363366484642, -0.2827484607696533, -0.10283788293600082, 0.0445672869682312, -0.04363134503364563, -0.027943512424826622 },
   { -0.08841480314731598, -0.011510297656059265, 0.15117697417736053, 0.1721220314502716, -0.1415252387523651, -0.04223676770925522, -0.2549300491809845, 0.05996006354689598, 0.047561872750520706, 0.11558202654123306 },
   { 0.013165250420570374, -0.008968423120677471, -0.017530804499983788, 0.07960878312587738, -0.05057906359434128, -0.10820824652910233, -0.022789811715483665, -0.029056306928396225, -0.07952740043401718, 0.08364783227443695 },
   { 0.17740461230278015, 0.05954814329743385, 0.045673102140426636, -0.030856363475322723, 0.07919543236494064, 0.040398161858320236, 0.06415918469429016, 0.07034707069396973, -0.1253552883863449, -0.060398511588573456 },
   { -0.022362150251865387, 0.02776581607758999, -0.15691158175468445, 0.0281024482101202, 0.0064523424953222275, 0.13670819997787476, -0.05047323927283287, 0.09232844412326813, -0.1590137481689453, 0.019840354099869728 },
   { 0.13465307652950287, 0.0077697415836155415, -0.1845148354768753, -0.02660476602613926, 0.15041108429431915, 0.032418351620435715, 0.05978221818804741, 0.16373445093631744, -0.07589392364025116, -0.11357523500919342 },
   { 0.10201525688171387, 0.040505822747945786, -0.20810088515281677, 0.017239639535546303, -0.09683074057102203, -0.06565757840871811, 0.07540769875049591, -0.024482719600200653, -0.050843846052885056, 0.043721895664930344 },
   { -0.012801027856767178, 0.12975841760635376, -0.02911965921521187, 0.16313348710536957, -0.11739248037338257, -0.15736763179302216, -0.08570350706577301, -0.017537672072649002, 0.11384504288434982, 0.05528274551033974 },
   { -0.09969309717416763, 0.013125049881637096, -0.030734186992049217, 0.006180327385663986, 0.025957016274333, -0.36417749524116516, -0.17830178141593933, 0.07690919190645218, 0.12543885409832, 0.032546114176511765 },
   { 0.08142063021659851, -0.051653794944286346, 0.044321458786726, 0.04301368072628975, 0.11530265212059021, -0.33309313654899597, -0.22283819317817688, 0.04407951980829239, 0.09794706851243973, -0.00934508815407753 },
   { 0.0743270143866539, -0.07204081863164902, 0.05700390785932541, -0.05955997109413147, 0.044608160853385925, -0.297755628824234, -0.1916021853685379, 0.01954493671655655, 0.06663178652524948, 0.03221588209271431 },
   { 0.10329098999500275, -0.038308825343847275, -0.0036958339624106884, -0.15821276605129242, 0.04154409095644951, -0.13668888807296753, -0.06307312101125717, -0.0753195583820343, 0.11558227241039276, -0.03829612955451012 },
   { -0.01899733953177929, -0.013032973743975163, 0.14176936447620392, -0.09790921956300735, -0.06887899339199066, -0.07533829659223557, 0.037089571356773376, -0.06057164445519447, 0.04888645559549332, -0.09305586665868759 },
   { -0.03440575301647186, -0.04980737715959549, 0.06865028291940689, -0.06417123228311539, -0.0452767089009285, 0.09015531092882156, -0.33172839879989624, -0.07688164710998535, -0.03847922757267952, -0.16823437809944153 },
   { -0.12186197936534882, 0.03468704968690872, -0.07610423862934113, -0.07239366322755814, 0.01428852416574955, -0.031120413914322853, -0.2968500554561615, 0.20669037103652954, 0.020600922405719757, 0.028467239812016487 },
   { -0.11264892667531967, -0.09204288572072983, -0.0065204729326069355, -0.0715661495923996, -0.045989036560058594, 0.022362520918250084, -0.2039889246225357, 0.04932847619056702, 0.06418947875499725, -0.008667659945786 },
   { 0.13752612471580505, 0.016276521608233452, -0.018249668180942535, -0.13729111850261688, -0.028632357716560364, 0.07348012179136276, -0.016063932329416275, 0.012476551346480846, -0.1477067619562149, 0.047061074525117874 },
   { 0.14473167061805725, 0.04348871484398842, -0.06220439821481705, -0.2054259181022644, 0.13020721077919006, -0.043743062764406204, -0.0490926168859005, 0.118547722697258, -0.0675671398639679, -0.026976877823472023 },
   { 0.09954902529716492, 0.07746552675962448, -0.10233325511217117, -0.14642030000686646, 0.13037504255771637, 0.09433997422456741, 0.026813490316271782, 0.16292600333690643, 0.04123309999704361, 0.005062248092144728 },
   { 0.050767432898283005, -0.02028333581984043, -0.20809955894947052, -0.040586527436971664, 0.1336202472448349, 0.024956565350294113, 0.10789263993501663, -0.04223372042179108, 0.0030012314673513174, -0.005049805622547865 },
   { -0.005375769920647144, 0.15908773243427277, -0.07962103933095932, 0.025232763960957527, -0.10066793859004974, 0.015674997121095657, 0.02002854458987713, -0.1666056215763092, 0.15082986652851105, 0.15351860225200653 },
   { -0.1853656768798828, 0.1695396453142166, -0.06569504737854004, 0.01884697563946247, -0.11527161300182343, -0.2088848352432251, -0.0489095039665699, -0.03228840231895447, 0.05938436836004257, 0.17699630558490753 },
   { -0.014042484574019909, 0.08405791223049164, -0.03020324930548668, -0.032596834003925323, 0.08138774335384369, -0.2882988154888153, -0.18775683641433716, 0.028549114242196083, 0.061892781406641006, 0.13205182552337646 },
   { 0.05927328020334244, -0.008372247219085693, 0.05754192918539047, -0.038249194622039795, 0.016719868406653404, -0.3169454038143158, -0.1718999594449997, 0.0518498569726944, 0.09818246960639954, 0.046285297721624374 },
   { 0.051872339099645615, -0.19186384975910187, -0.023624181747436523, -0.020885031670331955, 0.056063462048769, -0.3011791408061981, -0.1411968618631363, 0.037557587027549744, 0.04252275079488754, 0.09583060443401337 },
   { 0.17834578454494476, 0.013910472393035889, 0.12073778361082077, -0.11617804318666458, -0.04134124517440796, -0.09718962013721466, 0.01612980291247368, 0.03161394223570824, -0.019917376339435577, 0.05902561917901039 },
   { 0.057669490575790405, -0.06167306378483772, 0.10139109939336777, 0.0716632828116417, -0.21432584524154663, -0.005912873428314924, 0.0021082134917378426, -0.023754732683300972, 0.12031450867652893, -0.1561031937599182 },
   { 0.00026837748009711504, -0.007224360480904579, 0.08400241285562515, -0.08481045067310333, -0.06847212463617325, 0.1327495574951172, -0.10315242409706116, -0.14448955655097961, 0.06192636862397194, 0.0019107962725684047 },
   { -0.08630694448947906, 0.12178509682416916, -0.07170737534761429, -0.22368556261062622, -0.00160021404735744, -0.09745191782712936, -0.2777506113052368, 0.19146810472011566, -0.09964028745889664, 0.08631959557533264 },
   { 0.10246121883392334, 0.09851224720478058, -0.1062730923295021, -0.3282265365123749, 0.0970655232667923, 0.11495870351791382, -0.042905814945697784, 0.16018708050251007, -0.002260742709040642, 0.0309876948595047 },
   { 0.10341772437095642, 0.06906753778457642, -0.0210434403270483, -0.4358707070350647, 0.11064262688159943, 0.06842637807130814, -0.02945008873939514, 0.1620713472366333, 0.09537041932344437, 0.03429749235510826 },
   { 0.14747674763202667, 0.0167707372456789, -0.07847233861684799, -0.29254454374313354, 0.1344318985939026, -0.015055771917104721, 0.007570974994450808, 0.10270339995622635, 0.14134986698627472, -0.07043623179197311 },
   { 0.10623382031917572, -0.14702379703521729, -0.08001101762056351, -0.29968807101249695, 0.16072165966033936, -0.02639748901128769, 0.011250418610870838, 0.06193983554840088, 0.03178221732378006, 0.024691734462976456 },
   { 0.05071655660867691, 0.03235247731208801, 0.06610378623008728, -0.20388993620872498, 0.046891409903764725, 0.014216422103345394, 0.06037392467260361, -0.2562214136123657, 0.051096126437187195, 0.021962301805615425 },
   { -0.053371187299489975, 0.012683834880590439, -0.0030266528483480215, -0.01901707611978054, 0.04132562875747681, -0.12234451621770859, 0.025086700916290283, -0.2048032581806183, 0.0787520632147789, 0.08875317871570587 },
   { -0.24547232687473297, 0.03194829449057579, -0.0058183991350233555, 0.023587999865412712, 0.04240044206380844, -0.16539421677589417, -0.09322633594274521, -0.11768076568841934, 0.017824092879891396, 0.06968604028224945 },
   { 0.0919918343424797, -0.013988059014081955, 0.004746101796627045, -0.10000814497470856, 0.09041718393564224, -0.08954165875911713, -0.006645090412348509, 0.05780159309506416, -0.0745890811085701, 0.18774114549160004 },
   { 0.09135496616363525, -0.1447589099407196, 0.05789250135421753, -0.0785570964217186, 0.10246966779232025, -0.10704129189252853, 0.10785051435232162, 0.10161523520946503, 0.001084483228623867, 0.08964861184358597 },
   { 0.06476293504238129, -0.0016502377111464739, -0.037956155836582184, -0.07483312487602234, -0.008291777223348618, -0.20035076141357422, 0.020948929712176323, 0.018751630559563637, -0.058467015624046326, 0.12027139961719513 },
   { 0.1693463772535324, 0.08901513367891312, -0.010035810992121696, -0.02235269732773304, 0.07374536991119385, -0.11560351401567459, -0.0019006617367267609, -0.17344817519187927, 0.08430171757936478, -0.05248037353157997 },
   { 0.051758334040641785, 0.05945439264178276, -0.0943683385848999, -0.026445074006915092, 0.06801678240299225, -0.11092768609523773, -0.025744425132870674, -0.1194063350558281, 0.11619150638580322, -0.02082422934472561 },
   { -0.05645814538002014, 0.07023169100284576, 0.2899123430252075, -0.35316506028175354, -0.11371834576129913, -0.359148234128952, 0.035107504576444626, -0.3059624433517456, 0.07656341046094894, -0.02572845108807087 },
   { 0.0074804858304560184, 0.1426965892314911, 0.16236528754234314, -0.09022024273872375, 0.07672590762376785, 0.025173785164952278, -0.22187837958335876, 0.061482951045036316, -0.12652474641799927, -0.07051363587379456 },
   { 0.06336471438407898, -0.0650697574019432, 0.04681377857923508, -0.3103604316711426, 0.07912641763687134, 0.012292236089706421, 0.11238380521535873, 0.04520786181092262, -0.030460482463240623, -0.07852266728878021 },
   { 0.03724045306444168, 0.015059532597661018, -0.001819361001253128, -0.23382799327373505, 0.05041911453008652, -0.10891620069742203, -0.021269451826810837, 0.0028155921027064323, 0.05733000114560127, 0.06565267592668533 },
   { 0.13498997688293457, -0.06748704612255096, -0.004594287369400263, -0.36714765429496765, 0.14213478565216064, -0.12904813885688782, 0.019440442323684692, 0.09383716434240341, 0.277915894985199, -0.0903560146689415 },
   { 0.03477917239069939, -0.1126110628247261, 0.042693670839071274, -0.3343445062637329, 0.1499502956867218, -0.13329975306987762, 0.03585364669561386, -0.060588959604501724, 0.2011733204126358, 0.03897042199969292 },
   { 0.06108229234814644, -0.04125861078500748, 0.21227973699569702, -0.21137726306915283, -0.016353268176317215, -0.041123513132333755, 0.1146429032087326, -0.22742903232574463, 0.019998498260974884, 0.03086031973361969 },
   { 0.03254919871687889, 0.01862979494035244, 0.12126880884170532, -0.1552213579416275, 0.04813532531261444, -0.01995832286775112, 0.06790565699338913, -0.11543072015047073, 0.09628458321094513, 0.07057265937328339 },
   { -0.018519602715969086, -0.09080114215612411, 0.020984938368201256, -0.10602974146604538, 0.07939279824495316, -0.10732658207416534, 0.11510476469993591, -0.10118207335472107, 0.009882381185889244, -3.341484989505261e-05 },
   { 0.09428998082876205, -0.16547083854675293, 0.05644267424941063, 0.04913672059774399, 0.039877112954854965, -0.0967659130692482, 0.17289841175079346, 0.05764748528599739, -0.13374830782413483, 0.09823965281248093 },
   { 0.024904124438762665, -0.011075547896325588, -0.005783245898783207, 0.011106598190963268, 0.13678519427776337, -0.15430963039398193, 0.0881863459944725, 0.10437426716089249, -0.0969773456454277, 0.07259167730808258 },
   { 0.1394525170326233, -0.09547264873981476, 0.03327278420329094, -0.07695700973272324, -0.028870010748505592, -0.09593962877988815, 0.05496683716773987, 0.03086245432496071, -0.0176988672465086, 0.0002799495414365083 },
   { 0.033186908811330795, -0.21053464710712433, -0.004974681884050369, 0.0865572914481163, 0.0617280974984169, -0.0897451713681221, 0.05303005501627922, 0.10993169993162155, -0.01720144972205162, -0.041300348937511444 },
   { 0.02529795654118061, 0.1374095231294632, -0.12872807681560516, -0.0890592485666275, -0.06696230918169022, -0.1172536239027977, 0.09663482755422592, -0.16715207695960999, 0.04741448163986206, -0.06444288790225983 },
   { -0.04234053194522858, 0.12428848445415497, 0.2912527620792389, -0.18590719997882843, -0.06178438290953636, -0.21548500657081604, 0.19293291866779327, -0.1762564778327942, -0.23483456671237946, -0.22169946134090424 },
   { -0.015930337831377983, -0.027463335543870926, 0.12321817874908447, -0.05152183771133423, 0.06335020810365677, -0.07540139555931091, -0.2000970095396042, -0.1391490399837494, -0.14857132732868195, -0.07041890174150467 },
   { 0.0747203528881073, 0.03377848118543625, 0.10491771996021271, -0.15107344090938568, 0.06308147311210632, -0.08004791289567947, 0.029904598370194435, -0.06455373018980026, -0.022587867453694344, -0.043745581060647964 },
   { -0.04446016997098923, 0.015674324706196785, 0.11100775003433228, -0.09684586524963379, 0.12181754410266876, -0.03920234739780426, 0.017728274688124657, -0.13384191691875458, 0.11305946111679077, -0.03510446846485138 },
   { 0.040361057966947556, 0.12670353055000305, 0.1662934571504593, -0.1854594200849533, 0.05600714683532715, -0.2028384953737259, 0.04650195315480232, -0.14363858103752136, 0.07879139482975006, 0.061596956104040146 },
   { 0.0888185203075409, 0.0007852396811358631, 0.1461888700723648, -0.2597402334213257, -0.043029624968767166, -0.20835286378860474, 0.12321940809488297, -0.12035417556762695, 0.01957986317574978, -0.04011989384889603 },
   { 0.04626137390732765, 0.11094725131988525, 0.039823029190301895, -0.11902616918087006, 0.0224916934967041, -0.09413020312786102, 0.08984816819429398, 0.03206643834710121, -0.0529511459171772, -0.016035713255405426 },
   { 0.010254835709929466, -0.06055757403373718, 0.02016075700521469, -0.0643790066242218, 0.10469328612089157, -0.06851406395435333, 0.1794784516096115, -0.04420791193842888, 0.039113666862249374, 0.04822337627410889 },
   { 0.04102877154946327, -0.1307125687599182, 0.035577498376369476, 0.06751134246587753, 0.005182343535125256, -0.05140220373868942, 0.14580167829990387, 0.0067548928782343864, 0.04442627355456352, -0.04981458932161331 },
   { -0.03523743897676468, -0.03771553561091423, 0.008117546327412128, -0.015189089812338352, 0.15054218471050262, -0.0701129287481308, 0.08997943997383118, 0.05291871726512909, 0.0016831037355586886, -0.0918603390455246 },
   { 0.0005365539691410959, -0.11187772452831268, 0.10067099332809448, -0.06502214074134827, 0.11127863824367523, -0.08970358222723007, 0.023060543462634087, 0.16112147271633148, -0.030223485082387924, 0.0634680762887001 },
   { 0.11431048065423965, -0.17153124511241913, -0.13829390704631805, 0.049649678170681, 0.09665926545858383, -0.05473189428448677, 0.0006154024740681052, 0.1515614241361618, -0.01626887544989586, -0.06718175858259201 },
   { 0.0452757403254509, -0.13807593286037445, 0.0498616099357605, 0.06565562635660172, -0.09452900290489197, 0.053875118494033813, 0.164266437292099, -0.04465194419026375, 0.05059796944260597, -0.16597890853881836 },
   { 0.03485466539859772, 0.04567123204469681, 0.10996608436107635, -0.11339755356311798, -0.07457385957241058, -0.013218413107097149, 0.06337593495845795, -0.1227785125374794, -0.06683801114559174, -0.05871229246258736 },
   { -0.01446184329688549, 0.02377213165163994, 0.16089332103729248, -0.00013407066580839455, -0.012810882180929184, 0.028564579784870148, 0.04688873142004013, -0.22077563405036926, -0.12380947172641754, -0.24724924564361572 },
   { 0.05013197287917137, -0.0542004369199276, 0.22342036664485931, 0.052685678005218506, 0.07156744599342346, -0.0182664692401886, -0.08265837281942368, -0.30589529871940613, -0.13125424087047577, -0.19374589622020721 },
   { 0.10366256535053253, -0.04444299638271332, 0.2001439929008484, -0.009580870158970356, -0.045646436512470245, -0.009292311035096645, 0.025619985535740852, -0.06068621948361397, -0.032869428396224976, -0.020231684669852257 },
   { 0.04010087251663208, 0.06331443041563034, 0.04709203913807869, -0.009704328142106533, 0.05831655114889145, -0.09990282356739044, 0.027886366471648216, -0.13591033220291138, -0.022409256547689438, -0.08956947177648544 },
   { 0.032877787947654724, 0.02856813184916973, 0.08577810972929001, -0.036794062703847885, 0.044897034764289856, -0.06918277591466904, -0.05856937915086746, -0.002550092525780201, -0.009843106381595135, 0.06190112978219986 },
   { 0.1326836794614792, -0.024558482691645622, 0.1491159051656723, -0.032669227570295334, -0.03924471139907837, 0.04738989099860191, 0.10831339657306671, -0.09924574941396713, -0.0872882828116417, -0.036715392023324966 },
   { 0.049982864409685135, 0.022593596950173378, 0.09568309038877487, -0.042604316025972366, 0.05151716619729996, -0.06318198889493942, 0.10135992616415024, 0.02887321636080742, -0.13725213706493378, -0.013812320306897163 },
   { 0.10193556547164917, 0.04050818830728531, -0.006477633491158485, -0.025945385918021202, 0.018556324765086174, -0.025960752740502357, 0.1169811338186264, -0.09601005166769028, -0.04458360746502876, -0.056029096245765686 },
   { 0.09293802827596664, -0.006861344911158085, 0.06744435429573059, 0.052813220769166946, 0.02291123941540718, -0.04556702449917793, 0.19074642658233643, -0.01114541944116354, 0.038759928196668625, -0.05824245512485504 },
   { -0.061351511627435684, 0.05371321365237236, 0.02117820270359516, 0.07313590496778488, -0.06834079325199127, 0.10748771578073502, 0.05459680035710335, 0.007081263232976198, -0.06954375654459, -0.16708065569400787 },
   { -0.021913280710577965, -0.026853300631046295, -0.09594084322452545, 0.0427125059068203, 0.012925817631185055, 0.06298454850912094, 0.0964544489979744, -0.017904061824083328, -0.010515314526855946, -0.1417710930109024 },
   { 0.06030315160751343, 0.03886021301150322, 0.045174434781074524, 0.08848340809345245, -0.005095892120152712, 0.05281338468194008, 0.007218529935926199, -0.06789793819189072, -0.014027750119566917, -0.13033924996852875 },
   { 0.018520161509513855, 0.014337563887238503, -0.014219827018678188, 0.057274360209703445, 0.13299502432346344, -0.02710765041410923, -0.03218988701701164, -0.011471331119537354, 0.011768669821321964, -0.03243503347039223 },
   { 0.05193890631198883, 0.08022748678922653, 0.09347768872976303, -0.01064649224281311, -0.04921276867389679, -0.005515329074114561, -0.05846736580133438, -0.05806713178753853, 0.005705352872610092, 0.043316371738910675 },
   { 0.032974425703287125, -0.042309101670980453, 0.012864762917160988, -0.052925944328308105, -0.13999097049236298, 0.08895186334848404, -0.11124434322118759, -0.049227938055992126, 0.09648171812295914, -0.19709372520446777 },
   { -0.06747964769601822, 0.022367730736732483, 0.11348216235637665, 0.0550302192568779, 0.00993866752833128, 0.030771972611546516, -0.11549996584653854, -0.2209642231464386, -0.14632628858089447, -0.15235839784145355 },
   { -0.04263962060213089, 0.010328941978514194, 0.04551904648542404, 0.01199770625680685, -0.021829016506671906, 0.07256177812814713, -0.16712723672389984, 0.054565686732530594, 0.057015515863895416, -0.036392729729413986 },
   { 0.053523484617471695, 0.00907684676349163, 0.023254673928022385, 0.06223679333925247, 0.002750193467363715, -0.11082714796066284, -0.07848423719406128, 0.1088615283370018, -0.029101531952619553, -0.043390631675720215 },
   { -0.006115936208516359, 0.000764178519602865, -0.026369191706180573, 0.016561347991228104, -0.12052830308675766, -0.09900537133216858, 0.020233940333127975, 0.010650938376784325, 0.00012204744416521862, -0.014499548822641373 },
   { 0.08725684136152267, 0.07030545175075531, 0.0615362785756588, 0.032134633511304855, -0.09253261238336563, -0.004012248944491148, 0.05185537040233612, -0.06049622595310211, -0.043631039559841156, -0.14939959347248077 },
   { 0.008172580972313881, 0.14256857335567474, 0.05581817775964737, 0.04397394135594368, -0.03386232256889343, 0.12312807887792587, 0.05180477723479271, -0.033917948603630066, -0.01666910946369171, -0.06919673085212708 },
   { 0.03660043701529503, -0.014557254500687122, 0.025676652789115906, 0.04925739765167236, -0.050606656819581985, 0.04142419248819351, 0.06052513048052788, 0.022603223100304604, 0.02122311107814312, -0.03883405402302742 },
   { 0.11427266150712967, -0.020594902336597443, 0.005255936179310083, 0.005416580010205507, -0.13964341580867767, 0.08094421029090881, 0.1736833155155182, -0.03933396935462952, 0.016714978963136673, -0.15316598117351532 },
   { 0.06462378799915314, -0.006003688555210829, -0.0812520682811737, 0.0160388071089983, 0.0043610502034425735, -0.04451754689216614, 0.04475952312350273, 0.05168088898062706, 0.05804858356714249, -0.0825343057513237 },
   { -0.14844153821468353, 0.013012122362852097, -0.015887416899204254, 0.13592110574245453, -0.030269423499703407, 0.06747812032699585, 0.01397722214460373, -0.06790206581354141, -0.04813847318291664, -0.21649257838726044 },
   { -0.061329200863838196, 0.09773777425289154, -0.02612280286848545, 0.04089770093560219, -0.06633790582418442, 0.16327722370624542, -0.04559741169214249, -0.13048575818538666, 0.05024626478552818, -0.07119154930114746 },
   { 0.04842260107398033, 0.14127379655838013, 0.04419223964214325, -0.0272721815854311, 0.0443296879529953, 0.01522775087505579, -0.16147835552692413, -0.15610358119010925, -0.021261826157569885, -0.0550396665930748 },
   { -0.16164317727088928, 0.08027367293834686, 0.043936967849731445, 0.01794426515698433, 0.02917758747935295, 0.21125388145446777, -0.03806237503886223, -0.16342222690582275, -0.042984768748283386, -0.09644205123186111 },
   { -0.19215190410614014, 0.1306769847869873, -0.14457833766937256, 0.02410389482975006, -0.05898851528763771, -0.010777710936963558, 0.003421998117119074, -0.2207198143005371, 0.009272411465644836, 0.07031930983066559 },
   { -0.11911305040121078, -0.0565355010330677, -0.021681219339370728, -0.05691429600119591, -0.293486624956131, 0.12697529792785645, -0.05903678387403488, -0.043030817061662674, -0.08171283453702927, -0.19482755661010742 },
   { 0.2308523952960968, 0.05127429589629173, 0.05814896896481514, 0.0007468332187272608, -0.30338844656944275, -0.07266019284725189, -0.2445589154958725, 0.12151935696601868, -0.16383251547813416, -0.001333240419626236 },
   { -0.0003236925113014877, 0.05640091374516487, 0.06293495744466782, -0.020870789885520935, -0.06705285608768463, -0.21070550382137299, -0.11945405602455139, 0.04169800132513046, 0.10306112468242645, 0.023669201880693436 },
   { 0.06616795063018799, -0.005785205401480198, -0.044804658740758896, 0.0587792806327343, -0.0818939208984375, -0.08080864697694778, 0.025200512260198593, 0.05651772394776344, -0.011270709335803986, 0.01400819607079029 },
   { -0.06498171389102936, -0.04976649582386017, 0.06832785159349442, 0.03330506011843681, -0.05232033506035805, 0.038138482719659805, -0.01593400165438652, 0.06779371201992035, -0.0585474818944931, -0.03258083388209343 },
   { -0.06613685935735703, -0.05692436173558235, -0.0625552088022232, 0.07167873531579971, -0.14573124051094055, 0.09157586842775345, -0.001812279224395752, -0.01981578767299652, 0.045127078890800476, -0.0012424724409356713 },
   { 0.0216379351913929, -0.040526241064071655, -0.013375159353017807, 0.08595892786979675, -0.09272396564483643, 0.023200497031211853, 0.059804078191518784, 0.06665916740894318, 0.0039017742965370417, -0.05138010159134865 },
   { -0.0893976241350174, -0.023573119193315506, -0.07333462685346603, 0.05647754296660423, -0.11949457973241806, 0.0793251171708107, -0.02074643038213253, -0.03873174637556076, 0.0831306129693985, -0.12135476619005203 },
   { 0.005767380818724632, 0.03321080654859543, -0.1484735608100891, 0.00722562987357378, -0.06835157424211502, 0.09264890849590302, 0.012910948134958744, -0.04762750864028931, 0.07463975995779037, -0.11787939816713333 },
   { 0.04816649481654167, 0.1583411991596222, -0.14443179965019226, 0.10948338359594345, -0.16744142770767212, 0.007523918524384499, 0.0284471046179533, 0.06478206068277359, 0.044069427996873856, -0.09581656754016876 },
   { 0.026156216859817505, 0.07441921532154083, 0.09923722594976425, 0.022444507107138634, -0.1586293876171112, 0.11683689057826996, -0.022640636190772057, -0.04242268577218056, -0.011899907141923904, -0.05876282975077629 },
   { -0.11015134304761887, -0.005780801177024841, -0.09940727055072784, 0.050433460623025894, -0.04974056035280228, 0.10911522060632706, 0.010172982700169086, -0.07990133762359619, -0.016904182732105255, 0.055987343192100525 },
   { 0.013001608662307262, -0.09871821105480194, -0.14847703278064728, -0.069796122610569, 0.07322937250137329, 0.11406523734331131, -0.09920437633991241, -0.2815193235874176, 0.014849777333438396, 0.022055968642234802 },
   { -0.07398566603660583, -0.03245415538549423, -0.0190600398927927, -0.08648326247930527, -0.053070612251758575, 0.10194443166255951, -0.28276434540748596, -0.24572038650512695, -0.08360916376113892, 0.1270992010831833 },
   { -0.08436950296163559, -0.13183309137821198, -0.23021183907985687, 0.1528749167919159, -0.2849094271659851, -0.09885460138320923, 0.006286880001425743, 0.1336280107498169, -0.3180561661720276, 0.004679246339946985 },
   { -0.10373928397893906, -0.22913125157356262, -0.1547149270772934, 0.20552285015583038, -0.1816183626651764, -0.09397568553686142, -0.09741652011871338, -0.004720492288470268, -0.0408429317176342, 0.04027930647134781 },
   { -0.26047542691230774, 0.04735325649380684, -0.031296782195568085, 0.03630582615733147, -0.14072497189044952, -0.05917041376233101, -0.31832998991012573, 0.09429851919412613, -0.00015671770961489528, 0.04878246411681175 },
   { -0.09380161762237549, -0.041012685745954514, -0.06907399743795395, 0.2049315869808197, -0.10756805539131165, 0.034226760268211365, -0.2270290106534958, 0.11095285415649414, -0.0028715450316667557, 0.09378712624311447 },
   { -0.11330299079418182, -0.04123874381184578, -0.05140647664666176, 0.11469218879938126, -0.10689873993396759, -0.018931983038783073, -0.12403195351362228, -0.011690773069858551, 0.004203770775347948, -0.02892531082034111 },
   { -0.0576363280415535, -0.05449432507157326, 0.05300246179103851, 0.10954321175813675, 0.019252533093094826, -0.03012632578611374, -0.13637307286262512, 0.0018177174497395754, 0.1347431242465973, -0.10774009674787521 },
   { -0.23364432156085968, -0.04309498891234398, 0.07221418619155884, 0.03354363143444061, 0.016598712652921677, 0.022209784016013145, -0.15095648169517517, 0.03894036263227463, 0.020664794370532036, -0.015253731980919838 },
   { -0.10469228029251099, -0.04443517327308655, -0.05894480645656586, 0.013357100076973438, -0.10834768414497375, 0.18258027732372284, -0.2154691517353058, -0.09822707623243332, 0.13204947113990784, 0.03595932200551033 },
   { -0.1412658989429474, -0.027308356016874313, -0.0930100604891777, 0.08580895513296127, -0.08431178331375122, 0.03618492931127548, 0.01380892749875784, 0.018266797065734863, 0.1366039514541626, -0.05180506035685539 },
   { -0.18642468750476837, -0.13299453258514404, -0.07674693316221237, -0.018462015315890312, -0.0395197719335556, -0.012326263822615147, 0.03748026117682457, 0.06058616563677788, 0.05538574233651161, 0.027226462960243225 },
   { -0.20327547192573547, -0.06461053341627121, -0.03413566201925278, 0.09019778668880463, 0.02615375816822052, 0.03794834017753601, -0.11371726542711258, 0.04643555358052254, -0.012040680274367332, 0.09616544842720032 },
   { -0.3692740797996521, 0.04404584318399429, -0.2704850137233734, -0.07993148267269135, -0.12258034944534302, 0.14287446439266205, -0.09602813422679901, 0.066335029900074, -0.03161817789077759, 0.17960898578166962 },
   { -0.04995349049568176, -0.0656360611319542, -0.10253855586051941, -0.034929871559143066, 0.00854228064417839, 0.1466357558965683, -0.18023188412189484, -0.08133293688297272, -0.06700330227613449, 0.04861283302307129 },
   { -0.2229103296995163, -0.20656287670135498, 0.12700073421001434, -0.11034839600324631, -0.025026779621839523, 0.10816498845815659, -0.21735312044620514, -0.18465524911880493, -0.24841192364692688, 0.058838728815317154 },
   { -0.05245044082403183, 0.009695262648165226, -0.049125902354717255, 0.040343448519706726, -0.13994525372982025, 0.04254442825913429, -0.019505158066749573, -0.00816390011459589, 0.03532378003001213, 0.027870088815689087 },
   { -0.029512077569961548, -0.0767638310790062, -0.11031396687030792, 0.06339176744222641, -0.16765567660331726, -0.07389533519744873, 0.1133420392870903, -0.11072556674480438, -0.0016041784547269344, -0.02973148040473461 },
   { -0.10973246395587921, -0.23510676622390747, -0.015440726652741432, 0.14632496237754822, -0.22728650271892548, -0.1916433870792389, 0.24364906549453735, -0.25654739141464233, -0.010474556125700474, 0.0069532329216599464 },
   { 0.013975593261420727, -0.05604808032512665, 0.11358155310153961, 0.13785907626152039, -0.1612808257341385, -0.2658906877040863, 0.15576286613941193, -0.24058496952056885, -0.10230538994073868, -0.19464078545570374 },
   { -0.013877235352993011, -0.016989625990390778, 0.1561567187309265, -0.0965581089258194, -0.35712093114852905, -0.11411655694246292, 0.13914696872234344, -0.3655264973640442, -0.23673826456069946, -0.5603008270263672 },
   { -0.052435606718063354, -0.1344541758298874, 0.1681840866804123, 0.06544501334428787, -0.38917580246925354, -0.012485613115131855, 0.2180408239364624, -0.2167786806821823, -0.2761288583278656, -0.19150322675704956 },
   { -0.026282379403710365, -0.04011443629860878, -0.00493056233972311, 0.018329041078686714, -0.07812556624412537, 0.1583365648984909, 0.13205625116825104, -0.10841067880392075, -0.03757491707801819, -0.20059502124786377 },
   { -0.009996648877859116, 0.09781899303197861, -0.01399155706167221, 0.09547531604766846, -0.1492825299501419, 0.0024697738699615, 0.19553950428962708, -0.48611342906951904, -0.17443877458572388, -0.4298087954521179 },
   { 0.05611377954483032, -0.08912783116102219, -0.06820466369390488, -0.015887584537267685, -0.19258758425712585, 0.18356303870677948, 0.10361705720424652, -0.497191846370697, 0.15510009229183197, -0.4256882965564728 },
   { -0.21440544724464417, 0.06662660092115402, -0.32684722542762756, -0.11778070777654648, -0.20123769342899323, 0.22146821022033691, 0.3128466010093689, -0.2928990125656128, 0.04178339242935181, -0.16910049319267273 },
   { -0.13694718480110168, -0.14917625486850739, -0.2067515105009079, -0.39528003334999084, 0.0860186517238617, -0.04655105248093605, 0.33228692412376404, 0.02204924449324608, -0.044386282563209534, -0.22497786581516266 },
   { 0.01149987056851387, 0.014228695072233677, -0.10985784232616425, -0.3373546004295349, -0.0986848920583725, -0.06858335435390472, 0.018241534009575844, -0.22667068243026733, -0.0851040929555893, -0.21063004434108734 },
   { -0.024045884609222412, -0.13115809857845306, 0.05031644552946091, -0.1316307783126831, -0.07844967395067215, 0.029450858011841774, -0.15828152000904083, -0.12882404029369354, -0.07403632253408432, -0.009463300928473473 },
   { -0.0858246386051178, 0.030977247282862663, -0.05421197786927223, -0.08920294046401978, -0.03863434121012688, -0.1131371483206749, 0.03731155768036842, 0.012970514595508575, 0.051929574459791183, 0.025504132732748985 },
   { 0.03231865540146828, 0.01077033206820488, -0.14467845857143402, 0.05092354118824005, -0.025430286303162575, -0.03590083122253418, -0.0009788635652512312, 0.16305319964885712, -0.08017449826002121, -0.02716691978275776 },
   { -0.006088071968406439, -0.06819632649421692, -0.16438694298267365, 0.022675585001707077, -0.010538038797676563, -0.12179955095052719, 0.08938579261302948, 0.07782375812530518, -0.21734541654586792, -0.09171582013368607 },
   { -0.16082097589969635, 0.08923086524009705, -0.10665007680654526, 0.1014181450009346, -0.20829224586486816, -0.02203294448554516, 0.24504254758358002, 0.07220673561096191, -0.23081348836421967, -0.3986445367336273 },
   { -0.13290442526340485, 0.14402459561824799, -0.017223738133907318, 0.016993479803204536, 0.07798881083726883, -0.138376846909523, 0.08461041748523712, 0.00985603965818882, -0.11182257533073425, -0.2249128520488739 },
   { -0.03741995617747307, 0.11128602921962738, 0.030222704634070396, -0.006751366425305605, 0.06566163152456284, -0.04302823916077614, 0.13226662576198578, -0.19526249170303345, -0.029469799250364304, -0.21545007824897766 },
   { 0.03698251023888588, 0.10524267703294754, -0.044360026717185974, -0.09066372364759445, 0.15088589489459991, 0.011643688194453716, 0.11548374593257904, -0.06296627223491669, -0.12572132050991058, -0.12139704823493958 },
   { 0.039924830198287964, 0.12042369693517685, -0.14438796043395996, -0.11451098322868347, 0.3467184901237488, 0.12209199368953705, 0.18088190257549286, -0.0620071142911911, -0.041091468185186386, -0.2738521099090576 },
   { -0.004081603605300188, 0.2894887328147888, 0.01875516213476658, -0.11142488569021225, 0.28206560015678406, -0.0677565336227417, 0.04267850145697594, -0.3037424385547638, -0.13467568159103394, -0.4699569642543793 },
   { -0.012684613466262817, 0.20355111360549927, 0.12601414322853088, -0.006835561245679855, 0.138261616230011, -0.2239963412284851, -0.07882681488990784, -0.23986631631851196, 0.08429033309221268, -0.2601391077041626 },
   { -0.02939719520509243, 0.21668557822704315, -0.025317076593637466, -0.10448502749204636, 0.12877324223518372, -0.05600670725107193, -0.09045203030109406, -0.36661678552627563, -0.045855194330215454, -0.4241964519023895 },
   { 0.008743959479033947, 0.27437159419059753, -0.15562289953231812, 0.04153895378112793, 0.22107520699501038, -0.10398443788290024, -0.10796794295310974, -0.16705726087093353, 0.04357798397541046, -0.39241665601730347 },
   { -0.07228877395391464, 0.23722830414772034, -0.2182266265153885, -0.3856670558452606, 0.09748685359954834, -0.04331478849053383, 0.010904703289270401, -0.21557560563087463, 0.0229549128562212, -0.6420628428459167 },
   { -0.35397088527679443, -0.3878493905067444, 0.028922082856297493, -0.23834693431854248, -0.051286499947309494, 0.003588401945307851, 0.10529959946870804, -0.49686872959136963, 0.22923147678375244, -0.177886500954628 },
   { -0.07521532475948334, -0.0260874405503273, 0.09477618336677551, -0.13369569182395935, -0.13973304629325867, -0.0792088732123375, -0.06900633126497269, -0.049421656876802444, 0.12727411091327667, -0.06558982282876968 },
   { -0.12365766614675522, -0.16994357109069824, -0.021368497982621193, -0.08464264869689941, -0.04193513095378876, 0.04870544746518135, 0.05953630432486534, 0.09598825871944427, -0.14538797736167908, -0.12260696291923523 },
   { 0.005134389270097017, 0.13849520683288574, -0.006406223867088556, -0.0008650641539134085, 0.048301298171281815, -0.2931677997112274, 0.0322098471224308, 0.027322130277752876, 0.028365816920995712, -0.3351288139820099 },
   { -0.16654245555400848, 0.10755874961614609, -0.15921476483345032, 0.05325133726000786, 0.023189183324575424, -0.0488736592233181, 0.12179221212863922, 0.14706262946128845, -0.1266770213842392, -0.3604649007320404 },
   { -0.1848163902759552, 0.15912549197673798, -0.02032969705760479, 0.05322449281811714, 0.0810966044664383, -0.1888168752193451, 0.012212707661092281, 0.21272456645965576, -0.1762237250804901, -0.3005506694316864 },
   { -0.14249861240386963, 0.2225584238767624, -0.1277856081724167, 0.06236466392874718, 0.24301235377788544, -0.034454669803380966, 0.14691218733787537, 0.1369861364364624, -0.24871203303337097, -0.35383641719818115 },
   { -0.07352108508348465, 0.06364471465349197, -0.04039350152015686, 0.08958853781223297, 0.37571993470191956, -0.06334958970546722, 0.040499426424503326, 0.23169288039207458, -0.22989173233509064, -0.38278281688690186 },
   { -0.019889749586582184, 0.08843301236629486, -0.058190762996673584, 0.08427087217569351, 0.38899704813957214, -0.1481064260005951, -0.17116321623325348, 0.2040804922580719, -0.05199236422777176, -0.37037768959999084 },
   { -0.059384603053331375, 0.11205610632896423, 0.02706329897046089, 0.019138235598802567, 0.3859432637691498, -0.2754073441028595, -0.04027861729264259, 0.09739130735397339, -0.11333159357309341, -0.18192031979560852 },
   { -0.024849871173501015, 0.01819194108247757, 0.20096245408058167, 0.07144588977098465, 0.23092037439346313, -0.287372350692749, -0.1820446252822876, 0.04189037159085274, 0.04543621465563774, -0.12785494327545166 },
   { 0.1200438141822815, 0.0125866224989295, 0.12899251282215118, 0.024229785427451134, 0.23264573514461517, -0.24967063963413239, -0.15267209708690643, -0.16156348586082458, -0.028830984607338905, -0.082288958132267 },
   { 0.0674094557762146, -0.07331021130084991, 0.19759951531887054, -0.0109446095302701, 0.1454327255487442, -0.4142899215221405, -0.0905970111489296, -0.20353664457798004, 0.07286868989467621, -0.010759650729596615 },
   { 0.04951317608356476, -0.08337469398975372, 0.10084893554449081, 0.1358533650636673, 0.1654537320137024, -0.3780255913734436, 0.007805694825947285, -0.03183749318122864, 0.08978535979986191, -0.11325972527265549 },
   { -0.06078410521149635, -0.4034212827682495, 0.07714520394802094, -0.030302856117486954, 0.057029373943805695, -0.1409853845834732, 0.1475222110748291, -0.5688061714172363, 0.17701372504234314, -0.43530458211898804 },
   { -0.11578575521707535, -0.1633586585521698, -0.05150659754872322, -0.2769651710987091, -0.09503757953643799, 0.07509832084178925, -0.0009418412228114903, -0.24597276747226715, 0.03813207894563675, -0.1637561321258545 },
   { 0.013661938719451427, -0.1575317233800888, 0.20978085696697235, 0.018832040950655937, -0.08691632747650146, -0.032734863460063934, -0.056086935102939606, 0.11753955483436584, -0.10733698308467865, -0.25737154483795166 },
   { -0.07821393758058548, 0.08844421058893204, -0.07795999944210052, -0.15610994398593903, 0.0369718112051487, -0.22350524365901947, 0.043179307132959366, 0.07055993378162384, -0.16536769270896912, -0.23690515756607056 },
   { -0.21182696521282196, 0.10318958759307861, -0.014484497718513012, -0.02894018217921257, 0.15353035926818848, -0.26050055027008057, 0.06947636604309082, 0.24854516983032227, -0.1460532248020172, -0.4383963346481323 },
   { -0.09793959558010101, 0.16436059772968292, -0.21439696848392487, 0.03203975409269333, 0.29932400584220886, -0.06777921319007874, 0.014530856162309647, 0.27632737159729004, -0.07963553071022034, -0.5744783878326416 },
   { -0.06668049097061157, 0.26219528913497925, -0.15186330676078796, -0.12439297139644623, 0.3987690508365631, -0.006773631554096937, 0.042963702231645584, 0.32418763637542725, -0.13346272706985474, -0.7344268560409546 },
   { -0.1903882473707199, 0.1553567498922348, -0.025845294818282127, 0.061518486589193344, 0.43056708574295044, 0.025484150275588036, 0.02113403007388115, 0.15642765164375305, -0.14653827250003815, -0.6351673603057861 },
   { -0.08263901621103287, 0.11852114647626877, 0.08092652261257172, 0.05503444746136665, 0.3423103392124176, -0.208468496799469, -0.3146369457244873, 0.09866879880428314, -0.17512045800685883, -0.35338476300239563 },
   { -0.004035241901874542, 0.12645049393177032, 0.15025131404399872, 0.07026156038045883, 0.09526023268699646, -0.33352863788604736, -0.3165789246559143, 0.04635642468929291, -0.07782825827598572, 0.017221881076693535 },
   { 0.10560736805200577, -0.13018473982810974, 0.18947593867778778, 0.02569090761244297, 0.0042067584581673145, -0.32665160298347473, -0.24761569499969482, 0.055528365075588226, 0.06816569715738297, 0.04689282923936844 },
   { 0.10603191703557968, -0.14961206912994385, 0.05483107641339302, 0.017245134338736534, 0.057102270424366, -0.16017794609069824, -0.0714767798781395, -0.00410383939743042, 0.025964204221963882, 0.08360835164785385 },
   { 0.11417404562234879, -0.2803356349468231, 0.03887442871928215, 0.02629181556403637, -0.09329976886510849, -0.22798274457454681, -0.03786005824804306, -0.052934855222702026, 0.06078227981925011, 0.1007341593503952 },
   { 0.18282590806484222, -0.10175561904907227, 0.18543203175067902, 0.05230313539505005, -0.09467258304357529, -0.22661428153514862, -0.020379602909088135, -0.18642084300518036, 0.11280371993780136, 0.09635376930236816 },
   { 0.020477725192904472, -0.09104315936565399, -0.20287002623081207, -0.13106077909469604, 0.009735268540680408, -0.11858180165290833, 0.1050460934638977, -0.3606811761856079, 0.1699264645576477, 0.022197119891643524 },
   { -0.3162551522254944, -0.26281166076660156, -0.12026681751012802, -0.38821741938591003, -0.06407485902309418, 0.04584189131855965, 0.08256824314594269, -0.08889169991016388, -0.06046576797962189, -0.08808921277523041 },
   { 0.07434400916099548, -0.08040302246809006, 0.06750938296318054, 0.07620987296104431, -0.2526426911354065, -0.19566357135772705, -0.14247877895832062, 0.2824532091617584, -0.32402944564819336, -0.23916204273700714 },
   { 0.09964298456907272, 0.1354794204235077, 0.0959315076470375, -0.08082175999879837, -0.06802787631750107, -0.027593638747930527, -0.11647125333547592, 0.21020185947418213, -0.2224067598581314, -0.08937139809131622 },
   { -0.24860401451587677, 0.14009620249271393, -0.0480322539806366, -0.22806039452552795, 0.1524670124053955, -0.16062085330486298, -0.01650857739150524, 0.2794780433177948, -0.050221651792526245, -0.5608969926834106 },
   { -0.04012150689959526, 0.14164689183235168, -0.35405024886131287, -0.36314937472343445, 0.18340320885181427, 0.15992766618728638, -0.04549655690789223, 0.3220774829387665, -0.03175239637494087, -0.38046738505363464 },
   { -0.07658088207244873, 0.02631705440580845, -0.37360695004463196, -0.36092016100883484, 0.2562926411628723, 0.14550448954105377, -0.10989650338888168, 0.11627613753080368, 0.0014030329184606671, -0.364946186542511 },
   { -0.13659155368804932, 0.10714663565158844, -0.10302694886922836, -0.23937000334262848, 0.20408137142658234, 0.11939050257205963, -0.0996200293302536, 0.0813702866435051, -0.021216684952378273, -0.1942332684993744 },
   { 0.058839838951826096, 0.24451595544815063, 0.09676510095596313, -0.15400661528110504, -0.07574717700481415, -0.005801110062748194, -0.2719389796257019, -0.08474180847406387, 0.06158768758177757, 0.0038057705387473106 },
   { 0.09925027936697006, 0.08258499205112457, 0.1639828085899353, -0.13312360644340515, -0.13510695099830627, -0.23116418719291687, -0.3014855980873108, -0.022879883646965027, 0.035102102905511856, 0.19934819638729095 },
   { 0.24224093556404114, -0.08216895163059235, 0.18031193315982819, -0.10843048989772797, 0.052045539021492004, -0.23752789199352264, -0.2964077293872833, 0.10585896670818329, 0.02371133118867874, 0.06794939935207367 },
   { 0.23072977364063263, -0.12456023693084717, 0.07834075391292572, -0.05126660689711571, -0.08715752512216568, -0.1061660498380661, -0.14688721299171448, -0.006159901153296232, 0.0918671116232872, -0.006956526543945074 },
   { 0.153220072388649, -0.2676129639148712, 0.15252935886383057, -0.09698463976383209, -0.049720972776412964, -0.10891059786081314, -0.0021536708809435368, -0.028917239978909492, -0.02955855056643486, 0.03239068388938904 },
   { 0.21061602234840393, -0.021706542000174522, 0.0003834636299870908, 0.03780456259846687, -0.2189141809940338, -0.192180797457695, 0.033199798315763474, -0.1977704018354416, 0.07592093199491501, 0.02092725783586502 },
   { 0.018529916182160378, 0.014639993198215961, -0.11478389799594879, -0.05882473289966583, 0.012367346324026585, -0.020310616120696068, 0.06078099086880684, -0.18997310101985931, 0.04483715072274208, 0.025353210046887398 },
   { -0.32061877846717834, -0.2357935607433319, 0.028810128569602966, -0.0245326217263937, -0.013454312458634377, 0.18332338333129883, 0.04658534750342369, -0.275499552488327, 0.019549662247300148, -0.21370583772659302 },
   { 0.0769798532128334, 0.06541647762060165, -0.09816359728574753, 0.022221161052584648, -0.1439490169286728, -0.1029614582657814, -0.07095993310213089, 0.2847301959991455, -0.21428020298480988, -0.17016422748565674 },
   { -0.005400159861892462, 0.03995193913578987, -0.04999703913927078, -0.005886259023100138, -0.1209409162402153, -0.041960157454013824, -0.19787301123142242, 0.11220385134220123, -0.0828847587108612, -0.1363382488489151 },
   { -0.24969039857387543, 0.15179531276226044, -0.024260058999061584, -0.04332304745912552, 0.015138667076826096, 0.13917919993400574, 0.16921289265155792, 0.009547831490635872, 0.15338177978992462, -0.10537814348936081 },
   { -0.03227383643388748, -0.125771626830101, -0.12218409031629562, -0.3870652914047241, 0.13568194210529327, 0.062447547912597656, 0.07524970918893814, -0.11601939797401428, 0.09106533229351044, 0.07873205095529556 },
   { 0.08266549557447433, -0.4153594672679901, -0.23885028064250946, -0.4363522231578827, 0.19414079189300537, 0.1813841313123703, -0.11117500066757202, -0.08575212210416794, 0.09321261942386627, 0.04972856491804123 },
   { 0.11578105390071869, -0.0017908234149217606, -0.03244418650865555, -0.368941992521286, 0.1966516226530075, 0.10683748126029968, 0.0036098798736929893, 0.03229827806353569, 0.14032895863056183, 0.09168247878551483 },
   { 0.13907881081104279, 0.13116572797298431, 0.043438419699668884, -0.25032123923301697, -0.0004469338455237448, -0.012609569355845451, -0.15360595285892487, -0.09493901580572128, 0.1608467847108841, 2.164110992453061e-05 },
   { 0.030537335202097893, 0.0651174858212471, 0.007187605835497379, -0.16791598498821259, -0.07919485121965408, -0.18238846957683563, -0.2064920961856842, 0.11920106410980225, 0.03966476395726204, 0.09221063554286957 },
   { 0.2614731192588806, 0.10200931131839752, 0.08209718018770218, -0.0803365707397461, 0.08089148253202438, -0.19016486406326294, -0.279694527387619, 0.09195128828287125, -0.1320997029542923, 0.05506281554698944 },
   { 0.17555299401283264, -0.007704475894570351, 0.08027921617031097, -0.023459360003471375, 0.0022003185003995895, -0.025878094136714935, -0.1930338740348816, -0.03187381103634834, -0.06776358187198639, 0.027127813547849655 },
   { 0.15352356433868408, -0.20191921293735504, 0.0902634933590889, -0.09832838922739029, -0.035323791205883026, -0.23113645613193512, -0.012042557820677757, 0.021826419979333878, -0.09630285948514938, 0.030315227806568146 },
   { 0.1996501088142395, 0.15248934924602509, -0.0862678810954094, -0.01085658185184002, -0.15674477815628052, -0.09700135886669159, 0.10300406068563461, 0.00865885429084301, -0.0037414112593978643, -0.012119235470890999 },
   { 0.067806176841259, 0.10388746112585068, -0.06567157059907913, 0.08977816253900528, -0.1945561021566391, -0.03074636682868004, 0.01759679988026619, -0.08882808685302734, 0.14820735156536102, 0.023639876395463943 },
   { -0.27304431796073914, -0.09562770277261734, -0.3355649709701538, -0.11628204584121704, 0.03373117372393608, 0.2594265639781952, -0.1318526268005371, -0.12849339842796326, 0.05175342783331871, -0.0701693594455719 },
   { 0.0029234851244837046, -0.01143453735858202, 0.020862186327576637, 0.20886638760566711, -0.031070029363036156, -0.13105081021785736, -0.1212746724486351, 0.09105078130960464, -0.2686604857444763, -0.10538031905889511 },
   { -0.08488251268863678, 0.2138506919145584, 0.027310460805892944, 0.259480744600296, -0.11663597077131271, 0.15050449967384338, -0.31118258833885193, -0.1473272293806076, -0.28138071298599243, 0.03922690078616142 },
   { -0.10213959962129593, 0.15683066844940186, -0.1892339438199997, -0.09924613684415817, 0.0129869868978858, 0.15906111896038055, 0.12725457549095154, -0.27622202038764954, 0.11078993231058121, 0.1683720201253891 },
   { 0.008032921701669693, -0.15671084821224213, -0.22348268330097198, -0.3603373169898987, 0.08016689121723175, 0.08036565035581589, 0.09399472177028656, -0.17072586715221405, 0.09843721240758896, 0.23227526247501373 },
   { 0.060702480375766754, -0.3517426550388336, -0.3147740960121155, -0.28779709339141846, 0.14270974695682526, 0.20883862674236298, 0.038461409509181976, -0.1792694628238678, 0.1466379165649414, 0.06737246364355087 },
   { 0.17196393013000488, -0.29121634364128113, -0.3099805414676666, -0.40122896432876587, -0.04278051108121872, 0.17482979595661163, -0.05532721057534218, 0.12293307483196259, 0.1495712697505951, 0.05020585656166077 },
   { 0.23570647835731506, 0.1309003084897995, -0.04580453783273697, -0.1790866106748581, -0.041590794920921326, 0.1545836627483368, -0.029482882469892502, 0.020002949982881546, 0.09933900833129883, -0.15844950079917908 },
   { -0.0797436386346817, 0.04740509018301964, -0.06255492568016052, -0.10609861463308334, -0.08369045704603195, 0.03212783858180046, -0.02831031195819378, -0.029854848980903625, 0.07938513904809952, 0.02234409563243389 },
   { -0.01436998974531889, 0.0940811038017273, -0.07005275040864944, -0.026541300117969513, 0.16076116263866425, 0.05838954821228981, -0.15558242797851562, 0.07845354080200195, -0.20719654858112335, 0.11105715483427048 },
   { 0.024023782461881638, 0.0036357601638883352, -0.1024298444390297, -0.03561311960220337, -0.02138296701014042, 0.10580270737409592, -0.0415368489921093, -0.016909930855035782, -0.02270800620317459, 0.04995083436369896 },
   { 0.05458163097500801, 0.057104893028736115, -0.10160114616155624, -0.010039820335805416, 0.0867059975862503, -0.0036750941071659327, 0.0010998367797583342, 0.015028724446892738, -0.03685822710394859, 0.08243300765752792 },
   { 0.15099084377288818, 0.06055712699890137, -0.2041889727115631, -0.047438930720090866, -0.11707139760255814, -0.043086517602205276, 0.059990327805280685, -0.08655045926570892, -0.03927413001656532, 0.014948025345802307 },
   { 0.08070942014455795, -0.01779395155608654, -0.18756772577762604, 0.04133031889796257, -0.18597526848316193, 0.015047306194901466, 0.15771199762821198, -0.11224515736103058, 0.23087534308433533, -0.05966103821992874 },
   { -0.20627908408641815, 0.002496879082173109, 0.08799177408218384, -0.053408559411764145, -0.029208440333604813, 0.08299015462398529, -0.3095743656158447, -0.14783816039562225, 0.051090504974126816, -0.015843896195292473 },
   { -0.14978159964084625, -0.037779856473207474, -0.007412026636302471, 0.20668666064739227, -0.1162153035402298, -0.08851789683103561, -0.1030205488204956, -0.021640852093696594, -0.09910009801387787, -0.10350662469863892 },
   { -0.09168023616075516, 0.004413637798279524, -0.19653810560703278, 0.28176149725914, -0.27166667580604553, 0.15528413653373718, -0.1535118967294693, -0.30784302949905396, -0.34423503279685974, 0.05360253155231476 },
   { -0.03342380374670029, 0.03442167863249779, -0.42416471242904663, -0.07828821241855621, -0.04355807974934578, 0.2686007022857666, 0.20141679048538208, -0.14720019698143005, -0.26029008626937866, 0.17543122172355652 },
   { 0.05886104330420494, -0.09848528355360031, -0.5785465836524963, 0.07191333919763565, 0.12602445483207703, 0.14001309871673584, 0.1424795389175415, -0.05640113726258278, -0.07682166993618011, 0.06010616943240166 },
   { 0.11648812144994736, -0.2660476565361023, -0.5414189100265503, -0.042562395334243774, 0.11024714261293411, 0.005558335222303867, 0.02269066497683525, -0.03623868525028229, 0.1598515659570694, 0.1179823949933052 },
   { 0.06912823766469955, -0.05356442555785179, -0.30698081851005554, -0.20141080021858215, -0.07398638874292374, 0.0637778490781784, 0.15197007358074188, -0.057913847267627716, 0.08559054881334305, -0.008094155229628086 },
   { -0.01891564019024372, 0.04147087037563324, -0.16494087874889374, -0.11690599471330643, 0.006772015709429979, 0.13425995409488678, -0.0420917347073555, -0.20519711077213287, 0.03596872091293335, -0.1244763731956482 },
   { -0.06336034089326859, 0.08281180262565613, -0.23116904497146606, 0.08000058680772781, -0.09416784346103668, 0.08096898347139359, -0.08354903757572174, -0.18647953867912292, 0.045700766146183014, 0.08294922858476639 },
   { -0.022591643035411835, -0.03493865579366684, -0.32879480719566345, 0.05736054107546806, -0.009148933924734592, 0.07793021202087402, -0.04574079439043999, -0.1917993277311325, 0.0666545033454895, 0.12154822051525116 },
   { -0.029505664482712746, 0.039281707257032394, -0.18064115941524506, 0.020323986187577248, -0.08770302683115005, 0.08883693814277649, 0.029861299321055412, -0.21894338726997375, 0.005859617609530687, 0.046160969883203506 },
   { -0.08975321799516678, -0.10857084393501282, -0.1248752623796463, 0.08113429695367813, 0.05969894677400589, 0.11333146691322327, 0.03424903750419617, -0.08683145046234131, 0.006108409725129604, 0.06531082838773727 },
   { 0.00982199888676405, 0.03806494548916817, -0.32720690965652466, 0.076154924929142, 0.0010240953415632248, -0.06722155958414078, -0.04489150643348694, -0.06535220891237259, -0.03518863394856453, 0.0021360355895012617 },
   { 0.0189372431486845, 0.03800365328788757, -0.15221162140369415, 0.03257124498486519, -0.07465294003486633, -0.1457386314868927, 0.12040336430072784, -0.2807564437389374, 0.12566691637039185, -0.09861350804567337 },
   { -0.042374543845653534, 0.07024455815553665, 0.2711837887763977, -0.28486233949661255, -0.05617339909076691, -0.28200334310531616, 0.08605357259511948, -0.22212451696395874, 0.13747313618659973, -0.13612589240074158 },
   { 0.0956793799996376, -0.07016180455684662, -0.05806220322847366, -0.07209561765193939, -0.2635732591152191, 0.15053054690361023, -0.04528217017650604, 0.10777164995670319, -0.10386955738067627, -0.169246643781662 },
   { -0.2208065539598465, -0.09353458881378174, -0.24520058929920197, 0.33041810989379883, -0.41717255115509033, 0.1180889755487442, -0.07674770057201385, -0.2864137291908264, -0.4571233093738556, -0.06398665904998779 },
   { 0.11115436255931854, -0.2707288861274719, -0.22759798169136047, 0.11638456583023071, -0.1588398516178131, 0.11444146931171417, 0.2542361915111542, -0.1669391691684723, -0.6255519986152649, 0.14719516038894653 },
   { 0.09477965533733368, -0.22651471197605133, -0.2847842872142792, 0.12912246584892273, -0.051363587379455566, -0.04466680437326431, 0.1757008582353592, 0.0006139222532510757, -0.4815800189971924, 0.08510613441467285 },
   { 0.07833916693925858, 0.020566418766975403, -0.25851550698280334, 0.04353220388293266, 0.07591962069272995, -0.05696144327521324, 0.12341669201850891, 0.02382143773138523, -0.13059258460998535, 0.00804419256746769 },
   { 0.08483269810676575, -0.11705613136291504, -0.16872923076152802, -0.19600503146648407, -0.0893617644906044, -0.01759972982108593, 0.10796172171831131, 0.012040181085467339, -0.017833223566412926, -0.11381081491708755 },
   { 0.10349759459495544, -0.11748306453227997, -0.042215149849653244, 0.04703609272837639, -0.12962499260902405, 0.055296335369348526, 0.15049852430820465, -0.193411722779274, 0.04906155541539192, -0.21521706879138947 },
   { -0.3858475685119629, 0.15862584114074707, -0.16940931975841522, 0.12360449135303497, -0.13528089225292206, 0.19623690843582153, -0.006350666284561157, -0.1186666265130043, 0.17784221470355988, -0.05589023232460022 },
   { -0.18218274414539337, 0.030040539801120758, -0.15200680494308472, 0.03987039625644684, 0.023968923836946487, 0.06300903111696243, 0.11246570199728012, -0.14595380425453186, 0.09997602552175522, 0.11975602060556412 },
   { -0.0531047098338604, -0.1042112484574318, -0.10534322261810303, 0.04891157150268555, 0.02096078172326088, 0.0815022736787796, 0.03197361156344414, -0.15944615006446838, 0.0927606001496315, 0.0514313206076622 },
   { 0.019423026591539383, -0.19466963410377502, -0.11584309488534927, -0.03231231868267059, 0.06272964924573898, 0.02570021152496338, 0.004344576504081488, 0.017203908413648605, 0.03809262439608574, 0.01694575883448124 },
   { 0.0823139101266861, -0.025329269468784332, -0.17368464171886444, -0.024703605100512505, -0.03899508714675903, -0.026740767061710358, 0.1136951893568039, -0.10674498975276947, 0.10039287805557251, -0.09791278839111328 },
   { -0.013612856157124043, 0.12079349160194397, -0.024751458317041397, -0.020855814218521118, -0.045136477798223495, 0.04544377699494362, 0.03153524175286293, -0.1117190346121788, 0.021582266315817833, -0.0378546416759491 },
   { -0.04940573126077652, 0.08121735602617264, 0.24990230798721313, -0.16808314621448517, -0.12737852334976196, -0.28053441643714905, 0.19312253594398499, -0.11019252240657806, 0.02779298834502697, -0.3598955571651459 },
   { 0.06962709873914719, 0.0705546885728836, -0.22059044241905212, 0.01936889998614788, -0.271389365196228, 0.07038307189941406, -0.11911213397979736, 0.022718045860528946, -0.20066581666469574, -0.036381471902132034 },
   { -0.07161063700914383, 0.10975179821252823, -0.03941309079527855, 0.23333989083766937, -0.267650842666626, 0.09389319270849228, -0.029097190126776695, -0.16270712018013, -0.46794599294662476, -0.3406461775302887 },
   { 0.05449734628200531, -0.1990298479795456, -0.10675296187400818, 0.00506982859224081, -0.1321529746055603, -0.10545184463262558, 0.0118641322478652, -0.006965231150388718, -0.08059906959533691, -0.04072104021906853 },
   { 0.07351372390985489, -0.18233650922775269, -0.054854411631822586, -0.029143625870347023, -0.23165354132652283, -0.1522895097732544, 0.209912970662117, 0.017349986359477043, -0.1642502248287201, 0.02568073384463787 },
   { -0.011347332037985325, -0.11506453901529312, 0.0015838223043829203, -0.10374544560909271, -0.10932894051074982, -0.15803787112236023, 0.155491903424263, 0.11989935487508774, 0.024810587987303734, -0.03897752985358238 },
   { 0.16157886385917664, -0.049117010086774826, -0.0264524407684803, -0.12135312706232071, -0.1581680327653885, -0.08743146061897278, 0.10785184055566788, 0.012318741530179977, 0.03617923706769943, -0.1782529056072235 },
   { 0.11134302616119385, 0.028645042330026627, -0.08554860949516296, 0.10338384658098221, -0.1421332061290741, -0.09231031686067581, 0.0823144018650055, -0.14024150371551514, 0.009212177246809006, -0.2428656816482544 },
   { -0.35562384128570557, 0.06372173130512238, 0.005019789561629295, 0.07700511813163757, 0.014590430073440075, -0.11592929810285568, 0.04553248733282089, -0.07716549932956696, 0.12261206656694412, -0.004024636931717396 },
   { -0.0089580612257123, -0.044907595962285995, -0.03498813509941101, -0.049541737884283066, 0.020809903740882874, 0.0456734299659729, -0.08404579013586044, -0.07507312297821045, 0.15826614201068878, -0.001629938487894833 },
   { 0.04193216189742088, -0.11763021349906921, -0.08139506727457047, 0.10873542726039886, -0.03869511932134628, -0.014580652117729187, -0.015222272835671902, -0.0032265472691506147, 0.09171681851148605, 0.04072434455156326 },
   { 0.023790376260876656, 0.09275177866220474, -0.1166645884513855, 0.0007257757824845612, -0.07096251100301743, 0.003732062177732587, 0.05644555762410164, -0.030885323882102966, 0.017281536012887955, 0.021132061257958412 },
   { -0.028871413320302963, 0.10625801980495453, 0.021970227360725403, 0.01075503509491682, -0.02597019635140896, -0.04195752739906311, 0.08494789898395538, -0.03755848482251167, -0.03283118084073067, -0.0075757307931780815 },
   { -0.0630374625325203, -0.10571734607219696, -0.01754003018140793, 0.021754778921604156, -0.11621269583702087, 0.024189693853259087, 0.08776125311851501, -0.08178144693374634, -0.04665011167526245, 0.027544083073735237 },
   { -0.028379041701555252, 0.007818762212991714, 0.16242273151874542, -0.0112785454839468, -0.04175114631652832, -0.0160624198615551, -0.0012754264753311872, -0.20748139917850494, -0.12823866307735443, -0.3399791717529297 },
   { 0.03147903084754944, 0.04811489209532738, -0.1463230699300766, 0.11837568879127502, -0.016050968319177628, 0.010350465774536133, -0.037872329354286194, -0.15227866172790527, -0.19782668352127075, -0.1884719580411911 },
   { 0.05586647614836693, -0.0869201123714447, -0.09503186494112015, 0.20286686718463898, -0.2263774275779724, 0.09542875736951828, -0.06979052722454071, -0.2169078141450882, -0.25559547543525696, -0.19473181664943695 },
   { 0.23931321501731873, -0.26323747634887695, -0.03400307893753052, 0.045478012412786484, -0.1951802372932434, -0.02384394407272339, 0.010627412237226963, -0.12469562143087387, 0.0657990574836731, -0.046626120805740356 },
   { 0.14992454648017883, -0.26355797052383423, -0.014336629770696163, -0.05726831778883934, -0.1010638177394867, -0.11530754715204239, 0.13413198292255402, -0.0954759269952774, 0.3448779582977295, -0.11673369258642197 },
   { 0.15458464622497559, -0.09199690818786621, 0.13478535413742065, -0.09657285362482071, -0.28657451272010803, -0.10675973445177078, 0.12622663378715515, -0.2616778612136841, 0.2561236619949341, -0.168158620595932 },
   { 0.13686732947826385, 0.07647426426410675, 0.06585501879453659, -0.10104336589574814, -0.11380276083946228, -0.17710506916046143, 0.051656030118465424, -0.018931126222014427, 0.07414030283689499, -0.1589997559785843 },
   { 0.0925927683711052, 0.1790297031402588, 0.14304876327514648, -0.25246289372444153, -0.1600388139486313, -0.14803293347358704, 0.1798388510942459, 0.05199181288480759, 0.014167164452373981, -0.06604687124490738 },
   { -0.11880077421665192, 0.1662711203098297, -0.051347918808460236, -0.15758349001407623, 0.06141111999750137, -0.11411215364933014, 0.024867525324225426, -0.014198875986039639, 0.029636608436703682, -0.0038708881475031376 },
   { -0.07458242774009705, -0.010949108749628067, -0.03274774178862572, -0.04532419145107269, 0.0620565302670002, -0.04653138667345047, 0.0429532416164875, -0.029223529621958733, -0.09250550717115402, -0.026733122766017914 },
   { -0.07034502178430557, 0.07481051981449127, 0.08950736373662949, 0.10974371433258057, 0.026161760091781616, -0.05532655864953995, 0.04500231519341469, -0.06610514223575592, 0.0038870207499712706, -0.04576527699828148 },
   { 0.014275956898927689, 0.15024179220199585, 0.11180441826581955, 0.0036548245698213577, -0.016001904383301735, -0.0235726498067379, -0.06329914927482605, -0.09326246380805969, -0.004620904568582773, -0.03239484876394272 },
   { -0.07629483938217163, 0.13363197445869446, 0.027289673686027527, -0.029851587489247322, -0.02105911448597908, 0.03271956369280815, -0.09217406809329987, -0.24538034200668335, -0.08087603002786636, -0.11520650237798691 },
   { -0.1443459540605545, 0.17427925765514374, 0.030902855098247528, 0.018658047541975975, 0.006703596096485853, 0.029126496985554695, -0.07294300198554993, -0.2731286287307739, -0.004178408998996019, 0.1209024116396904 },
   { 0.04312044382095337, 0.0715663731098175, -0.08658670634031296, -0.06978735327720642, -0.023955659940838814, 0.004757774528115988, 0.08022432774305344, -0.011059808544814587, -0.07551303505897522, -0.1806846708059311 },
   { -0.02378801256418228, 0.10762286186218262, -0.07928261160850525, 0.1757747232913971, -0.04501970112323761, -0.009426833130419254, -0.023608408868312836, -0.004345981869846582, -0.14015479385852814, -0.15330348908901215 },
   { 0.10300347954034805, -0.04971638321876526, -0.14024807512760162, 0.17316021025180817, -0.01806490495800972, -0.0895361453294754, -0.11279501020908356, -0.15604659914970398, -0.24405676126480103, -0.20262211561203003 },
   { 0.03275400400161743, -0.12792158126831055, 0.007358793169260025, 0.25280362367630005, -0.17149342596530914, -0.10716840624809265, -0.09429457038640976, -0.2506994903087616, 0.07970968633890152, -0.16892164945602417 },
   { 0.12057772278785706, 0.16345493495464325, 0.14779594540596008, -0.10186684131622314, -0.027536073699593544, -0.2402345836162567, -0.2658139169216156, -0.07311835885047913, 0.1892257034778595, -0.28163236379623413 },
   { 0.26077181100845337, 0.2611754238605499, 0.11675673723220825, -0.22251883149147034, 0.006342131178826094, -0.15246467292308807, -0.051524315029382706, 0.07559909671545029, 0.09647383540868759, -0.2697076201438904 },
   { 0.054331086575984955, 0.3017049729824066, 0.08528903871774673, -0.36535370349884033, 0.052909959107637405, -0.2092110961675644, 0.08727117627859116, 0.16380810737609863, 0.029095102101564407, -0.12282299995422363 },
   { 0.0011598734417930245, 0.1932096630334854, 0.0293160080909729, -0.28229936957359314, 0.20385119318962097, -0.12700490653514862, 0.026808016002178192, 0.17630916833877563, 0.0012377438833937049, 0.06340368092060089 },
   { -0.05055888369679451, 0.031267281621694565, -0.032853737473487854, -0.18218420445919037, 0.2197006493806839, -0.09167065471410751, 0.15907014906406403, 0.07869494706392288, -0.1313411295413971, -0.06164383143186569 },
   { -0.11210016906261444, -0.097833052277565, 0.04128292202949524, -0.14447630941867828, 0.10377410054206848, -0.0035965871065855026, 0.11503924429416656, 0.017713546752929688, -0.15290836989879608, -0.036260347813367844 },
   { -0.10976096242666245, 0.2019050270318985, 0.132820263504982, 0.04493360593914986, 0.021786851808428764, 0.017985591664910316, -0.07106263190507889, -0.022837327793240547, -0.062037426978349686, -0.026828289031982422 },
   { -0.07164977490901947, 0.25333258509635925, 0.12531203031539917, -0.059276171028614044, 0.029039204120635986, -0.14168180525302887, -0.023087136447429657, -0.13560456037521362, -0.03137074410915375, 0.0010996926575899124 },
   { 0.02159573696553707, 0.09948601573705673, -0.0632571280002594, -0.003605546662583947, 0.00013613098417408764, 0.05118715763092041, -0.13178116083145142, -0.08353591710329056, -0.05310182645916939, 0.03339862823486328 },
   { -0.0891219899058342, 0.023691900074481964, 0.04850363731384277, -0.11796300113201141, -0.016844112426042557, 0.060509245842695236, -0.1267203837633133, -0.287395179271698, -0.028390293940901756, 0.016876669600605965 },
   { -0.20264627039432526, 0.17058292031288147, 0.0699174776673317, -0.11268702894449234, -0.22556088864803314, 0.02553664520382881, -0.03595491498708725, -0.21400193870067596, -0.06128440052270889, 0.22443191707134247 },
   { 0.03208333998918533, 0.016388047486543655, -0.04099186882376671, 0.007176848594099283, 0.012866311706602573, 0.005619620904326439, 0.057398416101932526, -0.1104251816868782, -0.075827956199646, -0.0017554194200783968 },
   { 0.057597070932388306, 0.003999533597379923, 0.05651797726750374, -0.06773775070905685, 0.026397809386253357, 0.01735510863363743, 0.06364303827285767, -0.008208869025111198, -0.042680997401475906, -0.060302793979644775 },
   { -0.07518014311790466, -0.017201894894242287, 0.17830301821231842, -0.005399107933044434, -0.3243134319782257, -0.1539609730243683, -0.09434613585472107, -0.11919765919446945, 0.053041256964206696, -0.05579453706741333 },
   { -0.08834465593099594, 0.15880972146987915, -0.05250263214111328, -0.25928953289985657, 0.13982394337654114, -0.35700973868370056, -0.14052143692970276, 0.32250237464904785, -0.15375585854053497, 0.09644737839698792 },
   { 0.1094842255115509, 0.36508867144584656, -0.15449579060077667, -0.16873978078365326, 0.06914860755205154, -0.25993210077285767, -0.30591243505477905, 0.3621431291103363, -0.24250678718090057, 0.1747831553220749 },
   { -0.01445777341723442, 0.21340705454349518, -0.1867622435092926, -0.19789771735668182, 0.21085864305496216, -0.23979467153549194, 0.09836679697036743, 0.21743810176849365, -0.07308438420295715, 0.12853239476680756 },
   { -0.24422265589237213, 0.022110240533947945, -0.31315067410469055, -0.1973414421081543, 0.260846883058548, -0.164039745926857, -0.10710843652486801, 0.2271217405796051, -0.02268695831298828, 0.053854674100875854 },
   { -0.24733823537826538, 0.0133855901658535, -0.20663300156593323, -0.06933459639549255, 0.19442184269428253, -0.06045297160744667, -0.04450790211558342, 0.22860251367092133, 0.033321186900138855, 0.07421503961086273 },
   { -0.197976216673851, 0.08728192001581192, -0.07948239892721176, -0.1293540894985199, 0.054922521114349365, -0.049225322902202606, 0.0406033955514431, 0.09221188724040985, -0.06397107988595963, 0.11737547069787979 },
   { -0.17555001378059387, 0.048712316900491714, 0.025341304019093513, -0.018930500373244286, -0.01860189624130726, -0.0449964813888073, 0.003598993644118309, 0.05132120102643967, -0.10788771510124207, -0.013753819279372692 },
   { -0.24603529274463654, 0.20527204871177673, 0.006173884030431509, -0.07508101314306259, -0.02046121470630169, 0.05384170636534691, 0.03771127760410309, -0.05823744833469391, -0.06311652064323425, 0.1620572805404663 },
   { -0.0885629653930664, 0.08331915736198425, -0.1389613002538681, -0.10231194645166397, 0.13906876742839813, 0.10197268426418304, -0.027350421994924545, -0.06772704422473907, -0.012118775397539139, 0.05547867715358734 },
   { -0.10324964672327042, -0.1667914092540741, -0.04840681701898575, -0.23267537355422974, 0.03510531410574913, 0.2874079942703247, -0.20444215834140778, -0.23874036967754364, -0.12606190145015717, 0.024819735437631607 },
   { -0.16600796580314636, 0.07830649614334106, -0.003805543063208461, -0.08479306846857071, 0.06085710600018501, 0.0762520506978035, -0.20309779047966003, -0.1835290491580963, -0.20292067527770996, 0.1267833560705185 },
   { -0.07822948694229126, 0.011359122581779957, -0.04751237481832504, -0.005743292160332203, -0.09951265901327133, -0.01405640970915556, 0.08966675400733948, 0.07853106409311295, 0.04639396443963051, 0.02875002659857273 },
   { -0.02648688666522503, -0.06733772903680801, -0.04278670996427536, 0.0027417342644184828, -0.09912233799695969, 0.0477253682911396, 0.035069745033979416, 0.042464617639780045, 0.04538196697831154, -0.017837651073932648 },
   { -0.09218845516443253, -0.08593224734067917, -0.02894129976630211, -0.17597632110118866, -0.17195966839790344, -0.05121355503797531, 0.015817346051335335, 0.23734423518180847, -0.2488512396812439, -0.02678571827709675 },
   { -0.28807270526885986, 0.00976203940808773, -0.22682558000087738, -0.1475638449192047, 0.008997004479169846, -0.26092955470085144, -0.16527332365512848, 0.24464935064315796, -0.4035080671310425, 0.34442028403282166 },
   { -0.03290128707885742, 0.058259595185518265, -0.20818600058555603, -0.13096922636032104, -0.054339468479156494, -0.30500122904777527, -0.40036284923553467, 0.3071635365486145, -0.2454889416694641, 0.19652438163757324 },
   { -0.14850260317325592, -0.02036658674478531, -0.34331178665161133, -0.13573329150676727, 0.13812574744224548, -0.15174145996570587, -0.2208961844444275, 0.2785664498806, -0.17827647924423218, 0.29464438557624817 },
   { -0.18750251829624176, -0.08790753036737442, -0.2862963378429413, 0.0051033073104918, 0.07866030931472778, -0.08418542146682739, -0.26628971099853516, 0.17024090886116028, -0.01549496315419674, 0.31200191378593445 },
   { -0.26841679215431213, -0.018468040972948074, -0.22078362107276917, -0.04211721569299698, 0.015528910793364048, -0.05265139788389206, -0.19091837108135223, 0.19249069690704346, 0.08729944378137589, 0.19737966358661652 },
   { -0.17415015399456024, -0.0844879150390625, -0.03839178383350372, -0.0845225602388382, -0.03393358737230301, -0.014674317091703415, -0.11696233600378036, 0.1374647468328476, 0.06261061131954193, 0.1277325302362442 },
   { -0.14622116088867188, -0.06161552667617798, -0.1332254558801651, -0.044595979154109955, -0.02202407643198967, -0.024480139836668968, 0.015293377451598644, 0.11443332582712173, 0.001692753634415567, 0.1841733306646347 },
   { -0.3281693458557129, 0.13969947397708893, -0.2782781720161438, -0.014246857725083828, -0.11731289327144623, -0.08736168593168259, -0.07264394313097, 0.06599950045347214, -0.013241677545011044, 0.1805306077003479 },
   { -0.23817363381385803, -0.06579118967056274, -0.2717815637588501, -0.05728009343147278, -0.08099230378866196, -0.019108759239315987, 0.0516342893242836, 0.026511577889323235, -0.014606990851461887, 0.12353687733411789 },
   { -0.11337382346391678, -0.22093287110328674, -0.11631593108177185, -0.15864573419094086, 0.06246928498148918, 0.07554779946804047, -0.24412459135055542, -0.0621468760073185, -0.10395076870918274, 0.08247415721416473 },
   { -0.25676435232162476, -0.12397262454032898, 0.10250559449195862, -0.0024386506993323565, 0.0021157467272132635, 0.1399432271718979, -0.3832339346408844, -0.1449557989835739, -0.09772000461816788, 0.18314151465892792 },
   { 0.09542512893676758, 0.06990513205528259, -0.07708222419023514, 0.05548891797661781, 0.030030418187379837, -0.1128498837351799, 0.03619028255343437, 0.040945492684841156, -0.05988934636116028, 0.07449716329574585 },
   { -0.05959043279290199, 0.11122244596481323, -0.08919806033372879, 0.04892076924443245, -0.2454223930835724, -0.09282012283802032, 0.20686180889606476, -0.07164688408374786, -0.09241880476474762, 0.053408823907375336 },
   { -0.06109505146741867, -0.14962059259414673, -0.05056013911962509, 0.1757666915655136, -0.21659229695796967, -0.2553761601448059, -0.004561248701065779, -0.3154197335243225, -0.09221810847520828, -0.05037872493267059 },
   { -0.0158663522452116, -0.0981215387582779, 0.1402745097875595, 0.05704855918884277, -0.20738810300827026, -0.13818037509918213, 0.09580541402101517, -0.41055312752723694, -0.0010762264719232917, -0.373119056224823 },
   { -0.046777911484241486, -0.021776322275400162, 0.07888567447662354, 0.06446501612663269, -0.3762882649898529, 0.0027101743035018444, 0.0830850824713707, -0.24896465241909027, 0.021656839177012444, -0.0951298177242279 },
   { -0.07175992429256439, -0.12471668422222137, 0.015122991055250168, 0.07147884368896484, -0.11929167807102203, 0.01635793410241604, 0.06296717375516891, -0.04611745476722717, -0.013069660402834415, -0.03359779715538025 },
   { -0.128220796585083, -0.01020918507128954, 0.08862780034542084, 0.009006221778690815, -0.08667373657226562, 0.1055869460105896, 0.03492629528045654, 0.0581556111574173, 0.0314616858959198, 0.017195027321577072 },
   { -0.08837570250034332, -0.04726187139749527, -0.06889954209327698, -0.028102461248636246, -0.20729129016399384, 0.08282072097063065, -0.03494061157107353, -0.1696581244468689, -0.051591191440820694, 0.03006741963326931 },
   { -0.007189462892711163, -0.11121363937854767, -0.04218245670199394, -0.02556358464062214, -0.14791546761989594, 0.11856600642204285, 0.14533810317516327, -0.3547021746635437, -0.11909470707178116, -0.1095852479338646 },
   { -0.09907665103673935, -0.0641665831208229, -0.15174716711044312, 0.02031738869845867, -0.05332989990711212, -0.06510534137487411, 0.24557989835739136, -0.07047716528177261, 0.0366472564637661, -0.21352413296699524 },
   { -0.09140318632125854, -0.18975982069969177, -0.14861473441123962, -0.09112320840358734, 0.04264410585165024, -0.15421658754348755, 0.18069273233413696, 0.06423615664243698, 0.0026145344600081444, -0.2977142333984375 },
   { -0.07851047068834305, -0.0020123913418501616, -0.22378583252429962, -0.12076982855796814, 0.11981578916311264, 0.17570258677005768, 0.06481870263814926, -0.097664475440979, -0.12647517025470734, 0.007947128266096115 },
   { -0.14088506996631622, -0.10969378054141998, 0.046087153255939484, -0.20045150816440582, -0.0431024394929409, 0.09073612093925476, -0.10028533637523651, 0.08534418791532516, 0.0424317829310894, 0.05621407926082611 },
   { 0.008398969657719135, -0.01668330281972885, 0.001535646733827889, -0.11285938322544098, -0.13847747445106506, -0.1262313723564148, 0.13156722486019135, 0.05277865380048752, -0.08171481639146805, -0.054356615990400314 },
   { 0.020256517454981804, -0.009461388923227787, 0.015353241004049778, 0.03664493188261986, -0.06866159290075302, -0.2088187336921692, 0.2007433921098709, -0.0014573477674275637, -0.17442716658115387, -0.05729673430323601 },
   { 0.04585479199886322, 0.09423058480024338, -0.0856892317533493, 0.07720299810171127, -0.05838846415281296, -0.10399696975946426, -0.03972587361931801, 0.06976400315761566, -0.1136588454246521, -0.1072947308421135 },
   { -0.12177987396717072, -0.08375174552202225, 0.0907512679696083, 0.018145548179745674, -0.06754419952630997, -0.10082691162824631, -0.017491256818175316, -0.042039040476083755, 0.05857672169804573, -0.07902168482542038 },
   { -0.08719339966773987, -0.1289232075214386, 0.04571262374520302, 0.020443903282284737, -0.10170437395572662, -0.007564753293991089, -0.0524311326444149, -0.06019781902432442, -0.001981194596737623, 0.1536322832107544 },
   { 0.0067174131982028484, -0.12450753897428513, 0.06604956090450287, 0.06429312378168106, 0.03365728259086609, -0.014975758269429207, 0.008621221408247948, 0.028984427452087402, 0.1469622403383255, 0.02158062532544136 },
   { 0.03794638440012932, -0.07037074118852615, -0.1521093249320984, 0.04781850427389145, -0.06380718946456909, 0.013690768741071224, 0.08165556192398071, 0.08724609017372131, 0.026683803647756577, -0.004598057828843594 },
   { -0.009501757100224495, 0.0265386663377285, -0.1669306457042694, -0.00512457313016057, -0.03573179990053177, 0.13093885779380798, 0.05186612531542778, 0.018088312819600105, 0.0699099749326706, -0.14420080184936523 },
   { -0.054469961673021317, 0.09205262362957001, -0.07011628150939941, -0.04699455574154854, 0.03685422241687775, 0.14942581951618195, 0.10530909895896912, -0.022252680733799934, 0.06312882155179977, -0.001941114547662437 },
   { -0.020773373544216156, 0.11454170197248459, -0.1320793479681015, -0.13750450313091278, -0.008003650233149529, 0.07525397837162018, 0.08941269665956497, -0.03106740675866604, 0.1408444046974182, 0.08363528549671173 },
   { -0.04202787205576897, 0.06974412500858307, -0.03249702230095863, -0.24855417013168335, 0.08583328872919083, 0.10305836796760559, 0.11045674979686737, 0.0002917321107815951, -0.02224891260266304, -0.07039574533700943 },
   { 0.04050961509346962, 0.06951580941677094, -0.18952849507331848, -0.06091766804456711, 0.08843883872032166, 0.11479973793029785, 0.0331294909119606, 0.013344750739634037, -0.10006007552146912, -0.08039545267820358 },
   { -0.12698045372962952, -0.05755288153886795, -0.07500987499952316, -0.10405318439006805, -0.03128102049231529, 0.2209581881761551, -0.08754698187112808, -0.27208712697029114, 0.004534798674285412, -0.14231346547603607 },
   { -0.09717170894145966, -0.12075264006853104, 0.06323932111263275, -0.18307554721832275, -0.1397760808467865, 0.22487464547157288, 0.08304817974567413, -0.12320177257061005, 0.033453162759542465, -0.13817210495471954 },
   { -0.14202038943767548, 0.07172031700611115, -0.03416946902871132, 0.013121622614562511, 0.05537097901105881, -0.07592175155878067, 0.10185682028532028, -0.13004842400550842, -0.2614388167858124, -0.07363264262676239 },
   { -0.0849023163318634, 0.042468808591365814, 0.043411534279584885, -0.0055964235216379166, 0.03230973705649376, -0.3432338833808899, 0.09322378784418106, -0.02335081622004509, 0.04687916114926338, -0.06981085240840912 },
   { 0.08260484784841537, -0.09756916016340256, -0.04126408323645592, 0.1500379890203476, -0.03734385222196579, -0.07264741510152817, -0.030051784589886665, 0.012235173024237156, -0.004923275671899319, -0.0402231365442276 },
   { 0.02726418524980545, -0.17732878029346466, 0.05691489949822426, -0.01918961852788925, -0.10513904690742493, 0.0023381062783300877, 0.017678814008831978, -0.025933876633644104, 0.06093962490558624, 0.005815873388200998 },
   { 0.06952527910470963, -0.08913484215736389, -0.035869050770998, 0.08643818646669388, -0.039350446313619614, -0.07853500545024872, 0.05695253238081932, 0.07959019392728806, 0.05293099954724312, -0.042460519820451736 },
   { -0.09291543811559677, -0.09773099422454834, 0.0036767306737601757, -0.0061517334543168545, -0.02478308044373989, -0.05644826963543892, -0.010236126370728016, -0.005081461276859045, -0.0406775176525116, 0.048680856823921204 },
   { -0.15112929046154022, -0.01816815510392189, -0.09388261288404465, -0.128518745303154, 0.0797351747751236, 0.10491559654474258, 0.05638468265533447, -0.08437935262918472, 0.004068470094352961, 0.0943756103515625 },
   { 0.03130514547228813, 0.028455868363380432, -0.1547468900680542, -0.0794638991355896, -0.02268289402127266, 0.1649906188249588, 0.15295332670211792, -0.08429573476314545, 0.02775808796286583, 0.1541564166545868 },
   { -0.02949768304824829, 0.2065451741218567, -0.24834519624710083, -0.2715649902820587, 0.12198448181152344, 0.014745015650987625, 0.019262978807091713, -0.009743656031787395, -0.13858935236930847, 0.15381452441215515 },
   { -0.12149272859096527, 0.27974119782447815, -0.308928906917572, -0.18583102524280548, 0.17680436372756958, 0.1439136117696762, 0.03474777191877365, 0.08283694833517075, -0.08686713129281998, 0.050775181502103806 },
   { -0.22251945734024048, 0.26777949929237366, -0.24143356084823608, -0.25799208879470825, 0.25635969638824463, 0.31661245226860046, -0.08813875168561935, 0.014903792180120945, 0.005162328947335482, -0.11344223469495773 },
   { -0.02001534216105938, 0.11723534017801285, -0.28393325209617615, -0.27982407808303833, 0.33501389622688293, 0.2647625207901001, -0.07868970185518265, 0.06269873678684235, -0.07190874963998795, 0.001957416534423828 },
   { -0.033206790685653687, -0.23137129843235016, -0.316074401140213, -0.3326854705810547, 0.03098439797759056, 0.1065809428691864, -0.2820717990398407, 0.1287805438041687, 0.0011344109661877155, -0.04085368663072586 },
   { -0.22327157855033875, -0.06545908004045486, 0.0056334990076720715, -0.19077998399734497, 0.171161949634552, -0.0012470429064705968, -0.24852371215820312, -0.022985056042671204, 0.15718282759189606, 0.02387402392923832 },
   { 0.010609828867018223, -0.13378897309303284, -0.22538946568965912, -0.06721912324428558, -0.18220862746238708, -0.10902997106313705, -0.2883946895599365, 0.018714848905801773, 0.24182359874248505, 0.05482402443885803 },
   { 0.06184283643960953, -0.040505558252334595, -0.019570641219615936, 0.046206869184970856, -0.04461514577269554, -0.09181240946054459, 0.0007521182997152209, 0.056162286549806595, -0.17836113274097443, -0.13691717386245728 },
   { -0.10238896310329437, -0.03640018403530121, 0.03278357908129692, 0.03412336856126785, -0.06174776330590248, 0.013471793383359909, -0.05921781435608864, -0.03527296707034111, -0.067202627658844, 0.10876049846410751 },
   { 0.05064622312784195, -0.05944857746362686, -0.030951883643865585, 0.08562371879816055, -0.09956865757703781, 0.03464231267571449, 0.03308677673339844, -0.08221088349819183, -0.05595942214131355, 0.12026654928922653 },
   { -0.013897199183702469, -0.05761216580867767, 0.10734713077545166, 0.018647413700819016, -0.014213642105460167, -0.18513135612010956, 0.09191261976957321, -0.22497060894966125, 0.031338684260845184, 0.12303384393453598 },
   { 0.02389400452375412, -0.17240990698337555, -0.016365109011530876, -0.1278878003358841, -0.0059529878199100494, -0.11549165844917297, -0.04678049683570862, -0.14147336781024933, 0.014263570308685303, 0.2718726396560669 },
   { -0.019282588735222816, -0.1981504261493683, 0.06118513643741608, 0.034192029386758804, 0.018447311595082283, 0.060002103447914124, 0.03782161325216293, -0.17108920216560364, -0.04768839478492737, 0.06883344799280167 },
   { 0.054957836866378784, 0.10353344678878784, 0.09767907857894897, 0.026263149455189705, -0.05379677563905716, 0.005660821683704853, 0.07232017070055008, -0.1023252084851265, -0.2854706346988678, -0.013998757116496563 },
   { 0.029300617054104805, 0.3528144061565399, 0.058353155851364136, 0.06880873441696167, 0.18149298429489136, -0.13126835227012634, 0.055705707520246506, -0.00012644466187339276, -0.32804620265960693, -0.1226240023970604 },
   { -0.09455431997776031, 0.3337474465370178, -0.0732591301202774, 0.11502707749605179, 0.1982896775007248, -0.004898248706012964, -0.0971916988492012, 0.14288802444934845, -0.21892136335372925, -0.2844669222831726 },
   { -0.0702742412686348, 0.17802844941616058, -0.018154338002204895, -0.15710222721099854, 0.2573067247867584, 0.20660753548145294, -0.08817832916975021, 0.07453262060880661, -0.14002856612205505, -0.33799707889556885 },
   { -0.06689934432506561, -0.006839828100055456, 0.015055333264172077, -0.5138639211654663, 0.3373607099056244, 0.2442787140607834, -0.18313105404376984, 0.27645474672317505, -0.1272195428609848, -0.401774525642395 },
   { -0.21235722303390503, -0.3704891800880432, -0.17297257483005524, -0.6161441206932068, 0.1550523042678833, 0.2213803231716156, -0.08798950910568237, -0.09241928905248642, 0.07157807797193527, -0.326017826795578 },
   { -0.21663004159927368, -0.3014433681964874, -0.22669526934623718, -0.07086757570505142, 0.08178184181451797, 0.0860276073217392, -0.20455437898635864, 0.06039096787571907, 0.24147707223892212, -0.12741698324680328 },
   { -0.054068032652139664, -0.19865989685058594, 0.0058561693876981735, -0.10311747342348099, -0.14632293581962585, 0.06563249230384827, -0.1773166060447693, 0.0770866721868515, 0.006472650915384293, -0.1474274843931198 },
   { -0.052951984107494354, -0.01614495739340782, -0.16066645085811615, -0.008099970407783985, -0.08431916683912277, 0.022634079679846764, -0.20065467059612274, 0.13327917456626892, -0.0782226026058197, 0.008336004801094532 },
   { 0.017711667343974113, -0.06515368819236755, -0.10241421312093735, -0.03955594450235367, -0.027466733008623123, 0.041083190590143204, -0.03997989371418953, 0.05743077024817467, -0.11383134871721268, 0.15326502919197083 },
   { -0.020390503108501434, 0.07418756186962128, -0.045139130204916, 0.07720742374658585, 0.04801582917571068, -0.008106226101517677, 0.037950627505779266, -0.11704002320766449, -0.05934533849358559, 0.009574038907885551 },
   { 0.0893881544470787, 0.17443501949310303, 0.049318280071020126, 0.06309790164232254, 0.08360206335783005, -0.13285966217517853, 0.06582276523113251, 0.008917243219912052, -0.029722444713115692, 0.12083455920219421 },
   { 0.12331802397966385, -0.15700814127922058, -0.08220643550157547, 0.148879274725914, 0.16233742237091064, -0.15019921958446503, 0.1079450249671936, 0.09732247143983841, -0.19327875971794128, 0.133051335811615 },
   { 0.0073443446308374405, -0.03730129450559616, -0.0882641151547432, 0.12207740545272827, 0.11622221022844315, -0.07867739349603653, 0.08827878534793854, 0.10407613962888718, -0.0996740311384201, -0.13691334426403046 },
   { -0.2140437811613083, 0.10482681542634964, 0.04903005063533783, 0.17914682626724243, -0.15184417366981506, -0.034909844398498535, 0.02353748120367527, 0.3696502149105072, -0.11333263665437698, -0.08962255716323853 },
   { -0.10861102491617203, 0.22083932161331177, 0.14331743121147156, -0.05172620713710785, -0.2677651345729828, 0.029754798859357834, -0.05225374177098274, 0.3525965213775635, -0.15792040526866913, -0.007006347179412842 },
   { 0.009250945411622524, 0.14373508095741272, 0.0992259830236435, -0.05359330773353577, -0.12132690846920013, 0.08026191592216492, -0.12294136732816696, 0.23025266826152802, -0.07110791653394699, -0.020532866939902306 },
   { -0.05101340636610985, -0.05844041332602501, 0.046275775879621506, -0.21143485605716705, 0.11340714991092682, 0.18739962577819824, -0.07598300278186798, 0.1917831003665924, -0.0025868709199130535, -0.03357526287436485 },
   { 0.024107277393341064, -0.3926025927066803, -0.028202209621667862, -0.560723066329956, -0.15907268226146698, 0.18803168833255768, 0.18466022610664368, 0.13688932359218597, -0.06313281506299973, -0.2573466897010803 },
   { -0.08088693767786026, -0.5750726461410522, -0.07800962775945663, -0.7235630750656128, -0.232302725315094, 0.4374912679195404, 0.18976199626922607, -0.09607785195112228, -0.011612516827881336, -0.03297845646739006 },
   { -0.310777872800827, -0.42913803458213806, -0.13346654176712036, -0.4483993649482727, -0.1931818574666977, 0.2999575138092041, 0.09873777627944946, 0.0019608144648373127, 0.03565305098891258, -0.22391808032989502 },
   { -0.1830112487077713, -0.22420793771743774, -0.10145609825849533, -0.32349419593811035, -0.3095744252204895, 0.3626440465450287, 0.16650955379009247, -0.21947768330574036, -0.052982624620199203, 0.0007802550680935383 },
   { 0.05933161452412605, 0.1328265517950058, -0.1215578243136406, -0.14920900762081146, -0.04347416013479233, -0.11100814491510391, -0.11797957122325897, 0.16878853738307953, -0.009351206943392754, 0.21726518869400024 },
   { 0.08708984404802322, -0.05581497400999069, -0.11347517371177673, -0.20136891305446625, 0.058398835361003876, -0.12073691934347153, 0.021773474290966988, 0.11877916008234024, -0.03382035717368126, 0.056185077875852585 },
   { 0.09639175236225128, -0.0035560568794608116, -0.032223425805568695, -0.008853164501488209, 0.04260190576314926, -0.08077273517847061, 0.11668946593999863, 0.014162939973175526, -0.1546775996685028, -0.03806972876191139 },
   { 0.05219948664307594, 0.0723935142159462, 0.07877326011657715, 0.1526184380054474, 0.08511486649513245, -0.2158658355474472, 0.12742672860622406, 0.05626051872968674, -0.20821550488471985, -0.14435584843158722 },
   { 0.06039852276444435, -0.02778661996126175, 0.10185149312019348, 0.07432433217763901, 0.037195928394794464, -0.21267269551753998, 0.07091876119375229, 0.26252323389053345, -0.09046009182929993, -0.20043495297431946 },
   { -0.0075769489631056786, 0.04579498991370201, 0.0447162389755249, 0.12018083035945892, -0.16560842096805573, -0.14190931618213654, -0.06205705553293228, 0.26746368408203125, -0.13415732979774475, -0.2624987065792084 },
   { -0.17984609305858612, 0.15256647765636444, 0.14959780871868134, 0.08985471725463867, -0.5192872285842896, -0.1083451583981514, -0.03275543823838234, 0.3556918501853943, -0.11776591837406158, -0.18548841774463654 },
   { -0.28084608912467957, 0.08725306391716003, 0.18374420702457428, 0.053781021386384964, -0.22170136868953705, -0.12685494124889374, 0.038388218730688095, 0.2487926036119461, -0.10418950766324997, -0.16420049965381622 },
   { -0.0399295948445797, -0.024453917518258095, 0.1318133920431137, -0.1317908763885498, 0.0018992931582033634, 0.10823362320661545, -0.1485290378332138, 0.09363801032304764, -0.02838779240846634, 0.05843005329370499 },
   { -0.01096057053655386, -0.30900031328201294, 0.054591093212366104, -0.2652435600757599, -0.05741626396775246, 0.3052222728729248, -0.06556911766529083, -0.07158815860748291, -0.01567941904067993, 0.15549203753471375 },
   { 0.05487857386469841, -0.4787256717681885, -0.0883442610502243, -0.6828378438949585, -0.19398881494998932, 0.3497294783592224, 0.20488432049751282, -0.14979346096515656, -0.015551767311990261, 0.013925805687904358 },
   { -0.08724236488342285, -0.25053831934928894, -0.06330706924200058, -0.7122432589530945, -0.19111187756061554, 0.598862886428833, 0.3460495173931122, -0.20485159754753113, -0.37089967727661133, -0.14886105060577393 },
   { -0.30795174837112427, -0.22805802524089813, -0.21819427609443665, -0.41544094681739807, -0.07676255702972412, 0.36878570914268494, 0.1975594162940979, -0.15074174106121063, -0.1680491715669632, -0.17344993352890015 },
   { -0.2517525553703308, -0.315224289894104, -0.06358664482831955, -0.08442612737417221, 0.06037365272641182, 0.13093067705631256, 0.03286211937665939, -0.1165095716714859, 0.050895750522613525, -0.20083031058311462 },
   { 0.06395190954208374, 0.08746913075447083, 0.005521934013813734, -0.10810501873493195, 0.07647771388292313, -0.21014471352100372, -0.270817369222641, 0.020420271903276443, -0.3389647305011749, 0.023499418050050735 },
   { 0.07838378846645355, -0.20580874383449554, 0.06242908537387848, -0.17543455958366394, -0.05696634575724602, -0.13926351070404053, 0.03838210552930832, 0.0078517971560359, 0.03467477858066559, -0.1232927143573761 },
   { 0.15275715291500092, 0.045074645429849625, 0.1089356392621994, -0.016463248059153557, 0.019530445337295532, -0.07761846482753754, 0.10263215750455856, 0.0850735455751419, 0.04021582007408142, -0.20142215490341187 },
   { 0.18160009384155273, 0.013688110746443272, 0.18605850636959076, 0.00509635079652071, -0.0997711718082428, -0.14557544887065887, -0.008785339072346687, 0.27975746989250183, -0.13909024000167847, -0.20611457526683807 },
   { 0.12457545846700668, 0.09204578399658203, 0.2035556137561798, 0.056791361421346664, -0.14088134467601776, -0.1337873488664627, 0.06907220184803009, 0.26861903071403503, -0.16080771386623383, -0.28801965713500977 },
   { -0.10355589538812637, 0.09034311771392822, 0.17162498831748962, 0.057448454201221466, -0.3666244447231293, -0.12238937616348267, -0.05351300537586212, 0.05475478246808052, -0.04060190171003342, -0.24814388155937195 },
   { -0.3501527011394501, 0.14934182167053223, 0.1413789838552475, 0.017414361238479614, -0.30573171377182007, -0.056909751147031784, -0.004186177160590887, 0.2255927175283432, -0.05425567924976349, -0.16575847566127777 },
   { -0.1240573301911354, -0.04796729236841202, 0.18175892531871796, -0.00480082118883729, -0.03141414001584053, -0.005191448610275984, -0.06458763033151627, 0.2538242042064667, 0.062160592526197433, -0.08171483129262924 },
   { 0.05236561968922615, -0.09691871702671051, 0.22772356867790222, -0.2012358009815216, 0.057762786746025085, 0.12729278206825256, -0.14612556993961334, 0.05922772362828255, -0.052821651101112366, 0.12399160116910934 },
   { -0.10589128732681274, -0.3291681408882141, 0.18529090285301208, -0.10815893858671188, -0.12064237892627716, 0.22200699150562286, -0.0017038836376741529, -0.09346883744001389, -0.39253416657447815, 0.20130111277103424 },
   { 0.03948401287198067, -0.46240997314453125, 0.15971699357032776, -0.13746806979179382, -0.38634052872657776, 0.3157797157764435, 0.13167962431907654, -0.076899453997612, -0.17356425523757935, -0.012977794744074345 },
   { 0.008803656324744225, -0.12753823399543762, 0.02421087957918644, -0.13529101014137268, -0.21862412989139557, 0.5927647352218628, 0.042052604258060455, -0.438799113035202, -0.10358313471078873, -0.44606319069862366 },
   { -0.44819405674934387, -0.09086596220731735, 0.0289379321038723, -0.12486087530851364, -0.19590380787849426, 0.6232188940048218, -0.3029499650001526, -0.2553989589214325, -0.30615586042404175, -0.11996400356292725 },
   { -0.3468151390552521, 0.11412685364484787, -0.0405249260365963, -0.13195917010307312, -0.02292129024863243, 0.42825549840927124, -0.5484703183174133, 0.10048361867666245, -0.19953450560569763, -0.19981364905834198 },
   { 0.04339038208127022, 0.06449110805988312, 0.02982836589217186, 0.0012988289818167686, -0.024875307455658913, -0.033859144896268845, -0.1451616883277893, 0.06614255905151367, -0.20175690948963165, -0.15209363400936127 },
   { 0.0366143174469471, -0.13986480236053467, 0.14526663720607758, -0.19491928815841675, 0.010138576850295067, 0.040032874792814255, 0.02551349252462387, -0.02940051630139351, 0.07967987656593323, -0.18860779702663422 },
   { 0.047504618763923645, -0.02623099274933338, 0.18289560079574585, -0.05703744292259216, -0.002405500737950206, -0.12622952461242676, 0.05000557377934456, 0.13535135984420776, 0.060853615403175354, -0.13185442984104156 },
   { -0.02719833515584469, 0.06289408355951309, 0.15524296462535858, -0.15450623631477356, -0.03997522220015526, -0.11388570070266724, 0.03734255209565163, 0.2304481416940689, 0.030841881409287453, -0.21006526052951813 },
   { 0.041012927889823914, -0.05636493116617203, 0.16412673890590668, -0.06139139086008072, -0.06520973145961761, -0.11500130593776703, -0.03566427528858185, 0.21106372773647308, 0.1447715312242508, -0.2371782660484314 },
   { -0.3086095452308655, 0.051898788660764694, 0.21552132070064545, -0.004230598919093609, -0.13202297687530518, -0.08976192772388458, -0.1742551028728485, 0.1394752562046051, 0.11015420407056808, -0.22263601422309875 },
   { -0.39400288462638855, 0.03821476548910141, 0.08037883788347244, -0.0466674268245697, 0.03550533577799797, 0.18072451651096344, -0.32925334572792053, 0.088920459151268, -0.24984610080718994, 0.021115457639098167 },
   { -0.12730953097343445, -0.14651599526405334, 0.10182680189609528, 0.060204844921827316, -0.025665147230029106, 0.09359416365623474, -0.25009816884994507, 0.16258099675178528, -0.20093519985675812, 0.09411107748746872 },
   { -0.0036078498233109713, -0.15357032418251038, -0.045076314359903336, 0.10670976340770721, 0.05204159766435623, 0.1852748841047287, -0.20465968549251556, 0.2400532215833664, -0.25918009877204895, -0.004076231271028519 },
   { -0.01275430154055357, -0.14542652666568756, 0.011596577242016792, -0.005898389965295792, -0.031344469636678696, 0.22893616557121277, -0.0375296026468277, 0.1826665699481964, -0.201163187623024, 0.00497211841866374 },
   { 0.03643102943897247, -0.1288139522075653, -0.09928499162197113, -0.10670425742864609, -0.08902935683727264, 0.2788824439048767, -0.10968924313783646, -0.11992902308702469, -0.04136044904589653, -0.36269140243530273 },
   { -0.1209881603717804, 0.07508106529712677, 0.14848627150058746, 0.062191445380449295, -0.03405708074569702, 0.15087266266345978, -0.33400776982307434, -0.1578989326953888, -0.02071523107588291, -0.3795832097530365 },
   { -0.3811584711074829, 0.06183496490120888, 0.2058316320180893, -0.0816565528512001, 0.2261669784784317, 0.26361772418022156, -0.6962149739265442, -0.3001909554004669, -0.05486942455172539, -0.20134250819683075 },
   { -0.2646636962890625, 0.23407217860221863, 0.1833343803882599, -0.23579508066177368, 0.15062755346298218, 0.20250102877616882, -0.46920573711395264, -0.24141430854797363, -0.10682915151119232, 0.014556614682078362 },
   { -0.0288227666169405, 0.009464970789849758, 0.15636847913265228, 0.03713851049542427, 0.06273026764392853, -0.040808435529470444, 0.03120994009077549, -0.04000231996178627, -0.13394226133823395, -0.19915913045406342 },
   { 0.08035977184772491, -0.15343154966831207, 0.03584962338209152, -0.17511112987995148, 0.06110508367419243, 0.004132725298404694, 0.012085185386240482, 0.02574564516544342, 0.06360017508268356, -0.0777500793337822 },
   { -0.06653139740228653, 0.14357775449752808, 0.046961795538663864, -0.0917716771364212, 0.09433002769947052, 0.0750117301940918, -0.0040312050841748714, 0.09943286329507828, 0.0824698880314827, -0.06355124711990356 },
   { -0.06600445508956909, 0.046173591166734695, -0.08048861473798752, -0.09831463545560837, 0.036438651382923126, 0.0801805928349495, -0.11819882690906525, 0.10835384577512741, 0.0723726898431778, -0.20600450038909912 },
   { -0.1525287628173828, 0.00021941965678706765, 0.03793354704976082, -0.0420549251139164, 0.08983512222766876, 0.13465826213359833, -0.12863120436668396, -0.0017216948326677084, 0.1560666412115097, -0.1638127565383911 },
   { -0.18373802304267883, 0.08746330440044403, 0.05976644903421402, 0.008344488218426704, 0.07678555697202682, 0.013230196200311184, -0.286057710647583, 0.05720478296279907, -0.09035159647464752, -0.028937313705682755 },
   { -0.2199905961751938, 0.15539777278900146, 0.004279337823390961, 0.07599569857120514, 0.18725012242794037, 0.07676348835229874, -0.26572155952453613, 0.03529716283082962, -0.2372148334980011, 0.07546363770961761 },
   { -0.25115102529525757, -0.01711980812251568, -0.09419038891792297, 0.14901410043239594, 0.07345639169216156, 0.08530332893133163, -0.16710703074932098, -0.00885157659649849, -0.18519216775894165, 0.12181136012077332 },
   { -0.09588704258203506, -0.41430044174194336, -0.17772220075130463, 0.09649156033992767, -0.08204449713230133, 0.035104550421237946, -0.056586600840091705, 0.10415993630886078, 0.04481440410017967, 0.10161148756742477 },
   { 0.06468948721885681, -0.33448418974876404, -0.05938032269477844, 0.12141604721546173, 0.1467776894569397, 0.10260344296693802, -0.09966392070055008, 0.16124676167964935, -0.017990844324231148, -0.14946365356445312 },
   { -0.07475583255290985, 0.0189462061971426, -0.1664411574602127, 0.06735369563102722, 0.2903778553009033, 0.10859300941228867, -0.2920800745487213, 0.2166464775800705, 0.10969173163175583, -0.512538492679596 },
   { -0.32600152492523193, 0.2411070466041565, 0.17729738354682922, -0.19542153179645538, 0.2605797350406647, -0.12671945989131927, -0.35043367743492126, 0.11491519957780838, 0.14332138001918793, -0.45575398206710815 },
   { -0.3168743848800659, 0.08312194794416428, 0.4512890875339508, -0.2835690677165985, -0.020116668194532394, -0.3882059156894684, -0.4284209907054901, 0.17377524077892303, 0.08811143785715103, -0.1985262930393219 },
   { -0.21605095267295837, 0.12169387936592102, 0.4245084822177887, -0.2578473687171936, 0.04853620380163193, -0.23762942850589752, -0.37430447340011597, 0.18555088341236115, -0.15018954873085022, -0.16071534156799316 },
   { 0.09234823286533356, -0.02993902377784252, 0.07209419459104538, -0.11406947672367096, 0.03379819542169571, -0.04254837706685066, 0.01690562441945076, -0.0645110011100769, -0.15591469407081604, -0.04487399384379387 },
   { 0.08796855807304382, 0.19746463000774384, -0.05876685306429863, -0.15461385250091553, 0.014066213741898537, -0.052037984132766724, -0.16541625559329987, 0.049654994159936905, 0.060914862900972366, -0.02310318499803543 },
   { 0.0017857513157650828, 0.11184152215719223, 0.006791337858885527, -0.07929007709026337, -0.007348190993070602, 0.022861458361148834, -0.07648935168981552, 0.029022088274359703, -0.0012053304817527533, -0.10133486986160278 },
   { -0.1273040622472763, 0.17902995645999908, -0.08848069608211517, -0.015822064131498337, 0.12077484279870987, 0.14204208552837372, -0.05500634387135506, 0.009600908495485783, -0.06153632327914238, -0.048390116542577744 },
   { -0.1366771012544632, -0.007289050612598658, -0.13110309839248657, -0.06030582636594772, 0.13096675276756287, 0.14655651152133942, -0.17036312818527222, 0.0390041321516037, -0.10156869888305664, 0.011412929743528366 },
   { -0.34988662600517273, 0.10840757191181183, -0.23128382861614227, 0.017960678786039352, 0.09523022919893265, 0.1761346459388733, -0.2935647964477539, 0.07484439015388489, -0.2840166687965393, 0.0959426686167717 },
   { -0.2805614769458771, 0.27149906754493713, -0.17632821202278137, 0.061199743300676346, 0.1119832992553711, 0.17283765971660614, -0.251726359128952, 0.004842859692871571, -0.2250910997390747, 0.17363812029361725 },
   { -0.12166833132505417, 0.10821539163589478, -0.17139682173728943, 0.19487857818603516, 0.08789436519145966, 0.15776404738426208, -0.11297359317541122, -0.07630804926156998, -0.20341122150421143, 0.05850687623023987 },
   { -0.232906773686409, -0.19164061546325684, -0.11318562179803848, 0.3154202699661255, -0.1421016901731491, 0.07111643254756927, -0.019194863736629486, 0.059789422899484634, 0.016382288187742233, 0.010324923321604729 },
   { -0.055924199521541595, -0.3396630585193634, -0.0586375817656517, 0.07773371785879135, 0.01792953722178936, 0.061331138014793396, -0.015859028324484825, 0.07632510364055634, 0.16899703443050385, -0.13871538639068604 },
   { -0.12817402184009552, -0.3053886890411377, 0.038151830434799194, -0.10708506405353546, 0.05012926459312439, 0.003469591960310936, -0.2372637838125229, 0.13678443431854248, 0.1911744326353073, -0.34046947956085205 },
   { -0.1153465136885643, 0.08650340884923935, 0.5892564654350281, -0.6837749481201172, 0.09902290999889374, -0.047339361160993576, -0.33074215054512024, -0.07386994361877441, -0.15087734162807465, -0.44143423438072205 },
   { -0.10594215244054794, 0.20701681077480316, 0.567797064781189, -0.6657549142837524, 0.038778193295001984, -0.4243502914905548, -0.32137396931648254, -0.10602845251560211, -0.3111884891986847, -0.33992505073547363 },
   { -0.025555908679962158, -0.001988691510632634, 0.3574039041996002, -0.08324191719293594, -0.02789991907775402, -0.16824790835380554, -0.20818935334682465, -0.22235511243343353, -0.2946677803993225, -0.27422845363616943 },
   { -0.05537361279129982, -0.10786017030477524, 0.04234914109110832, 0.01850750856101513, -0.11001031845808029, -0.048986587673425674, -0.010423230938613415, 0.037982672452926636, -0.2494984269142151, -0.18000687658786774 },
   { 0.19662770628929138, 0.025287583470344543, 0.07686346769332886, -0.14880508184432983, -0.026425480842590332, -0.04991365224123001, -0.1299554705619812, 0.0892166793346405, -0.011118846945464611, -0.1014690101146698 },
   { 0.0726587176322937, -0.005073084495961666, -0.013237135484814644, -0.03486330062150955, -0.00968443974852562, -0.00034684513229876757, 0.046541109681129456, 0.11060740053653717, -0.07710126042366028, 0.06501548737287521 },
   { -0.012963098473846912, 0.0469958521425724, 0.03231293708086014, -0.08170220255851746, 0.05957166478037834, 0.04333461821079254, -0.09545110166072845, -0.006208515726029873, -0.18978509306907654, 0.06585053354501724 },
   { 0.030864257365465164, 0.07429133355617523, -0.08488328754901886, 0.04981514438986778, -0.04635383188724518, 0.11392870545387268, -0.056939493864774704, -0.014021032489836216, -0.14737048745155334, 0.09535336494445801 },
   { -0.14444811642169952, 0.07969976961612701, -0.13454888761043549, 0.1400901824235916, -0.034703779965639114, 0.07245684415102005, -0.13962887227535248, -0.057219281792640686, -0.2923310399055481, 0.12003329396247864 },
   { -0.2131688892841339, -0.022772690281271935, -0.1241297796368599, 0.1616976261138916, 0.045956991612911224, 0.09069966524839401, -0.33936774730682373, -0.006833214312791824, -0.25993186235427856, 0.12717518210411072 },
   { -0.0575062558054924, 0.11415838450193405, -0.011761321686208248, 0.23235751688480377, -0.03987019136548042, 0.006979516241699457, 0.005339472554624081, -0.017353644594550133, -0.1845335215330124, 0.10520964860916138 },
   { 0.11668230593204498, -0.050989970564842224, -0.002831896999850869, 0.08526022732257843, -0.0638880804181099, -0.04171641543507576, 0.17842184007167816, -0.12338253110647202, -0.23533450067043304, 0.021985145285725594 },
   { 0.1775379180908203, -0.11649966239929199, 0.21318544447422028, -0.01641819439828396, -0.06995806843042374, 0.004388713277876377, 0.013418597169220448, -0.011140343733131886, -0.10664146393537521, -0.10941990464925766 },
   { 0.21049833297729492, -0.024458324536681175, 0.4304695129394531, -0.4408678412437439, 0.023008424788713455, -0.22250542044639587, 0.0024141850881278515, -0.0669831708073616, -0.18999837338924408, -0.18623599410057068 },
   { -0.043509259819984436, 0.15140202641487122, 0.46414172649383545, -0.445137619972229, 0.1644057035446167, -0.45899102091789246, -0.11389686912298203, 0.00126242998521775, -0.5242968201637268, -0.32692989706993103 },
   { -0.0151885487139225, -0.05182698741555214, 0.34206095337867737, -0.368052214384079, 0.07602060586214066, -0.6049063205718994, -0.21006865799427032, -0.08534839749336243, -0.2668706178665161, -0.2510164976119995 },
   { -0.13485577702522278, 0.03655627742409706, 0.318737268447876, -0.13863950967788696, -0.0473395511507988, -0.1993492841720581, -0.079014852643013, 0.09677814692258835, -0.19936421513557434, -0.1932694911956787 },
   { -0.018635323271155357, -0.12545110285282135, 0.013273227959871292, 0.10410737991333008, -0.046409424394369125, -0.06807020306587219, 0.11422763019800186, 0.07100090384483337, -0.4231890141963959, -0.13997125625610352 },
   { -0.08001390844583511, -0.11746079474687576, -0.10040605813264847, 0.056376442313194275, 0.06739351153373718, -0.1568104773759842, 0.10846962779760361, 0.15059858560562134, -0.08900562673807144, -0.06056097522377968 },
   { -0.190435528755188, 0.06881440430879593, -0.0271060299128294, 0.16902503371238708, 0.034448955208063126, -0.0820690467953682, -0.041242264211177826, 0.10738443583250046, -0.19850590825080872, 0.09781381487846375 },
   { -0.15052272379398346, 0.022071417421102524, -0.1427544355392456, 0.18855610489845276, 0.04468236863613129, 0.13347727060317993, -0.13182298839092255, 0.09397383034229279, -0.09482327848672867, 0.05891906097531319 },
   { -0.03149060532450676, -0.027656931430101395, -0.05136731639504433, 0.07228920608758926, -0.07333215326070786, 0.05270788446068764, 0.09057468920946121, -0.01764785312116146, -0.17693015933036804, 0.1299460232257843 },
   { -0.11556606739759445, -0.012564405798912048, -0.02540581487119198, 0.10854677855968475, -0.14810921251773834, 0.19228413701057434, 0.06232874095439911, -0.08059520274400711, -0.16215093433856964, 0.1486331671476364 },
   { 0.10179919004440308, -0.030936578288674355, -0.010098204016685486, 0.16229082643985748, -0.12042471021413803, 0.1426834613084793, 0.050645969808101654, -0.11100950837135315, -0.179713174700737, 0.19603006541728973 },
   { 0.10604988783597946, 0.03453521057963371, -0.011324874125421047, 0.12597841024398804, -0.13218048214912415, -0.006781097035855055, 0.21884258091449738, -0.12003279477357864, -0.12991656363010406, 0.011151316575706005 },
   { 0.11539924144744873, 0.1643582582473755, 0.1679137945175171, 0.06777167320251465, -0.07058677077293396, -0.12313385307788849, 0.23403742909431458, -0.09322939068078995, -0.10637296736240387, -0.12064730376005173 },
   { -0.06066988781094551, 0.21663570404052734, 0.28786754608154297, -0.09281037747859955, -0.08288051933050156, -0.26195722818374634, 0.06078912317752838, -0.11556535959243774, -0.20497475564479828, -0.27122196555137634 },
   { -0.04272153973579407, 0.2696504592895508, 0.4961523413658142, -0.3780827820301056, 0.15062974393367767, -0.2465621680021286, -0.12369973957538605, -0.23665866255760193, -0.09801545739173889, -0.244903102517128 },
   { -0.05752239748835564, 0.2909397780895233, 0.3247513771057129, -0.43048590421676636, 0.0031221862882375717, -0.24551956355571747, -0.20010793209075928, -0.0547042191028595, -0.16025711596012115, -0.12619511783123016 },
   { -0.33254584670066833, 0.11925492435693741, 0.3130853772163391, -0.3753162622451782, -0.18172822892665863, -0.11225318163633347, -0.07134591788053513, -0.12770970165729523, -0.03302856162190437, 0.06208445504307747 },
   { -0.21470484137535095, 0.1553785502910614, 0.15241789817810059, -0.29133573174476624, -0.2461520880460739, -0.1028340756893158, 0.14927372336387634, 0.12337587028741837, -0.21484999358654022, 0.09490066021680832 },
   { 0.0010618638480082154, 0.0581635907292366, 0.1007411777973175, -0.10751495510339737, -0.16533686220645905, -0.03865599259734154, -0.10083527117967606, -0.06683386862277985, -0.09600526094436646, 0.03810112178325653 },
   { 0.1727238893508911, 0.055716026574373245, 0.04316645488142967, -0.06870070099830627, -0.10971520841121674, -0.1565936803817749, -0.16402295231819153, -0.0699145644903183, 0.05241761729121208, 0.12566536664962769 },
   { 0.09994994103908539, 0.18710942566394806, 0.008851123042404652, -0.030759546905755997, -0.06070607528090477, -0.17396369576454163, -0.0712631568312645, 0.020546700805425644, 0.0701821893453598, 0.08404509723186493 },
   { -0.024447444826364517, 0.03837241604924202, 0.018933188170194626, 0.043165598064661026, -0.0821140930056572, -0.034818604588508606, 0.14093786478042603, -0.08648740500211716, -0.005921551492065191, 0.04604613780975342 },
   { 0.018674522638320923, 0.058852337300777435, 0.03618152439594269, 0.17660920321941376, -0.1280260682106018, -0.018814152106642723, 0.012121743522584438, -0.24329009652137756, 0.10293705016374588, -0.06925265491008759 },
   { 0.05778637155890465, -0.0026945206336677074, -0.048171516507864, 0.05993453040719032, -0.2520981729030609, 0.10113634914159775, 0.14999087154865265, -0.1584407389163971, 0.07305999845266342, -0.13950052857398987 },
   { 0.1454305648803711, -0.08240623027086258, -0.09262291342020035, 0.0695120245218277, -0.34242066740989685, 0.08825526386499405, 0.2091139405965805, -0.1878802627325058, 0.09788856655359268, -0.17427702248096466 },
   { 0.0810866728425026, 0.03411506861448288, -0.07117264717817307, -0.06682424247264862, -0.24723762273788452, -0.1197294071316719, 0.2148372232913971, -0.12637068331241608, 0.04220123961567879, -0.11792007833719254 },
   { -0.04624984785914421, 0.11927606165409088, -0.026471314951777458, -0.11750686913728714, -0.1512087881565094, -0.051156021654605865, 0.12359633296728134, -0.13670161366462708, -0.014564313925802708, 0.07616311311721802 },
   { 0.004756995011121035, 0.25662288069725037, 0.1820148378610611, -0.14794865250587463, 0.1651080697774887, -0.12521404027938843, 0.035014040768146515, -0.1351315826177597, -0.05854085460305214, -0.04718790203332901 },
   { -0.23328709602355957, 0.1823042929172516, 0.1950864940881729, -0.11394844949245453, 0.2290908396244049, -0.11757354438304901, 0.03762149438261986, -0.14208576083183289, -0.04277915880084038, -0.09522571414709091 },
   { -0.0486612394452095, 0.023554127663373947, 0.12503530085086823, -0.1270952671766281, 0.14898987114429474, -0.11051421612501144, -0.06641919910907745, -0.05529506504535675, -0.140586718916893, -0.174329474568367 },
   { -0.016247907653450966, 0.01657169871032238, 0.0774189904332161, -0.36265408992767334, -0.02974342368543148, 0.09732693433761597, -0.12720747292041779, 0.037801530212163925, -0.15376539528369904, 0.17843978106975555 },
   { 0.005234306678175926, 0.08084265142679214, -0.02933446131646633, -0.19782139360904694, -0.0036690901033580303, -0.04643431678414345, -0.15671484172344208, 0.07974916696548462, -0.3482416868209839, 0.07251833379268646 },
   { -0.05039869621396065, -0.11874360591173172, -0.0697353333234787, 0.1703287810087204, -0.10761190950870514, 0.014213750138878822, -0.028337303549051285, 0.1968459188938141, -0.2550053000450134, 0.061569944024086 },
   { -0.16247718036174774, -0.01403170544654131, -0.07373183965682983, 0.024169504642486572, -0.24766400456428528, 0.1131071075797081, -0.06421581655740738, 0.12090184539556503, -0.035769280046224594, -0.0680973008275032 },
   { 0.12115790694952011, -0.0004729957436211407, 0.05130547285079956, -0.07739651948213577, -0.17363034188747406, 0.005394245497882366, -0.19310645759105682, 0.204342320561409, 0.06198994070291519, -0.08302979171276093 },
   { 0.12389317154884338, 0.11333958059549332, 0.13092787563800812, 0.0431470088660717, 0.05012599006295204, 0.0259754229336977, -0.12369363009929657, -0.04454122483730316, 0.016308680176734924, -0.18604852259159088 },
   { 0.02969926968216896, 0.026848597452044487, 0.02379211038351059, -0.003578251227736473, 0.039756570011377335, 0.020402664318680763, -0.05767349526286125, -0.12439142167568207, -0.01784067414700985, -0.16011656820774078 },
   { 0.04969784617424011, 0.15773668885231018, 0.0014704022323712707, 0.06683606654405594, -0.05440263822674751, 0.10087719559669495, -0.047442350536584854, -0.18125370144844055, 0.07290732115507126, -0.20192985236644745 },
   { 0.11541301757097244, 0.04378741979598999, 0.028790710493922234, 0.07162176072597504, -0.017310256138443947, -0.02348656952381134, -0.013255417346954346, -0.21531786024570465, 0.03321170061826706, -0.20421305298805237 },
   { 0.12999574840068817, 0.20468823611736298, 0.011804218403995037, -0.0029149814508855343, -0.048317596316337585, 0.08645660430192947, -0.0668463259935379, -0.17845480144023895, 0.00988603662699461, -0.1310959756374359 },
   { 0.002399837365373969, 0.18809428811073303, -0.06324992328882217, -0.06756636500358582, -0.02427753061056137, -0.004184351768344641, -0.026168618351221085, -0.11959654837846756, 0.11679553985595703, 0.005265292711555958 },
   { -0.1656002402305603, 0.046734727919101715, -0.02808641828596592, -0.014680844731628895, 0.03145648539066315, -0.04672694951295853, 0.007787365932017565, -0.21177655458450317, 0.000861046661157161, 0.005795776844024658 },
   { -0.13956989347934723, 0.03544396907091141, -0.0819983258843422, -0.0019807734061032534, 0.13590964674949646, -0.11744491010904312, -0.03029259666800499, -0.2480141818523407, 0.008457833901047707, 0.09548049420118332 },
   { -0.11638794839382172, -0.14945447444915771, -0.06365588307380676, -0.21239499747753143, 0.12355677038431168, -0.015496372245252132, -0.0892590880393982, -0.298978328704834, 0.07665395736694336, 0.14597243070602417 },
   { -0.03156706318259239, -0.023069145157933235, -0.030060414224863052, -0.06807549297809601, 0.005391485057771206, 0.00757336663082242, -0.15556634962558746, -0.08367196470499039, -0.062198396772146225, 0.06945554167032242 },
   { -0.18643292784690857, 0.047756925225257874, 0.17190033197402954, 0.01832295022904873, -0.08602846413850784, 0.11038176715373993, -0.17617233097553253, 0.12847618758678436, -0.268379271030426, -0.0053695011883974075 },
   { -0.030238348990678787, 0.07719780504703522, -0.025182515382766724, 0.06022867187857628, -0.07799363136291504, -0.0041623711585998535, 0.063702791929245, -0.10083447396755219, -0.02926148846745491, 0.009143228642642498 },
   { 0.017195234075188637, -0.1414157599210739, -0.13723665475845337, 0.16163291037082672, -0.1127876341342926, -0.08187798410654068, 0.09112520515918732, -0.11082672327756882, -0.1413671225309372, -0.015494049526751041 },
   { 0.0006047820206731558, 0.01901150867342949, 0.048298683017492294, 0.16493834555149078, -0.17276738584041595, -0.25684964656829834, 0.10419759899377823, -0.26901957392692566, -0.06326383352279663, -0.2261303812265396 },
   { 0.023856909945607185, -0.13892792165279388, 0.09141704440116882, 0.017679918557405472, -0.38370198011398315, -0.11476141959428787, 0.13196149468421936, -0.3895842432975769, -0.14628562331199646, -0.19336950778961182 },
   { -0.16408462822437286, -0.14474189281463623, 0.2858414351940155, -0.029221070930361748, -0.4032379984855652, -0.03792894259095192, 0.14841017127037048, -0.2886398136615753, -0.1403944343328476, -0.073529914021492 },
   { -0.03725435584783554, -0.17068076133728027, 0.2622978985309601, 0.013111361302435398, -0.4031667709350586, -0.11995475739240646, 0.16497015953063965, -0.2483518421649933, -0.12900596857070923, -0.307985782623291 },
   { -0.0898112803697586, -0.0526677630841732, 0.1622408628463745, 0.10559535771608353, -0.43236711621284485, -0.0253450907766819, 0.007800726685672998, -0.24778270721435547, -0.10310756415128708, -0.378570556640625 },
   { -0.14060768485069275, -0.09057533740997314, 0.21470877528190613, 0.2081243246793747, -0.3511175811290741, 0.07128061354160309, -0.006875405088067055, -0.2689792215824127, 0.005766438320279121, -0.5263968706130981 },
   { -0.10882309079170227, 0.10898963361978531, -0.013464136980473995, 0.1365862339735031, -0.36155086755752563, 0.0907825157046318, -0.024732710793614388, -0.2442207783460617, -0.01740727387368679, -0.40474334359169006 },
   { -0.030507344752550125, -0.03774797171354294, -0.09990011900663376, 0.006093286443501711, -0.4254229664802551, 0.1385382115840912, 0.0973568931221962, -0.04579968377947807, 0.03102586790919304, -0.2645842730998993 },
   { -0.16819354891777039, -0.027254680171608925, -0.08744258433580399, -0.1575368195772171, -0.3029167950153351, 0.12310293316841125, 0.2620951235294342, -0.25452205538749695, 0.13624684512615204, -0.12164875119924545 },
   { -0.16123929619789124, -0.07497866451740265, -0.04126683622598648, 0.07907737046480179, -0.2868960499763489, 0.03247338533401489, 0.2031579315662384, -0.21608547866344452, -0.029774678871035576, -0.08453694730997086 },
   { 0.05926533043384552, -0.13173843920230865, 0.02662629634141922, 0.03003603406250477, -0.10500512272119522, -0.10281055420637131, 0.134896919131279, 0.05298810452222824, -0.02183067612349987, -0.20948824286460876 },
   { 0.06267229467630386, -0.15558941662311554, -0.003748426679521799, -0.07134441286325455, 0.11944817006587982, -0.006310368422418833, 0.011539094150066376, -0.15831126272678375, -0.009473522193729877, -0.0659603700041771 },
   { -0.05478617548942566, 0.047010164707899094, 0.012019679881632328, 0.08408141136169434, -0.181136354804039, -0.09402940422296524, 0.1474260687828064, -0.16427575051784515, -0.2049097716808319, -0.10448934882879257 },
   { 0.11406836658716202, 0.06123453006148338, -0.08943009376525879, 0.09016373753547668, -0.09545691311359406, -0.23945868015289307, 0.10551121830940247, 0.07390207052230835, -0.18170349299907684, -0.06860222667455673 },
   { 0.03229894861578941, 0.0306115560233593, -0.040712811052799225, 0.07422111183404922, -0.13630861043930054, -0.11718642711639404, 0.08642982691526413, 0.03545106574892998, 0.09067977219820023, -0.12186850607395172 },
   { -0.016318539157509804, 0.00909937359392643, 0.00291607272811234, 0.04503738507628441, -0.11897502094507217, -0.10030785948038101, 0.07430153340101242, -0.0918346717953682, -0.03847026452422142, -0.17435145378112793 },
   { -0.05652768164873123, -0.11652392148971558, 0.059504322707653046, 0.08399313688278198, -0.21285147964954376, 0.05901720002293587, -0.058915894478559494, -0.002225906355306506, 0.13187555968761444, -0.18645834922790527 },
   { -0.08416218310594559, -0.12613853812217712, -0.02574986405670643, -0.0026653199456632137, -0.21679694950580597, 0.022420894354581833, 0.05161415413022041, -0.0392511822283268, 0.03710952028632164, 0.04516942426562309 },
   { 0.017062855884432793, -0.12109198421239853, 0.017255505546927452, 0.0988636314868927, -0.07523015141487122, 0.050606321543455124, -0.03832028806209564, -0.07799804955720901, 0.03810387849807739, 0.02997361123561859 },
   { 0.0012063810136169195, 0.0282842218875885, 0.009738014079630375, 0.08592759072780609, -0.1072210967540741, 0.11379406601190567, -0.08019183576107025, -0.034690748900175095, 0.13537991046905518, 0.017626700922846794 },
   { 0.07286836206912994, 0.006027845665812492, -0.016402702778577805, 0.031229563057422638, -0.04115496948361397, 0.09694019705057144, 0.07084198296070099, -0.19744782149791718, 0.06685783714056015, 0.004987671039998531 },
   { -0.030375583097338676, -0.15009889006614685, 0.02413959614932537, -0.02517428807914257, -0.10826420783996582, 0.07241161167621613, 0.08717115223407745, -0.37940794229507446, 0.0010726044420152903, -0.03973635286092758 },
   { 0.011420981958508492, -0.10559111088514328, 0.061281051486730576, 0.16254228353500366, -0.02437352016568184, 0.00954844243824482, 0.13098756968975067, -0.0677354633808136, 0.07712070643901825, -0.034931790083646774 },
   { 0.03386594355106354, -0.03992564603686333, 0.013222591951489449, -0.041984379291534424, 0.023743437603116035, -0.013773679733276367, 0.15983225405216217, 0.014019221998751163, -0.057851508259773254, -0.319414883852005 },
   { 0.045490674674510956, -0.14641013741493225, -0.04486420378088951, -0.09135127812623978, -0.009227482602000237, 0.04169050231575966, 0.062104616314172745, 0.024198081344366074, -0.02606786973774433, -0.06566087901592255 },
   { 0.11042454093694687, -0.18150025606155396, -0.006959489081054926, 0.041745010763406754, -0.025059498846530914, 0.014804390259087086, -0.06136070936918259, -0.1074732169508934, -0.04299721121788025, -0.28400012850761414 },
   { -0.15995968878269196, -0.0774812251329422, 0.08672485500574112, 0.06856238842010498, -0.06989952176809311, -0.23826231062412262, 0.10037229210138321, 0.02322155050933361, 0.00285755074582994, -0.22715060412883759 },
   { 0.0010653181234374642, 0.0507475845515728, -0.04265468567609787, 0.06120094284415245, -0.11759919673204422, -0.11408860981464386, -0.05094689130783081, 0.09278702735900879, 0.01932590827345848, -0.03354368358850479 },
   { -0.054219890385866165, -0.02458464726805687, 0.03721681982278824, 0.06937523931264877, -0.10687290132045746, -0.05022912845015526, -0.15650218725204468, 0.020167212933301926, -0.04639726132154465, 0.08344153314828873 },
   { 0.014915937557816505, -0.04340392351150513, 0.02681531012058258, 0.04460408166050911, -0.049874868243932724, -0.004709161352366209, -0.14882521331310272, 0.10286831855773926, -0.07309877127408981, -0.023767216131091118 },
   { -0.023902026936411858, -0.09974164515733719, 0.09476906061172485, 0.04259819537401199, -0.12945446372032166, -0.02051631547510624, -0.13350768387317657, 0.03104916773736477, 0.008553852327167988, 0.06787717342376709 },
   { 0.03523217514157295, -0.10858634859323502, 0.08566462248563766, 0.006919182371348143, -0.19528615474700928, 0.05948878824710846, -0.19552627205848694, 0.0066406093537807465, 0.0961272120475769, 0.03356347233057022 },
   { -0.020930642262101173, -0.06322629749774933, 0.03693385794758797, 0.09752138704061508, -0.16008730232715607, 0.087084099650383, -0.06673964112997055, 0.031298212707042694, 0.013403656892478466, 0.047065868973731995 },
   { -0.001608195248991251, 0.011535616591572762, 0.07515905052423477, 0.12134899199008942, -0.2245066612958908, 0.1291729360818863, -0.11898268014192581, 0.03737898916006088, -0.011467980220913887, 0.013635605573654175 },
   { -0.06625073403120041, -6.166164530441165e-05, -0.030893342569470406, 0.04754902422428131, -0.29376187920570374, 0.10810066014528275, -0.1021084412932396, -0.008342699147760868, 0.014965957030653954, 0.11567769199609756 },
   { -0.02933383174240589, -0.07970141619443893, -0.02158675529062748, -0.06774488091468811, -0.2873283326625824, 0.10155763477087021, -0.054763101041316986, 0.028747230768203735, 0.022500738501548767, 0.12310750782489777 },
   { 0.01598007045686245, -0.022235102951526642, -0.0389205701649189, -0.009165964089334011, -0.061894454061985016, 0.022910965606570244, 0.016850680112838745, -0.09350442886352539, 0.043485648930072784, 0.06324180960655212 },
   { 0.13714781403541565, 0.04789498820900917, 0.0016461607301607728, 0.001028820755891502, -0.0017961935373023152, -0.05487677827477455, 0.004929014015942812, -0.17648106813430786, 0.02757045067846775, 0.07983292639255524 },
   { -0.0012740714009851217, -0.06376402080059052, -0.07076407968997955, 7.117273344192654e-05, 0.06531891971826553, 0.0012938524596393108, 0.015462341718375683, -0.2660592198371887, -0.01125098392367363, -0.20957188308238983 },
   { -0.020729418843984604, -0.29564911127090454, 0.05451669171452522, -0.02522602677345276, -0.05501529201865196, -0.0651804506778717, 0.17470507323741913, -0.20034927129745483, 0.03255368396639824, 0.060542698949575424 },
   { -0.08039680123329163, -0.09211920946836472, 0.00882817804813385, 0.050519030541181564, -0.0544043630361557, -0.08124324679374695, -0.010037627071142197, -0.08370049297809601, -0.03361538052558899, -0.12735329568386078 },
   { -0.13643501698970795, -0.012837960384786129, -0.02099449373781681, 0.048363227397203445, -0.06648983061313629, -0.10927104949951172, -0.17914700508117676, -0.04282395914196968, -0.06403570622205734, 0.10660552978515625 },
   { -0.0679006353020668, -0.10192891210317612, -0.051629502326250076, 0.05171844735741615, -0.12133951485157013, -0.046884238719940186, -0.10656759142875671, 0.12751613557338715, 0.0021822708658874035, 0.03017614036798477 },
   { -0.018870197236537933, 0.09680906683206558, -0.010965620167553425, 0.09806492924690247, -0.004615024197846651, -0.06749783456325531, -0.2657836675643921, 0.05637954920530319, -0.07274731993675232, 0.06785985827445984 },
   { -0.12467250972986221, -0.20412921905517578, -0.009490764699876308, 0.06116917356848717, -0.07367514073848724, -0.02131730131804943, -0.24733486771583557, 0.180638387799263, 0.06947705149650574, -0.04979456588625908 },
   { -0.045827798545360565, -0.20230978727340698, 0.10006026923656464, 0.13014690577983856, -0.1552339792251587, 0.02127901278436184, -0.1410445272922516, 0.14452822506427765, 0.030553309246897697, -0.04801608994603157 },
   { -0.002843279857188463, -0.05742592737078667, 0.030425891280174255, 0.07523109018802643, -0.21992571651935577, 0.006348447874188423, -0.2480689138174057, 0.10356440395116806, -0.037078723311424255, 0.11543988436460495 },
   { 0.0953448936343193, -0.07814200222492218, -0.0775987058877945, 0.054630082100629807, -0.336105614900589, 0.06843526661396027, -0.1961972862482071, 0.02148495800793171, 0.05679720267653465, 0.04694510996341705 },
   { 0.07541175931692123, -0.101992666721344, -0.03300441429018974, -0.07188776135444641, -0.262046217918396, 0.13305403292179108, -0.05412435531616211, 0.05835782364010811, 0.039238475263118744, 0.00982979778200388 },
   { -0.0089897271245718, -0.013421191833913326, -0.13012433052062988, -0.068465456366539, -0.2061779797077179, 0.06737937033176422, -0.09002005308866501, 0.10037634521722794, 0.08867566287517548, 0.1111849844455719 },
   { 0.04045470058917999, -0.039339110255241394, -0.07186561822891235, 0.02546142414212227, 0.016455238685011864, 0.04649294912815094, -0.07667402923107147, -0.048245854675769806, 0.013625480234622955, -0.05028046667575836 },
   { 0.10201451182365417, -0.03305289149284363, -0.012244944460690022, 0.055318839848041534, -0.051378317177295685, -0.07756533473730087, -0.07320231944322586, -0.0760703980922699, 0.010678748600184917, 0.04051877185702324 },
   { 0.14182817935943604, -0.10301750153303146, -0.03805641829967499, -0.03300953656435013, 0.05729575827717781, -0.09737808257341385, -0.018235471099615097, -0.012516024522483349, -0.051265206187963486, -0.026253841817378998 },
   { -0.1392090767621994, -0.20123997330665588, -0.034946784377098083, 0.050057198852300644, 0.09170079231262207, 0.06720557808876038, -0.01297781988978386, -0.18992044031620026, 0.1695476472377777, -0.07650746405124664 },
   { -0.11618445068597794, -0.015293571166694164, -0.15031622350215912, -0.04082297161221504, 0.019376816228032112, -0.07977569848299026, -0.08805323392152786, 0.15236756205558777, -0.03723558038473129, 0.04376327246427536 },
   { -0.08228769153356552, -0.0517880842089653, -0.06854239851236343, 0.12127788364887238, -0.01340280007570982, -0.09310358762741089, -0.20881478488445282, 0.032644905149936676, -0.0017470840830355883, -0.0372924767434597 },
   { -0.027618680149316788, 0.044184185564517975, 0.09822909533977509, 0.16463838517665863, -0.04034370183944702, -0.23921972513198853, -0.20889200270175934, 0.12945221364498138, 0.03275587037205696, -0.06627121567726135 },
   { -0.06117579713463783, 0.0046087573282420635, -0.008443745784461498, 0.10537724941968918, -0.137456014752388, -0.11712107807397842, -0.16197098791599274, 0.22459959983825684, -0.053842511028051376, -0.06009303405880928 },
   { 0.03481915965676308, -0.09872081875801086, 0.05608312413096428, 0.23355402052402496, -0.06826546043157578, -0.1012623980641365, -0.07708604633808136, 0.19691871106624603, 0.05819075182080269, 0.08837483823299408 },
   { -0.07989761978387833, -0.12426812201738358, 0.052219975739717484, 0.1491393893957138, -0.30635279417037964, -0.07433481514453888, -0.3017209768295288, 0.13287867605686188, 0.09439531713724136, 0.03798431530594826 },
   { -0.02523355558514595, -0.24873201549053192, -0.10629355162382126, 0.055647630244493484, -0.2393372654914856, 0.09975692629814148, -0.33774009346961975, 0.08483708649873734, 0.15775907039642334, 0.14297384023666382 },
   { 0.07266028970479965, -0.0919666588306427, -0.1684301644563675, -0.008462459780275822, -0.30834949016571045, 0.19949117302894592, -0.12974205613136292, 0.15590114891529083, 0.05628606304526329, 0.05431469902396202 },
   { -0.04606448858976364, -0.11147799342870712, -0.022764483466744423, -0.08996263891458511, -0.27855485677719116, 0.13536493480205536, 0.04158997908234596, 0.058040034025907516, 0.028750360012054443, 0.018522780388593674 },
   { -0.009071249514818192, -0.04110989347100258, -0.1757437139749527, -0.12943768501281738, 0.03650687262415886, 0.051641788333654404, 0.04265613853931427, -0.017201615497469902, 0.10953661799430847, 0.05058438330888748 },
   { -0.014147574082016945, -0.0682852566242218, -0.2099788635969162, 0.0003528219531290233, 0.05411076545715332, -0.07488322257995605, -0.005734369624406099, 0.08206997066736221, 0.19428488612174988, -0.023932525888085365 },
   { 0.1101050153374672, -0.002793769584968686, -0.036214057356119156, -0.006005105096846819, 0.04876250773668289, -0.07650990039110184, 0.017113961279392242, 0.01001088134944439, 0.15648607909679413, 0.05276000127196312 },
   { -0.043331265449523926, -0.07744526118040085, -0.13717706501483917, -0.11768513172864914, -0.07038944214582443, -0.01632707752287388, -0.10245444625616074, -0.05665578320622444, 0.0838373675942421, 0.03200947865843773 },
   { 0.002740211319178343, -0.09965334087610245, -0.17483371496200562, -0.24888135492801666, 0.01950075291097164, 0.03276772424578667, -0.2435174286365509, -0.17723603546619415, 0.056215908378362656, -0.006849856581538916 },
   { -0.05577561631798744, -0.0889807865023613, -0.21833960711956024, -0.11772839725017548, -0.13993024826049805, 0.00592237152159214, -0.4303498864173889, 0.15248042345046997, 0.01580333709716797, 0.11610954999923706 },
   { 0.07978029549121857, -0.145367830991745, 0.05583731830120087, 0.022751757875084877, -0.029366686940193176, -0.1743396818637848, -0.11947738379240036, 0.01826169155538082, -0.043832771480083466, 0.025258025154471397 },
   { -0.09116820245981216, -0.019314397126436234, 0.16019469499588013, 0.013889259658753872, 0.0509994775056839, -0.08733188360929489, -0.14644096791744232, 0.02562422677874565, 0.04868777468800545, -0.05591351538896561 },
   { 0.01261437963694334, 0.0131644606590271, 0.060007091611623764, 0.04654119908809662, -0.0812394842505455, -0.16714979708194733, -0.020967306569218636, 0.18272508680820465, -0.03611293062567711, -0.015897264704108238 },
   { -0.10257527977228165, -0.25806671380996704, 0.024534594267606735, 0.04710453376173973, -0.004609420895576477, -0.013185136951506138, -0.10346803814172745, 0.057540856301784515, -0.02196395955979824, 0.01939539611339569 },
   { -0.166656032204628, -0.029131121933460236, 0.00047422165516763926, 0.09428932517766953, -0.14906258881092072, 0.032472554594278336, -0.10550632327795029, -0.07518664002418518, 0.09049574285745621, 0.09927850216627121 },
   { -0.14714200794696808, -0.24468640983104706, -0.014498834498226643, 0.0623147189617157, -0.06743507087230682, 0.05974988266825676, 0.024696839973330498, -0.051826756447553635, 0.23317517340183258, 0.11394951492547989 },
   { -0.16664381325244904, -0.1253412514925003, -0.23584480583667755, 0.12957486510276794, -0.27059832215309143, 0.0819975882768631, 0.0016044746153056622, -0.1464090198278427, 0.19515788555145264, 0.15166467428207397 },
   { -0.17844901978969574, -0.04971488192677498, -0.11767863482236862, 0.028260646387934685, -0.07760061323642731, 0.10812637209892273, 0.17825916409492493, -0.02431846782565117, 0.054852958768606186, 0.03409605473279953 },
   { -0.12266569584608078, -0.08815550804138184, -0.12577030062675476, -0.08033572882413864, -0.005520183593034744, 0.03685224801301956, 0.06711459904909134, -0.03568686917424202, 0.09352246671915054, -0.055033739656209946 },
   { 0.06674063950777054, -0.05466333404183388, -0.0879516676068306, -0.05930708721280098, 0.019465375691652298, 0.02422829158604145, 0.11316297948360443, 0.007228004280477762, 0.08376725763082504, 0.09492363780736923 },
   { -0.0011345258681103587, -0.07538935542106628, -0.10965783149003983, -0.1973409652709961, 0.032464370131492615, -0.21912536025047302, 0.12231983989477158, -0.002646129112690687, 0.10921826958656311, 0.028851209208369255 },
   { 0.15073111653327942, -0.035868797451257706, 0.02097836136817932, -0.09615815430879593, -0.14405183494091034, -0.14545007050037384, 0.1343066394329071, -0.1774197667837143, 0.16581204533576965, -0.00403825007379055 },
   { -0.11421075463294983, -0.062229275703430176, 0.0009299989324063063, -0.3315047025680542, -0.2573402225971222, 0.10801109671592712, -0.1470484435558319, -0.15969330072402954, 0.07461661100387573, -0.08244793117046356 },
   { -0.06785565614700317, 0.04383495822548866, 0.10332740843296051, -0.14179065823554993, 0.0242951400578022, -0.18650414049625397, -0.44460734724998474, 0.10456467419862747, -0.16761618852615356, 0.12217693775892258 },
   { -0.005172254983335733, 0.036312755197286606, 0.1853438913822174, 0.05873042345046997, 0.052364662289619446, -0.24469324946403503, 0.03243301808834076, 0.002106196479871869, 0.0004593709309119731, -0.04689024016261101 },
   { 0.04701071232557297, 0.15462979674339294, 0.2164875715970993, 0.011609970591962337, -0.11084552109241486, -0.23359888792037964, -0.18947219848632812, 0.012386849150061607, 0.03526950255036354, -0.07773590087890625 },
   { -0.03601055219769478, -0.04077116400003433, 0.14154738187789917, -0.015074523165822029, -0.03741021454334259, -0.07935967296361923, -0.21121375262737274, 0.042942147701978683, -0.0699622631072998, -0.07358203083276749 },
   { -0.05651324987411499, -0.18296392261981964, 0.1247456818819046, 0.0539400652050972, 0.009563673287630081, 0.04599660262465477, -0.19024088978767395, -0.11216014623641968, 0.001286679063923657, 0.05686375871300697 },
   { -0.25556376576423645, -0.3312261998653412, 0.08724987506866455, 0.0550265796482563, 0.04313145950436592, 0.0028456873260438442, -0.0923798531293869, -0.2887994945049286, -0.01764719747006893, 0.1805364191532135 },
   { -0.4091792106628418, -0.3724358379840851, -0.014779910445213318, 0.10102560371160507, 0.12830744683742523, 0.11734983325004578, 0.12889787554740906, -0.4150056838989258, -0.006291346158832312, 0.1543606072664261 },
   { -0.54316645860672, -0.12540484964847565, -0.07610218226909637, 0.22767046093940735, -0.11421006917953491, 0.052409544587135315, 0.14377371966838837, -0.23683995008468628, 0.12668657302856445, 0.1216881200671196 },
   { -0.30094245076179504, -0.07812957465648651, -0.20681177079677582, 0.1113799661397934, -0.06971918046474457, 0.08655484020709991, 0.22296710312366486, -0.022472700104117393, 0.0875570997595787, -0.008283238857984543 },
   { -0.15581540763378143, -0.3290080726146698, -0.10891500115394592, -0.015384824946522713, 0.038239046931266785, 0.05688788369297981, 0.17764629423618317, -0.03812110424041748, 0.007392477709800005, -0.03949592262506485 },
   { -0.023631563410162926, -0.24506400525569916, -0.048578035086393356, -0.07808759808540344, -0.010725751519203186, 0.13000871241092682, 0.16849151253700256, -0.022798938676714897, 0.08784174174070358, -0.037059485912323 },
   { 0.114473357796669, 0.0776078924536705, -0.1029137521982193, -0.040993764996528625, 0.03692077100276947, -0.010628639720380306, 0.17438432574272156, -0.06090152636170387, -0.07185140252113342, 0.11090698093175888 },
   { 0.034944139420986176, 0.09070471674203873, 0.07500734180212021, -0.18023671209812164, 0.02579624578356743, -0.11056507378816605, 0.11009806394577026, -0.002972064772620797, -0.1110987737774849, -0.14678393304347992 },
   { 0.13511024415493011, 0.06715305894613266, 0.19757425785064697, -0.016006579622626305, -0.02824249118566513, -0.19508716464042664, -0.00024570850655436516, -0.025061272084712982, 0.034372106194496155, -0.19756567478179932 },
   { -0.0928850769996643, 0.03228933736681938, 0.18815557658672333, 0.018177757039666176, 0.1616508513689041, -0.06959676742553711, -0.03740809112787247, 0.054407812654972076, -0.15171876549720764, -0.14899346232414246 },
   { 0.07435537874698639, -0.2614242136478424, 0.1834966242313385, 0.029917128384113312, -0.08342693746089935, 0.03656894713640213, 0.051519181579351425, -0.09163902699947357, -0.09118372946977615, -0.21717987954616547 },
   { -0.02676527202129364, 0.016600647941231728, 0.17248277366161346, 0.02429983764886856, -0.07454703748226166, 0.054795041680336, -0.24532517790794373, -0.1300247311592102, 0.056741662323474884, -0.09610557556152344 },
   { 0.036486946046352386, -0.032040856778621674, 0.1365603357553482, -0.12962359189987183, 0.0315820649266243, -0.08504075556993484, -0.17333026230335236, -0.029332634061574936, 0.1900566667318344, -0.044168077409267426 },
   { -0.19524578750133514, -0.12107931077480316, 0.07626092433929443, 0.058414436876773834, 0.04151372238993645, -0.08397258073091507, -0.0960455983877182, -0.017397170886397362, 0.06464485824108124, 0.05847916007041931 },
   { -0.20990021526813507, -0.25409263372421265, 0.038356415927410126, 0.04118587076663971, 0.06632775068283081, -0.007559748366475105, -0.04422103986144066, -0.28798994421958923, -0.051881056278944016, 0.19771914184093475 },
   { -0.15438881516456604, -0.3630821406841278, 0.05128159373998642, 0.18675599992275238, 0.04507661983370781, -0.04921433702111244, 0.17758513987064362, -0.39405810832977295, 0.06497354805469513, 0.16034547984600067 },
   { -0.2982843816280365, -0.14500194787979126, -0.028490964323282242, 0.11061345040798187, -0.07030387967824936, -0.03380020707845688, 0.15088289976119995, -0.2157331258058548, 0.04818560555577278, -0.10459478944540024 },
   { -0.22801995277404785, -0.204191192984581, -0.01380717009305954, 0.06512155383825302, 0.051386758685112, 0.040227774530649185, 0.20045354962348938, 0.14367914199829102, 0.06137772276997566, -0.11764588952064514 },
   { -0.11396296322345734, -0.24564136564731598, -0.09025867283344269, 0.06281451135873795, 0.091899074614048, 0.10027095675468445, 0.07846657186746597, 0.05546104907989502, -0.03343172371387482, -0.16738732159137726 },
   { -0.022564711049199104, -0.08301247656345367, -0.05159993842244148, 0.009753696620464325, 0.000771663966588676, -0.02626153640449047, -0.020386746153235435, 0.11523550003767014, -0.030403517186641693, -0.21649092435836792 },
   { -0.07221552729606628, 0.12608790397644043, -0.07274173200130463, 0.1498693823814392, 0.028143063187599182, 0.08082403987646103, 0.04427027702331543, -0.0109408563002944, -0.07432393729686737, -0.043799273669719696 },
   { 0.1037973016500473, 0.008158914744853973, 0.02837597392499447, 0.15387722849845886, 0.030949678272008896, -0.04916088283061981, -0.07602714002132416, -0.055207595229148865, 0.05623910203576088, -0.09761666506528854 },
   { 0.07741406559944153, 0.0459170937538147, 0.337232381105423, -0.07834005355834961, -0.139280766248703, 0.031012585386633873, 0.1311117261648178, -0.26874756813049316, -0.28180283308029175, -0.39043450355529785 },
   { 0.016895370557904243, -0.04717489704489708, 0.11478418856859207, 0.0867987796664238, 0.009628931060433388, -0.09313614666461945, -0.02033393643796444, -0.0008066401933319867, -0.008360927924513817, -0.38561615347862244 },
   { -0.18697260320186615, -0.07484041899442673, -0.035824451595544815, 0.11747997254133224, 0.07358388602733612, 0.1641053855419159, -0.2895870804786682, -0.1390637308359146, -0.00797335896641016, -0.27715277671813965 },
   { -0.2328595221042633, 0.06240357831120491, -0.03583969920873642, 0.04697909951210022, 0.06013285368680954, 0.3423934876918793, -0.2697494328022003, -0.16653503477573395, -0.05036221444606781, -0.14848542213439941 },
   { -0.07851603627204895, 0.11264533549547195, 0.06027347594499588, 0.061039865016937256, 0.016153471544384956, 0.27043581008911133, -0.19006240367889404, 0.017641697078943253, 0.0030802516266703606, 0.05524148419499397 },
   { -0.08302390575408936, -0.26125311851501465, 0.010112786665558815, 0.1634557694196701, 0.005188532639294863, 0.07493645697832108, -0.25653067231178284, -0.1494305282831192, -0.05289561673998833, 0.2283775806427002 },
   { -0.029897769913077354, -0.31152620911598206, -0.09125082194805145, -0.002986658364534378, 0.07634144276380539, -0.04126422852277756, -0.02729629911482334, -0.23936259746551514, -0.08092788606882095, 0.30980145931243896 },
   { -0.089481420814991, -0.3587892949581146, -0.013144317083060741, 0.07283854484558105, 0.08131621778011322, -0.08716463297605515, 0.028339188545942307, -0.2522338330745697, 0.023495646193623543, 0.005836488213390112 },
   { -0.03864342346787453, -0.07244609296321869, 0.0003099330060649663, 0.10857861489057541, -0.09298364073038101, 0.05006428435444832, 0.18341729044914246, -0.00030228972900658846, 0.10695819556713104, -0.2543383240699768 },
   { -0.04527181014418602, -0.19303444027900696, 0.006384402047842741, 0.05405985563993454, 0.038614436984062195, 0.02207721211016178, 0.192717507481575, 0.02161889337003231, 0.04340905696153641, -0.32519227266311646 },
   { -0.17200274765491486, -0.20120985805988312, -0.017755655571818352, 0.0035988192539662123, 0.09810343384742737, 0.0523429811000824, 0.009388240985572338, 0.1423014998435974, 0.06316421926021576, -0.2532839775085449 },
   { -0.05234258994460106, 0.030759138986468315, 0.026856712996959686, 0.050380513072013855, 0.03847265616059303, 0.05191732943058014, -0.002284873044118285, -0.06542588025331497, 0.11810086667537689, -0.21286915242671967 },
   { 0.027349870651960373, 0.14323844015598297, 0.07131054997444153, -0.005751593038439751, 0.026904575526714325, 0.05851219221949577, 0.04201442003250122, -0.020237887278199196, 0.11293315887451172, -0.21056711673736572 },
   { -0.010942635126411915, 0.014036961831152439, -0.08141259849071503, -0.06777414679527283, -0.04925152286887169, 0.04749254882335663, 0.09906383603811264, -0.08217496424913406, 0.09748987853527069, -0.04581926017999649 },
   { -0.09788811206817627, 0.07182522863149643, 0.10385959595441818, -0.08707258105278015, -0.1004849225282669, 0.06234340742230415, 0.021754784509539604, 0.005375953391194344, -0.056147683411836624, -0.32525286078453064 },
   { 0.19205497205257416, -0.0546511672437191, 0.12318823486566544, -0.0765068307518959, 0.1699223816394806, 0.036729298532009125, 0.08288879692554474, -0.1828094720840454, -0.06513931602239609, -0.37098175287246704 },
   { -0.14277799427509308, -0.03906610235571861, 0.0830455869436264, 0.023814387619495392, 0.17976069450378418, 0.10841475427150726, -0.24532882869243622, -0.050691451877355576, 0.05546104535460472, -0.3101918399333954 },
   { -0.23573152720928192, 0.07260309904813766, -0.0578005351126194, 0.23466578125953674, 0.0296669602394104, 0.21237589418888092, -0.438587486743927, -0.10167007148265839, -0.08033601939678192, -0.09902802109718323 },
   { 0.009743344970047474, 0.14826704561710358, -0.14960068464279175, 0.11936024576425552, -0.03751613199710846, 0.22450385987758636, -0.19004078209400177, -0.0934206172823906, -0.24393333494663239, 0.06576021015644073 },
   { -0.09454286098480225, 0.049427274614572525, -0.08034475147724152, 0.0696929469704628, -0.02186606265604496, 0.1078452542424202, -0.08504022657871246, -0.1647101491689682, -0.15678749978542328, 0.21188978850841522 },
   { 0.1291157752275467, -0.19735530018806458, -0.012496301904320717, 0.13148891925811768, -0.025707418099045753, 0.09586023539304733, -0.06672365218400955, -0.30804601311683655, -0.18532447516918182, 0.03893764317035675 },
   { 0.005273525603115559, -0.11527552455663681, 0.11981205642223358, 0.12114932388067245, -0.061771705746650696, 0.06030617654323578, 0.06873391568660736, -0.28006449341773987, -0.006156544666737318, -0.21395926177501678 },
   { -0.04110655561089516, 0.07350563257932663, 0.020035790279507637, 0.07268863171339035, -0.05632515251636505, 0.016520660370588303, 0.043919987976551056, -0.15896521508693695, 0.08971191942691803, -0.2618069350719452 },
   { -0.10325514525175095, -0.0006361401174217463, 0.046272605657577515, -0.015591109171509743, 0.026819659397006035, 0.030966632068157196, -0.037767715752124786, -0.054355595260858536, 0.0907413586974144, -0.23490646481513977 },
   { -0.052307792007923126, 0.1281638890504837, 0.08928664773702621, -0.06648386269807816, -0.07343552261590958, -0.06659581512212753, -0.026290472596883774, 0.033345822244882584, 0.039879340678453445, -0.20847010612487793 },
   { -0.15775106847286224, 0.128141850233078, 0.14609386026859283, -0.045305151492357254, -0.00974238757044077, 0.003143175272271037, -0.01573009230196476, 0.021461613476276398, -0.0288387518376112, -0.19293712079524994 },
   { -0.20296941697597504, 0.21302813291549683, 0.0722055435180664, -0.015856143087148666, 0.000926401000469923, 0.11330616474151611, 0.035483524203300476, -0.14179262518882751, -0.02446889318525791, 0.014482024125754833 },
   { -0.12326963245868683, 0.04679049178957939, -0.05704794451594353, 0.012850651517510414, -0.167276069521904, 0.02003704383969307, 0.015072629787027836, -0.17960970103740692, 0.0036242837086319923, 0.022240275517106056 },
   { -0.13849765062332153, 0.07987357676029205, 0.04809930920600891, -0.2693413197994232, -0.14444272220134735, 0.0462539903819561, -0.06838006526231766, -0.12432046979665756, -0.06432601809501648, 0.01830640248954296 },
   { -0.1505330502986908, 0.01633150316774845, 0.09762506932020187, 0.013971460051834583, -0.22474855184555054, -0.03782351315021515, -0.24906489253044128, -0.08732419461011887, -0.10163869708776474, -0.25327375531196594 },
   { -0.22746641933918, 0.16371557116508484, 0.08858586847782135, 0.030226724222302437, -0.04937330633401871, 0.16603606939315796, -0.46302929520606995, 0.07038771361112595, -0.08233404904603958, -0.12719477713108063 },
   { -0.1590443253517151, 0.07375884056091309, -0.0859188362956047, 0.20583395659923553, 0.04554953798651695, 0.1265326291322708, -0.3950585424900055, 0.040337760001420975, -0.0888342559337616, 0.043479882180690765 },
   { 0.016082627698779106, 0.10050050169229507, -0.10488560050725937, 0.1680704951286316, -0.06818115711212158, 0.15389367938041687, -0.19563595950603485, -0.09989648312330246, -0.12834694981575012, 0.11443443596363068 },
   { -0.026346154510974884, -0.06040041521191597, -0.049859173595905304, 0.07879484444856644, -0.19751739501953125, 0.037844035774469376, -0.055188052356243134, -0.18062080442905426, -0.10752172768115997, 0.11654902249574661 },
   { 0.08611154556274414, -0.23481589555740356, 0.07643506675958633, 0.14018917083740234, -0.4013017416000366, 0.10176258534193039, 0.014368363656103611, -0.38438352942466736, -0.048871446400880814, 0.05000780150294304 },
   { 0.15227477252483368, -0.15489865839481354, 0.06450048089027405, 0.10962852090597153, -0.3960486054420471, 0.04840792715549469, -0.02716636285185814, -0.30546462535858154, -0.005605443846434355, -0.05806129053235054 },
   { 0.04454716667532921, -0.0005371971637941897, 0.08073725551366806, -0.05440911278128624, -0.4118511974811554, -0.056007158011198044, 0.049653954803943634, -0.12341774255037308, 0.060593388974666595, -0.04001205787062645 },
   { 0.12680372595787048, 0.004443735349923372, 0.2389390766620636, -0.027516046538949013, -0.20262596011161804, 0.03987656533718109, -0.009216920472681522, -0.08824634552001953, -0.01980500854551792, -0.10567792505025864 },
   { -0.059311557561159134, 0.06886113435029984, 0.32488977909088135, -0.06919039785861969, -0.06832156330347061, -0.05559449642896652, 0.007427787408232689, -0.19432349503040314, -0.028667105361819267, -0.055052500218153 },
   { -0.13758747279644012, 0.09280037134885788, 0.26115208864212036, -0.10627561807632446, 0.0906272828578949, -0.007813715375959873, -0.000714469060767442, -0.10655485838651657, -0.06355155259370804, -0.16278187930583954 },
   { -0.11698099970817566, 0.11810291558504105, 0.1181185320019722, 0.002239169320091605, 0.011830724775791168, -0.06413665413856506, 0.0233880914747715, -0.17697229981422424, -0.013973698951303959, 0.04666266217827797 },
   { -0.12679074704647064, 0.0032196633983403444, -0.016145184636116028, 0.0007928835693746805, -0.0002205388154834509, 0.12139962613582611, -0.1358446478843689, -0.3171556890010834, -0.09876285493373871, 0.0634133517742157 },
   { -0.07116449624300003, 0.21229195594787598, 0.009993311017751694, -0.12478581815958023, -0.12566469609737396, -0.025201551616191864, -0.01887083612382412, -0.18938224017620087, -0.19020144641399384, 0.11887764930725098 },
   { -0.20176978409290314, -0.0926777571439743, -0.08300546556711197, 0.24869254231452942, -0.32382696866989136, -0.040587350726127625, -0.1161360815167427, 0.21950213611125946, -0.23632630705833435, -0.05878914147615433 },
   { -0.24504879117012024, -0.17552950978279114, -0.19043666124343872, 0.34922268986701965, -0.12136363238096237, 0.0437716543674469, -0.14327548444271088, 0.037933241575956345, -0.3509502410888672, 0.06737663596868515 },
   { -0.28713473677635193, -0.08574117720127106, -0.2605840563774109, 0.2411993145942688, -0.04194376617670059, 0.04660535976290703, -0.43759164214134216, 0.1361643224954605, -0.30595389008522034, 0.11226565390825272 },
   { -0.09075568616390228, -0.10483061522245407, -0.19445304572582245, 0.2442074418067932, -0.14074043929576874, 0.1662612408399582, -0.4559617340564728, -0.02111877128481865, -0.11159659177064896, 0.1991177797317505 },
   { 0.03298759460449219, -0.2773551642894745, 0.010222896933555603, 0.15628992021083832, -0.29199180006980896, 0.12377674877643585, -0.044559966772794724, -0.24720211327075958, 0.01630207523703575, 0.04392773285508156 },
   { 0.010898959822952747, -0.28211817145347595, 0.04126070439815521, 0.18332265317440033, -0.27431055903434753, 0.15925733745098114, -0.06721111387014389, -0.29591789841651917, 0.08029333502054214, -0.02029775269329548 },
   { -0.001448313007131219, -0.15075841546058655, 0.018223201856017113, 0.08876145631074905, -0.17889085412025452, 0.08232146501541138, -0.007941811345517635, -0.281206876039505, 0.0175312589854002, -0.03801953047513962 },
   { -0.05743629112839699, -0.04421260952949524, -0.0011533142533153296, 0.03689984232187271, -0.13139235973358154, 0.06424342840909958, 0.11668407917022705, -0.18857808411121368, -0.01749781332910061, -0.04631424322724342 },
   { -0.10680323094129562, -0.035300176590681076, 0.15159013867378235, 0.022567663341760635, -0.07009257376194, -0.02142309583723545, 0.043767258524894714, -0.24519503116607666, 0.08211617916822433, -0.0908784344792366 },
   { -0.11513707786798477, 0.05556638911366463, 0.2641458213329315, -0.16844171285629272, 0.07254142314195633, -0.052620548754930496, 0.00896382238715887, -0.08965834230184555, 0.07451102882623672, -0.0015861064894124866 },
   { -0.31956732273101807, 0.17311640083789825, 0.2835690975189209, -0.23892386257648468, 0.0183886606246233, -0.1758696287870407, 0.007417140528559685, -0.08761095255613327, -0.050502125173807144, 0.03655221313238144 },
   { -0.25084182620048523, -0.09050958603620529, 0.150841623544693, -0.19826926290988922, 0.13821640610694885, -0.00889429822564125, -0.06759712100028992, -0.043840233236551285, -0.07429957389831543, 0.05251370370388031 },
   { -0.20382905006408691, -0.17804193496704102, 0.14468030631542206, -0.19391866028308868, 0.016085011884570122, 0.0003873347886838019, -0.19803187251091003, -0.23853614926338196, -0.024760710075497627, 0.04452245309948921 },
   { -0.05774103105068207, -0.060677915811538696, 0.17127753794193268, -0.3283173441886902, -0.03768758848309517, -0.06403107196092606, -0.3249267637729645, -0.1479126214981079, -0.21394100785255432, 0.1844014823436737 },
   { -0.11214514076709747, -0.20030583441257477, -0.40714016556739807, 0.03458590433001518, -0.2822881042957306, -0.15190830826759338, 0.05149839073419571, 0.14055687189102173, -0.4965081214904785, 0.015180465765297413 },
   { -0.22343555092811584, -0.2576158344745636, -0.07027656584978104, 0.2603769600391388, -0.27607226371765137, -0.08697530627250671, -0.15793566405773163, 0.011021165177226067, -0.4876229763031006, 0.2105308324098587 },
   { -0.3718158006668091, -0.1911824345588684, -0.20629020035266876, 0.4617106318473816, -0.40326738357543945, -0.1414385735988617, -0.1963544338941574, -0.09723397344350815, -0.37016886472702026, 0.06409526616334915 },
   { -0.41282039880752563, -0.2561200261116028, -0.3361469507217407, 0.40086829662323, -0.3213615119457245, 0.06827884912490845, 0.009155587293207645, -0.013796037994325161, -0.15832430124282837, 0.05266232416033745 },
   { -0.3175075650215149, -0.1301531046628952, -0.06013580039143562, 0.44473734498023987, -0.5188509225845337, 0.2123018503189087, 0.016120705753564835, -0.07721178978681564, -0.0843757763504982, -0.0926402136683464 },
   { -0.19933947920799255, -0.14710763096809387, -0.03169563412666321, 0.3297673761844635, -0.2234080731868744, 0.15998311340808868, 0.05621358007192612, -0.23226363956928253, -0.029691487550735474, -0.1999284327030182 },
   { -0.20894840359687805, -0.2557443082332611, -0.04683477059006691, 0.1667214184999466, -0.07444101572036743, 0.12407464534044266, -0.03681429103016853, -0.03450828790664673, -0.03697371482849121, -0.005404736381024122 },
   { -0.3376200795173645, -0.14158055186271667, 0.21343936026096344, -0.11813603341579437, -0.13243500888347626, 0.01093216985464096, 0.004485378973186016, -0.08705785870552063, 0.008319182321429253, 0.15420709550380707 },
   { -0.48094314336776733, -0.10720854997634888, 0.2741316258907318, -0.08783724904060364, -0.019323060289025307, 0.08519012480974197, -0.1756049543619156, -0.16877976059913635, 0.04259040951728821, 0.12875816226005554 },
   { -0.34004414081573486, -0.16906128823757172, 0.3236715495586395, -0.05095463991165161, -0.12857097387313843, -0.16489683091640472, -0.19270029664039612, -0.046868108212947845, -0.11821866035461426, 0.15398027002811432 },
   { -0.23719434440135956, -0.04118319973349571, 0.3415813148021698, -0.10947856307029724, -0.1159214898943901, -0.13695764541625977, -0.2835717797279358, 0.0414666049182415, -0.3117745518684387, 0.1820915937423706 },
   { -0.4208112061023712, 0.01383352279663086, 0.0048586647026240826, -0.16120801866054535, -0.13623914122581482, -0.02895929478108883, -0.10389799624681473, 0.1271253079175949, -0.25026965141296387, 0.23273396492004395 },
   { -0.19428589940071106, -0.14522862434387207, 0.15429656207561493, -0.38259047269821167, 0.015563747845590115, 0.1328771561384201, -0.31724604964256287, -0.01756775565445423, -0.2246536761522293, 0.1571047008037567 },
   { -0.013132335618138313, -0.09370671212673187, 0.19101829826831818, -0.07896684110164642, -0.07151290774345398, 0.0007515718461945653, -0.24512863159179688, -0.055492937564849854, -0.31575217843055725, -0.0008254863787442446 },
   { -0.03807370364665985, 0.041384972631931305, -0.057950567454099655, -0.08582331240177155, -0.005402328912168741, -0.13155771791934967, -0.008442826569080353, -0.13148556649684906, -0.0073816170915961266, 0.13071255385875702 },
   { 0.006254822481423616, -0.017306147143244743, 0.016872381791472435, -0.06489429622888565, -0.08618876338005066, -0.13077899813652039, 0.02122657001018524, -0.23762930929660797, -0.04083937406539917, 0.25197362899780273 },
   { -0.03933798521757126, 0.014387994073331356, -0.06627786159515381, 0.011912836693227291, -0.02292594499886036, 0.007691326085478067, -0.013479538261890411, 0.193353533744812, -0.05097692459821701, -0.14397798478603363 },
   { 0.023767301812767982, 0.19417810440063477, 0.011773458682000637, -0.09319141507148743, -0.029630793258547783, -0.010264224372804165, -0.11415176093578339, -0.0066429921425879, -0.06863296031951904, -0.0427887849509716 },
   { 0.03163022920489311, 0.15997184813022614, 0.03359402343630791, -0.05998288094997406, -0.033850569278001785, -0.004459747578948736, -0.04205763339996338, -0.08580437302589417, 0.014163090847432613, 0.016728585585951805 },
   { 0.016661159694194794, 0.03220396861433983, -0.2141181230545044, 0.007595405913889408, 0.0668095201253891, 0.06572792679071426, -0.1242026686668396, 0.0731511041522026, -0.1369987279176712, 0.050654228776693344 },
   { 0.13080564141273499, 0.08541900664567947, -0.29869288206100464, 0.049312934279441833, -0.0016106629045680165, 0.08082292228937149, -0.11682211607694626, -0.130117729306221, -0.03486265614628792, 0.14362110197544098 },
   { -0.10298189520835876, 0.019322501495480537, -0.20742473006248474, 0.06280660629272461, 0.03600506857037544, 0.0701645240187645, -0.1550396978855133, -0.00370763149112463, -0.16056375205516815, 0.1360037922859192 },
   { -0.19120460748672485, 0.11822916567325592, -0.11915157735347748, 0.03599122166633606, 0.06157803162932396, -0.06879624724388123, -0.18363644182682037, 0.012267567217350006, -0.22114641964435577, 0.07564371079206467 },
   { -0.24823570251464844, -0.04604870826005936, 0.10347670316696167, -0.018792368471622467, -0.0015386567683890462, -0.18414241075515747, 0.021216997876763344, 0.008039824664592743, -0.1418430209159851, 0.12614105641841888 },
   { -0.2865450978279114, -0.06289192289113998, 0.1692572832107544, -0.13828611373901367, 0.022607430815696716, -0.1723092645406723, -0.2941296398639679, 0.0500989705324173, -0.2387869507074356, 0.15085376799106598 },
   { -0.25413841009140015, -0.04907967522740364, 0.005505661014467478, -0.19120466709136963, -0.32613834738731384, -0.21456323564052582, -0.15694499015808105, 0.189361572265625, -0.2688572108745575, 0.21070922911167145 },
   { -0.1352069228887558, -0.08090072125196457, -0.09010681509971619, -0.30107539892196655, 0.015896111726760864, 0.055124420672655106, -0.1467699259519577, 0.033011846244335175, -0.35182273387908936, 0.14380456507205963 },
   { 0.0029569482430815697, 0.09012769907712936, 0.05348467826843262, -0.08917564153671265, 0.14813603460788727, 0.04775448888540268, 0.10163742303848267, -0.034778352826833725, -0.3272581696510315, -0.14638881385326385 }
  };


float dense_biases [10] = { 0.041882749646902084, 0.11577547341585159, 0.07120637595653534, -0.11242126673460007, -0.020762022584676743, 0.05534157529473305, -0.015433913096785545, 0.13599763810634613, -0.175348162651062, -0.0346175916492939 };
# 3 "CNN_Non_Optimal/src/dense.cpp" 2
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3

# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 236 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 39 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 394 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 395 "/usr/include/features.h" 2 3 4
# 480 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 481 "/usr/include/features.h" 2 3 4
# 502 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 576 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 577 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 578 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 503 "/usr/include/features.h" 2 3 4
# 526 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 527 "/usr/include/features.h" 2 3 4
# 40 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 2 3
# 509 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 512 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 42 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 1 3
# 36 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
# 67 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 1 3
# 33 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbit (double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinf (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnan (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) noexcept (true);


extern int __issignaling (double __value) noexcept (true)
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double acos (double __x) noexcept (true); extern double __acos (double __x) noexcept (true);

 extern double asin (double __x) noexcept (true); extern double __asin (double __x) noexcept (true);

 extern double atan (double __x) noexcept (true); extern double __atan (double __x) noexcept (true);

 extern double atan2 (double __y, double __x) noexcept (true); extern double __atan2 (double __y, double __x) noexcept (true);


 extern double cos (double __x) noexcept (true); extern double __cos (double __x) noexcept (true);

 extern double sin (double __x) noexcept (true); extern double __sin (double __x) noexcept (true);

 extern double tan (double __x) noexcept (true); extern double __tan (double __x) noexcept (true);




 extern double cosh (double __x) noexcept (true); extern double __cosh (double __x) noexcept (true);

 extern double sinh (double __x) noexcept (true); extern double __sinh (double __x) noexcept (true);

 extern double tanh (double __x) noexcept (true); extern double __tanh (double __x) noexcept (true);



 extern void sincos (double __x, double *__sinx, double *__cosx) noexcept (true); extern void __sincos (double __x, double *__sinx, double *__cosx) noexcept (true);





 extern double acosh (double __x) noexcept (true); extern double __acosh (double __x) noexcept (true);

 extern double asinh (double __x) noexcept (true); extern double __asinh (double __x) noexcept (true);

 extern double atanh (double __x) noexcept (true); extern double __atanh (double __x) noexcept (true);





 extern double exp (double __x) noexcept (true); extern double __exp (double __x) noexcept (true);


extern double frexp (double __x, int *__exponent) noexcept (true); extern double __frexp (double __x, int *__exponent) noexcept (true);


extern double ldexp (double __x, int __exponent) noexcept (true); extern double __ldexp (double __x, int __exponent) noexcept (true);


 extern double log (double __x) noexcept (true); extern double __log (double __x) noexcept (true);


 extern double log10 (double __x) noexcept (true); extern double __log10 (double __x) noexcept (true);


extern double modf (double __x, double *__iptr) noexcept (true); extern double __modf (double __x, double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern double exp10 (double __x) noexcept (true); extern double __exp10 (double __x) noexcept (true);




 extern double expm1 (double __x) noexcept (true); extern double __expm1 (double __x) noexcept (true);


 extern double log1p (double __x) noexcept (true); extern double __log1p (double __x) noexcept (true);


extern double logb (double __x) noexcept (true); extern double __logb (double __x) noexcept (true);




 extern double exp2 (double __x) noexcept (true); extern double __exp2 (double __x) noexcept (true);


 extern double log2 (double __x) noexcept (true); extern double __log2 (double __x) noexcept (true);






 extern double pow (double __x, double __y) noexcept (true); extern double __pow (double __x, double __y) noexcept (true);


extern double sqrt (double __x) noexcept (true); extern double __sqrt (double __x) noexcept (true);



 extern double hypot (double __x, double __y) noexcept (true); extern double __hypot (double __x, double __y) noexcept (true);




 extern double cbrt (double __x) noexcept (true); extern double __cbrt (double __x) noexcept (true);






extern double ceil (double __x) noexcept (true) __attribute__ ((__const__)); extern double __ceil (double __x) noexcept (true) __attribute__ ((__const__));


extern double fabs (double __x) noexcept (true) __attribute__ ((__const__)); extern double __fabs (double __x) noexcept (true) __attribute__ ((__const__));


extern double floor (double __x) noexcept (true) __attribute__ ((__const__)); extern double __floor (double __x) noexcept (true) __attribute__ ((__const__));


extern double fmod (double __x, double __y) noexcept (true); extern double __fmod (double __x, double __y) noexcept (true);
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern double drem (double __x, double __y) noexcept (true); extern double __drem (double __x, double __y) noexcept (true);



extern double significand (double __x) noexcept (true); extern double __significand (double __x) noexcept (true);






extern double copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double nan (const char *__tagb) noexcept (true); extern double __nan (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) noexcept (true); extern double __j0 (double) noexcept (true);
extern double j1 (double) noexcept (true); extern double __j1 (double) noexcept (true);
extern double jn (int, double) noexcept (true); extern double __jn (int, double) noexcept (true);
extern double y0 (double) noexcept (true); extern double __y0 (double) noexcept (true);
extern double y1 (double) noexcept (true); extern double __y1 (double) noexcept (true);
extern double yn (int, double) noexcept (true); extern double __yn (int, double) noexcept (true);





 extern double erf (double) noexcept (true); extern double __erf (double) noexcept (true);
 extern double erfc (double) noexcept (true); extern double __erfc (double) noexcept (true);
extern double lgamma (double) noexcept (true); extern double __lgamma (double) noexcept (true);




extern double tgamma (double) noexcept (true); extern double __tgamma (double) noexcept (true);





extern double gamma (double) noexcept (true); extern double __gamma (double) noexcept (true);







extern double lgamma_r (double, int *__signgamp) noexcept (true); extern double __lgamma_r (double, int *__signgamp) noexcept (true);






extern double rint (double __x) noexcept (true); extern double __rint (double __x) noexcept (true);


extern double nextafter (double __x, double __y) noexcept (true); extern double __nextafter (double __x, double __y) noexcept (true);

extern double nexttoward (double __x, long double __y) noexcept (true); extern double __nexttoward (double __x, long double __y) noexcept (true);




extern double nextdown (double __x) noexcept (true); extern double __nextdown (double __x) noexcept (true);

extern double nextup (double __x) noexcept (true); extern double __nextup (double __x) noexcept (true);



extern double remainder (double __x, double __y) noexcept (true); extern double __remainder (double __x, double __y) noexcept (true);



extern double scalbn (double __x, int __n) noexcept (true); extern double __scalbn (double __x, int __n) noexcept (true);



extern int ilogb (double __x) noexcept (true); extern int __ilogb (double __x) noexcept (true);




extern long int llogb (double __x) noexcept (true); extern long int __llogb (double __x) noexcept (true);




extern double scalbln (double __x, long int __n) noexcept (true); extern double __scalbln (double __x, long int __n) noexcept (true);



extern double nearbyint (double __x) noexcept (true); extern double __nearbyint (double __x) noexcept (true);



extern double round (double __x) noexcept (true) __attribute__ ((__const__)); extern double __round (double __x) noexcept (true) __attribute__ ((__const__));



extern double trunc (double __x) noexcept (true) __attribute__ ((__const__)); extern double __trunc (double __x) noexcept (true) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) noexcept (true); extern double __remquo (double __x, double __y, int *__quo) noexcept (true);






extern long int lrint (double __x) noexcept (true); extern long int __lrint (double __x) noexcept (true);
__extension__
extern long long int llrint (double __x) noexcept (true); extern long long int __llrint (double __x) noexcept (true);



extern long int lround (double __x) noexcept (true); extern long int __lround (double __x) noexcept (true);
__extension__
extern long long int llround (double __x) noexcept (true); extern long long int __llround (double __x) noexcept (true);



extern double fdim (double __x, double __y) noexcept (true); extern double __fdim (double __x, double __y) noexcept (true);



extern double fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) noexcept (true); extern double __fma (double __x, double __y, double __z) noexcept (true);




extern double roundeven (double __x) noexcept (true) __attribute__ ((__const__)); extern double __roundeven (double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalize (double *__cx, const double *__x) noexcept (true);






extern double fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) noexcept (true); extern double __getpayload (const double *__x) noexcept (true);


extern int setpayload (double *__x, double __payload) noexcept (true);


extern int setpayloadsig (double *__x, double __payload) noexcept (true);







extern double scalb (double __x, double __n) noexcept (true); extern double __scalb (double __x, double __n) noexcept (true);
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf (float __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) noexcept (true);


extern int __issignalingf (float __value) noexcept (true)
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float acosf (float __x) noexcept (true); extern float __acosf (float __x) noexcept (true);

 extern float asinf (float __x) noexcept (true); extern float __asinf (float __x) noexcept (true);

 extern float atanf (float __x) noexcept (true); extern float __atanf (float __x) noexcept (true);

 extern float atan2f (float __y, float __x) noexcept (true); extern float __atan2f (float __y, float __x) noexcept (true);


 extern float cosf (float __x) noexcept (true); extern float __cosf (float __x) noexcept (true);

 extern float sinf (float __x) noexcept (true); extern float __sinf (float __x) noexcept (true);

 extern float tanf (float __x) noexcept (true); extern float __tanf (float __x) noexcept (true);




 extern float coshf (float __x) noexcept (true); extern float __coshf (float __x) noexcept (true);

 extern float sinhf (float __x) noexcept (true); extern float __sinhf (float __x) noexcept (true);

 extern float tanhf (float __x) noexcept (true); extern float __tanhf (float __x) noexcept (true);



 extern void sincosf (float __x, float *__sinx, float *__cosx) noexcept (true); extern void __sincosf (float __x, float *__sinx, float *__cosx) noexcept (true);





 extern float acoshf (float __x) noexcept (true); extern float __acoshf (float __x) noexcept (true);

 extern float asinhf (float __x) noexcept (true); extern float __asinhf (float __x) noexcept (true);

 extern float atanhf (float __x) noexcept (true); extern float __atanhf (float __x) noexcept (true);





 extern float expf (float __x) noexcept (true); extern float __expf (float __x) noexcept (true);


extern float frexpf (float __x, int *__exponent) noexcept (true); extern float __frexpf (float __x, int *__exponent) noexcept (true);


extern float ldexpf (float __x, int __exponent) noexcept (true); extern float __ldexpf (float __x, int __exponent) noexcept (true);


 extern float logf (float __x) noexcept (true); extern float __logf (float __x) noexcept (true);


 extern float log10f (float __x) noexcept (true); extern float __log10f (float __x) noexcept (true);


extern float modff (float __x, float *__iptr) noexcept (true); extern float __modff (float __x, float *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern float exp10f (float __x) noexcept (true); extern float __exp10f (float __x) noexcept (true);




 extern float expm1f (float __x) noexcept (true); extern float __expm1f (float __x) noexcept (true);


 extern float log1pf (float __x) noexcept (true); extern float __log1pf (float __x) noexcept (true);


extern float logbf (float __x) noexcept (true); extern float __logbf (float __x) noexcept (true);




 extern float exp2f (float __x) noexcept (true); extern float __exp2f (float __x) noexcept (true);


 extern float log2f (float __x) noexcept (true); extern float __log2f (float __x) noexcept (true);






 extern float powf (float __x, float __y) noexcept (true); extern float __powf (float __x, float __y) noexcept (true);


extern float sqrtf (float __x) noexcept (true); extern float __sqrtf (float __x) noexcept (true);



 extern float hypotf (float __x, float __y) noexcept (true); extern float __hypotf (float __x, float __y) noexcept (true);




 extern float cbrtf (float __x) noexcept (true); extern float __cbrtf (float __x) noexcept (true);






extern float ceilf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __ceilf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fabsf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __fabsf (float __x) noexcept (true) __attribute__ ((__const__));


extern float floorf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __floorf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) noexcept (true); extern float __fmodf (float __x, float __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) noexcept (true); extern float __dremf (float __x, float __y) noexcept (true);



extern float significandf (float __x) noexcept (true); extern float __significandf (float __x) noexcept (true);






extern float copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float nanf (const char *__tagb) noexcept (true); extern float __nanf (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));





extern float j0f (float) noexcept (true); extern float __j0f (float) noexcept (true);
extern float j1f (float) noexcept (true); extern float __j1f (float) noexcept (true);
extern float jnf (int, float) noexcept (true); extern float __jnf (int, float) noexcept (true);
extern float y0f (float) noexcept (true); extern float __y0f (float) noexcept (true);
extern float y1f (float) noexcept (true); extern float __y1f (float) noexcept (true);
extern float ynf (int, float) noexcept (true); extern float __ynf (int, float) noexcept (true);





 extern float erff (float) noexcept (true); extern float __erff (float) noexcept (true);
 extern float erfcf (float) noexcept (true); extern float __erfcf (float) noexcept (true);
extern float lgammaf (float) noexcept (true); extern float __lgammaf (float) noexcept (true);




extern float tgammaf (float) noexcept (true); extern float __tgammaf (float) noexcept (true);





extern float gammaf (float) noexcept (true); extern float __gammaf (float) noexcept (true);







extern float lgammaf_r (float, int *__signgamp) noexcept (true); extern float __lgammaf_r (float, int *__signgamp) noexcept (true);






extern float rintf (float __x) noexcept (true); extern float __rintf (float __x) noexcept (true);


extern float nextafterf (float __x, float __y) noexcept (true); extern float __nextafterf (float __x, float __y) noexcept (true);

extern float nexttowardf (float __x, long double __y) noexcept (true); extern float __nexttowardf (float __x, long double __y) noexcept (true);




extern float nextdownf (float __x) noexcept (true); extern float __nextdownf (float __x) noexcept (true);

extern float nextupf (float __x) noexcept (true); extern float __nextupf (float __x) noexcept (true);



extern float remainderf (float __x, float __y) noexcept (true); extern float __remainderf (float __x, float __y) noexcept (true);



extern float scalbnf (float __x, int __n) noexcept (true); extern float __scalbnf (float __x, int __n) noexcept (true);



extern int ilogbf (float __x) noexcept (true); extern int __ilogbf (float __x) noexcept (true);




extern long int llogbf (float __x) noexcept (true); extern long int __llogbf (float __x) noexcept (true);




extern float scalblnf (float __x, long int __n) noexcept (true); extern float __scalblnf (float __x, long int __n) noexcept (true);



extern float nearbyintf (float __x) noexcept (true); extern float __nearbyintf (float __x) noexcept (true);



extern float roundf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundf (float __x) noexcept (true) __attribute__ ((__const__));



extern float truncf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __truncf (float __x) noexcept (true) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) noexcept (true); extern float __remquof (float __x, float __y, int *__quo) noexcept (true);






extern long int lrintf (float __x) noexcept (true); extern long int __lrintf (float __x) noexcept (true);
__extension__
extern long long int llrintf (float __x) noexcept (true); extern long long int __llrintf (float __x) noexcept (true);



extern long int lroundf (float __x) noexcept (true); extern long int __lroundf (float __x) noexcept (true);
__extension__
extern long long int llroundf (float __x) noexcept (true); extern long long int __llroundf (float __x) noexcept (true);



extern float fdimf (float __x, float __y) noexcept (true); extern float __fdimf (float __x, float __y) noexcept (true);



extern float fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) noexcept (true); extern float __fmaf (float __x, float __y, float __z) noexcept (true);




extern float roundevenf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundevenf (float __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef (float *__cx, const float *__x) noexcept (true);






extern float fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) noexcept (true); extern float __getpayloadf (const float *__x) noexcept (true);


extern int setpayloadf (float *__x, float __payload) noexcept (true);


extern int setpayloadsigf (float *__x, float __payload) noexcept (true);







extern float scalbf (float __x, float __n) noexcept (true); extern float __scalbf (float __x, float __n) noexcept (true);
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitl (long double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) noexcept (true);


extern int __issignalingl (long double __value) noexcept (true)
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) noexcept (true); extern long double __acosl (long double __x) noexcept (true);

 extern long double asinl (long double __x) noexcept (true); extern long double __asinl (long double __x) noexcept (true);

 extern long double atanl (long double __x) noexcept (true); extern long double __atanl (long double __x) noexcept (true);

 extern long double atan2l (long double __y, long double __x) noexcept (true); extern long double __atan2l (long double __y, long double __x) noexcept (true);


 extern long double cosl (long double __x) noexcept (true); extern long double __cosl (long double __x) noexcept (true);

 extern long double sinl (long double __x) noexcept (true); extern long double __sinl (long double __x) noexcept (true);

 extern long double tanl (long double __x) noexcept (true); extern long double __tanl (long double __x) noexcept (true);




 extern long double coshl (long double __x) noexcept (true); extern long double __coshl (long double __x) noexcept (true);

 extern long double sinhl (long double __x) noexcept (true); extern long double __sinhl (long double __x) noexcept (true);

 extern long double tanhl (long double __x) noexcept (true); extern long double __tanhl (long double __x) noexcept (true);



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true);





 extern long double acoshl (long double __x) noexcept (true); extern long double __acoshl (long double __x) noexcept (true);

 extern long double asinhl (long double __x) noexcept (true); extern long double __asinhl (long double __x) noexcept (true);

 extern long double atanhl (long double __x) noexcept (true); extern long double __atanhl (long double __x) noexcept (true);





 extern long double expl (long double __x) noexcept (true); extern long double __expl (long double __x) noexcept (true);


extern long double frexpl (long double __x, int *__exponent) noexcept (true); extern long double __frexpl (long double __x, int *__exponent) noexcept (true);


extern long double ldexpl (long double __x, int __exponent) noexcept (true); extern long double __ldexpl (long double __x, int __exponent) noexcept (true);


 extern long double logl (long double __x) noexcept (true); extern long double __logl (long double __x) noexcept (true);


 extern long double log10l (long double __x) noexcept (true); extern long double __log10l (long double __x) noexcept (true);


extern long double modfl (long double __x, long double *__iptr) noexcept (true); extern long double __modfl (long double __x, long double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern long double exp10l (long double __x) noexcept (true); extern long double __exp10l (long double __x) noexcept (true);




 extern long double expm1l (long double __x) noexcept (true); extern long double __expm1l (long double __x) noexcept (true);


 extern long double log1pl (long double __x) noexcept (true); extern long double __log1pl (long double __x) noexcept (true);


extern long double logbl (long double __x) noexcept (true); extern long double __logbl (long double __x) noexcept (true);




 extern long double exp2l (long double __x) noexcept (true); extern long double __exp2l (long double __x) noexcept (true);


 extern long double log2l (long double __x) noexcept (true); extern long double __log2l (long double __x) noexcept (true);






 extern long double powl (long double __x, long double __y) noexcept (true); extern long double __powl (long double __x, long double __y) noexcept (true);


extern long double sqrtl (long double __x) noexcept (true); extern long double __sqrtl (long double __x) noexcept (true);



 extern long double hypotl (long double __x, long double __y) noexcept (true); extern long double __hypotl (long double __x, long double __y) noexcept (true);




 extern long double cbrtl (long double __x) noexcept (true); extern long double __cbrtl (long double __x) noexcept (true);






extern long double ceill (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __ceill (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fabsl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __fabsl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double floorl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __floorl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) noexcept (true); extern long double __fmodl (long double __x, long double __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) noexcept (true); extern long double __dreml (long double __x, long double __y) noexcept (true);



extern long double significandl (long double __x) noexcept (true); extern long double __significandl (long double __x) noexcept (true);






extern long double copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) noexcept (true); extern long double __nanl (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));





extern long double j0l (long double) noexcept (true); extern long double __j0l (long double) noexcept (true);
extern long double j1l (long double) noexcept (true); extern long double __j1l (long double) noexcept (true);
extern long double jnl (int, long double) noexcept (true); extern long double __jnl (int, long double) noexcept (true);
extern long double y0l (long double) noexcept (true); extern long double __y0l (long double) noexcept (true);
extern long double y1l (long double) noexcept (true); extern long double __y1l (long double) noexcept (true);
extern long double ynl (int, long double) noexcept (true); extern long double __ynl (int, long double) noexcept (true);





 extern long double erfl (long double) noexcept (true); extern long double __erfl (long double) noexcept (true);
 extern long double erfcl (long double) noexcept (true); extern long double __erfcl (long double) noexcept (true);
extern long double lgammal (long double) noexcept (true); extern long double __lgammal (long double) noexcept (true);




extern long double tgammal (long double) noexcept (true); extern long double __tgammal (long double) noexcept (true);





extern long double gammal (long double) noexcept (true); extern long double __gammal (long double) noexcept (true);







extern long double lgammal_r (long double, int *__signgamp) noexcept (true); extern long double __lgammal_r (long double, int *__signgamp) noexcept (true);






extern long double rintl (long double __x) noexcept (true); extern long double __rintl (long double __x) noexcept (true);


extern long double nextafterl (long double __x, long double __y) noexcept (true); extern long double __nextafterl (long double __x, long double __y) noexcept (true);

extern long double nexttowardl (long double __x, long double __y) noexcept (true); extern long double __nexttowardl (long double __x, long double __y) noexcept (true);




extern long double nextdownl (long double __x) noexcept (true); extern long double __nextdownl (long double __x) noexcept (true);

extern long double nextupl (long double __x) noexcept (true); extern long double __nextupl (long double __x) noexcept (true);



extern long double remainderl (long double __x, long double __y) noexcept (true); extern long double __remainderl (long double __x, long double __y) noexcept (true);



extern long double scalbnl (long double __x, int __n) noexcept (true); extern long double __scalbnl (long double __x, int __n) noexcept (true);



extern int ilogbl (long double __x) noexcept (true); extern int __ilogbl (long double __x) noexcept (true);




extern long int llogbl (long double __x) noexcept (true); extern long int __llogbl (long double __x) noexcept (true);




extern long double scalblnl (long double __x, long int __n) noexcept (true); extern long double __scalblnl (long double __x, long int __n) noexcept (true);



extern long double nearbyintl (long double __x) noexcept (true); extern long double __nearbyintl (long double __x) noexcept (true);



extern long double roundl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundl (long double __x) noexcept (true) __attribute__ ((__const__));



extern long double truncl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __truncl (long double __x) noexcept (true) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) noexcept (true); extern long double __remquol (long double __x, long double __y, int *__quo) noexcept (true);






extern long int lrintl (long double __x) noexcept (true); extern long int __lrintl (long double __x) noexcept (true);
__extension__
extern long long int llrintl (long double __x) noexcept (true); extern long long int __llrintl (long double __x) noexcept (true);



extern long int lroundl (long double __x) noexcept (true); extern long int __lroundl (long double __x) noexcept (true);
__extension__
extern long long int llroundl (long double __x) noexcept (true); extern long long int __llroundl (long double __x) noexcept (true);



extern long double fdiml (long double __x, long double __y) noexcept (true); extern long double __fdiml (long double __x, long double __y) noexcept (true);



extern long double fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) noexcept (true); extern long double __fmal (long double __x, long double __y, long double __z) noexcept (true);




extern long double roundevenl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizel (long double *__cx, const long double *__x) noexcept (true);






extern long double fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) noexcept (true); extern long double __getpayloadl (const long double *__x) noexcept (true);


extern int setpayloadl (long double *__x, long double __payload) noexcept (true);


extern int setpayloadsigl (long double *__x, long double __payload) noexcept (true);







extern long double scalbl (long double __x, long double __n) noexcept (true); extern long double __scalbl (long double __x, long double __n) noexcept (true);
# 400 "/usr/include/math.h" 2 3 4
# 450 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32 acosf32 (_Float32 __x) noexcept (true); extern _Float32 __acosf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinf32 (_Float32 __x) noexcept (true); extern _Float32 __asinf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanf32 (_Float32 __x) noexcept (true); extern _Float32 __atanf32 (_Float32 __x) noexcept (true);

 extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) noexcept (true);


 extern _Float32 cosf32 (_Float32 __x) noexcept (true); extern _Float32 __cosf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinf32 (_Float32 __x) noexcept (true); extern _Float32 __sinf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanf32 (_Float32 __x) noexcept (true); extern _Float32 __tanf32 (_Float32 __x) noexcept (true);




 extern _Float32 coshf32 (_Float32 __x) noexcept (true); extern _Float32 __coshf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinhf32 (_Float32 __x) noexcept (true); extern _Float32 __sinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanhf32 (_Float32 __x) noexcept (true); extern _Float32 __tanhf32 (_Float32 __x) noexcept (true);



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true);





 extern _Float32 acoshf32 (_Float32 __x) noexcept (true); extern _Float32 __acoshf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinhf32 (_Float32 __x) noexcept (true); extern _Float32 __asinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanhf32 (_Float32 __x) noexcept (true); extern _Float32 __atanhf32 (_Float32 __x) noexcept (true);





 extern _Float32 expf32 (_Float32 __x) noexcept (true); extern _Float32 __expf32 (_Float32 __x) noexcept (true);


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) noexcept (true); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) noexcept (true);


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) noexcept (true); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) noexcept (true);


 extern _Float32 logf32 (_Float32 __x) noexcept (true); extern _Float32 __logf32 (_Float32 __x) noexcept (true);


 extern _Float32 log10f32 (_Float32 __x) noexcept (true); extern _Float32 __log10f32 (_Float32 __x) noexcept (true);


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32 exp10f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10f32 (_Float32 __x) noexcept (true);




 extern _Float32 expm1f32 (_Float32 __x) noexcept (true); extern _Float32 __expm1f32 (_Float32 __x) noexcept (true);


 extern _Float32 log1pf32 (_Float32 __x) noexcept (true); extern _Float32 __log1pf32 (_Float32 __x) noexcept (true);


extern _Float32 logbf32 (_Float32 __x) noexcept (true); extern _Float32 __logbf32 (_Float32 __x) noexcept (true);




 extern _Float32 exp2f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2f32 (_Float32 __x) noexcept (true);


 extern _Float32 log2f32 (_Float32 __x) noexcept (true); extern _Float32 __log2f32 (_Float32 __x) noexcept (true);






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 sqrtf32 (_Float32 __x) noexcept (true); extern _Float32 __sqrtf32 (_Float32 __x) noexcept (true);



 extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) noexcept (true);




 extern _Float32 cbrtf32 (_Float32 __x) noexcept (true); extern _Float32 __cbrtf32 (_Float32 __x) noexcept (true);






extern _Float32 ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) noexcept (true); extern _Float32 __nanf32 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) noexcept (true); extern _Float32 __j0f32 (_Float32) noexcept (true);
extern _Float32 j1f32 (_Float32) noexcept (true); extern _Float32 __j1f32 (_Float32) noexcept (true);
extern _Float32 jnf32 (int, _Float32) noexcept (true); extern _Float32 __jnf32 (int, _Float32) noexcept (true);
extern _Float32 y0f32 (_Float32) noexcept (true); extern _Float32 __y0f32 (_Float32) noexcept (true);
extern _Float32 y1f32 (_Float32) noexcept (true); extern _Float32 __y1f32 (_Float32) noexcept (true);
extern _Float32 ynf32 (int, _Float32) noexcept (true); extern _Float32 __ynf32 (int, _Float32) noexcept (true);





 extern _Float32 erff32 (_Float32) noexcept (true); extern _Float32 __erff32 (_Float32) noexcept (true);
 extern _Float32 erfcf32 (_Float32) noexcept (true); extern _Float32 __erfcf32 (_Float32) noexcept (true);
extern _Float32 lgammaf32 (_Float32) noexcept (true); extern _Float32 __lgammaf32 (_Float32) noexcept (true);




extern _Float32 tgammaf32 (_Float32) noexcept (true); extern _Float32 __tgammaf32 (_Float32) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) noexcept (true); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) noexcept (true);






extern _Float32 rintf32 (_Float32 __x) noexcept (true); extern _Float32 __rintf32 (_Float32 __x) noexcept (true);


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true);






extern _Float32 nextdownf32 (_Float32 __x) noexcept (true); extern _Float32 __nextdownf32 (_Float32 __x) noexcept (true);

extern _Float32 nextupf32 (_Float32 __x) noexcept (true); extern _Float32 __nextupf32 (_Float32 __x) noexcept (true);



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 scalbnf32 (_Float32 __x, int __n) noexcept (true); extern _Float32 __scalbnf32 (_Float32 __x, int __n) noexcept (true);



extern int ilogbf32 (_Float32 __x) noexcept (true); extern int __ilogbf32 (_Float32 __x) noexcept (true);




extern long int llogbf32 (_Float32 __x) noexcept (true); extern long int __llogbf32 (_Float32 __x) noexcept (true);




extern _Float32 scalblnf32 (_Float32 __x, long int __n) noexcept (true); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) noexcept (true);



extern _Float32 nearbyintf32 (_Float32 __x) noexcept (true); extern _Float32 __nearbyintf32 (_Float32 __x) noexcept (true);



extern _Float32 roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true);






extern long int lrintf32 (_Float32 __x) noexcept (true); extern long int __lrintf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llrintf32 (_Float32 __x) noexcept (true); extern long long int __llrintf32 (_Float32 __x) noexcept (true);



extern long int lroundf32 (_Float32 __x) noexcept (true); extern long int __lroundf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llroundf32 (_Float32 __x) noexcept (true); extern long long int __llroundf32 (_Float32 __x) noexcept (true);



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));



extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true);




extern _Float32 roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) noexcept (true);






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) noexcept (true); extern _Float32 __getpayloadf32 (const _Float32 *__x) noexcept (true);


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) noexcept (true);


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) noexcept (true);
# 451 "/usr/include/math.h" 2 3 4
# 467 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64 acosf64 (_Float64 __x) noexcept (true); extern _Float64 __acosf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinf64 (_Float64 __x) noexcept (true); extern _Float64 __asinf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanf64 (_Float64 __x) noexcept (true); extern _Float64 __atanf64 (_Float64 __x) noexcept (true);

 extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) noexcept (true);


 extern _Float64 cosf64 (_Float64 __x) noexcept (true); extern _Float64 __cosf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinf64 (_Float64 __x) noexcept (true); extern _Float64 __sinf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanf64 (_Float64 __x) noexcept (true); extern _Float64 __tanf64 (_Float64 __x) noexcept (true);




 extern _Float64 coshf64 (_Float64 __x) noexcept (true); extern _Float64 __coshf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinhf64 (_Float64 __x) noexcept (true); extern _Float64 __sinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanhf64 (_Float64 __x) noexcept (true); extern _Float64 __tanhf64 (_Float64 __x) noexcept (true);



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true);





 extern _Float64 acoshf64 (_Float64 __x) noexcept (true); extern _Float64 __acoshf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinhf64 (_Float64 __x) noexcept (true); extern _Float64 __asinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanhf64 (_Float64 __x) noexcept (true); extern _Float64 __atanhf64 (_Float64 __x) noexcept (true);





 extern _Float64 expf64 (_Float64 __x) noexcept (true); extern _Float64 __expf64 (_Float64 __x) noexcept (true);


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) noexcept (true); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) noexcept (true);


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) noexcept (true); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) noexcept (true);


 extern _Float64 logf64 (_Float64 __x) noexcept (true); extern _Float64 __logf64 (_Float64 __x) noexcept (true);


 extern _Float64 log10f64 (_Float64 __x) noexcept (true); extern _Float64 __log10f64 (_Float64 __x) noexcept (true);


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64 exp10f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10f64 (_Float64 __x) noexcept (true);




 extern _Float64 expm1f64 (_Float64 __x) noexcept (true); extern _Float64 __expm1f64 (_Float64 __x) noexcept (true);


 extern _Float64 log1pf64 (_Float64 __x) noexcept (true); extern _Float64 __log1pf64 (_Float64 __x) noexcept (true);


extern _Float64 logbf64 (_Float64 __x) noexcept (true); extern _Float64 __logbf64 (_Float64 __x) noexcept (true);




 extern _Float64 exp2f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2f64 (_Float64 __x) noexcept (true);


 extern _Float64 log2f64 (_Float64 __x) noexcept (true); extern _Float64 __log2f64 (_Float64 __x) noexcept (true);






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 sqrtf64 (_Float64 __x) noexcept (true); extern _Float64 __sqrtf64 (_Float64 __x) noexcept (true);



 extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) noexcept (true);




 extern _Float64 cbrtf64 (_Float64 __x) noexcept (true); extern _Float64 __cbrtf64 (_Float64 __x) noexcept (true);






extern _Float64 ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) noexcept (true); extern _Float64 __nanf64 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) noexcept (true); extern _Float64 __j0f64 (_Float64) noexcept (true);
extern _Float64 j1f64 (_Float64) noexcept (true); extern _Float64 __j1f64 (_Float64) noexcept (true);
extern _Float64 jnf64 (int, _Float64) noexcept (true); extern _Float64 __jnf64 (int, _Float64) noexcept (true);
extern _Float64 y0f64 (_Float64) noexcept (true); extern _Float64 __y0f64 (_Float64) noexcept (true);
extern _Float64 y1f64 (_Float64) noexcept (true); extern _Float64 __y1f64 (_Float64) noexcept (true);
extern _Float64 ynf64 (int, _Float64) noexcept (true); extern _Float64 __ynf64 (int, _Float64) noexcept (true);





 extern _Float64 erff64 (_Float64) noexcept (true); extern _Float64 __erff64 (_Float64) noexcept (true);
 extern _Float64 erfcf64 (_Float64) noexcept (true); extern _Float64 __erfcf64 (_Float64) noexcept (true);
extern _Float64 lgammaf64 (_Float64) noexcept (true); extern _Float64 __lgammaf64 (_Float64) noexcept (true);




extern _Float64 tgammaf64 (_Float64) noexcept (true); extern _Float64 __tgammaf64 (_Float64) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) noexcept (true); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) noexcept (true);






extern _Float64 rintf64 (_Float64 __x) noexcept (true); extern _Float64 __rintf64 (_Float64 __x) noexcept (true);


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true);






extern _Float64 nextdownf64 (_Float64 __x) noexcept (true); extern _Float64 __nextdownf64 (_Float64 __x) noexcept (true);

extern _Float64 nextupf64 (_Float64 __x) noexcept (true); extern _Float64 __nextupf64 (_Float64 __x) noexcept (true);



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 scalbnf64 (_Float64 __x, int __n) noexcept (true); extern _Float64 __scalbnf64 (_Float64 __x, int __n) noexcept (true);



extern int ilogbf64 (_Float64 __x) noexcept (true); extern int __ilogbf64 (_Float64 __x) noexcept (true);




extern long int llogbf64 (_Float64 __x) noexcept (true); extern long int __llogbf64 (_Float64 __x) noexcept (true);




extern _Float64 scalblnf64 (_Float64 __x, long int __n) noexcept (true); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) noexcept (true);



extern _Float64 nearbyintf64 (_Float64 __x) noexcept (true); extern _Float64 __nearbyintf64 (_Float64 __x) noexcept (true);



extern _Float64 roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true);






extern long int lrintf64 (_Float64 __x) noexcept (true); extern long int __lrintf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llrintf64 (_Float64 __x) noexcept (true); extern long long int __llrintf64 (_Float64 __x) noexcept (true);



extern long int lroundf64 (_Float64 __x) noexcept (true); extern long int __lroundf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llroundf64 (_Float64 __x) noexcept (true); extern long long int __llroundf64 (_Float64 __x) noexcept (true);



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));



extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);




extern _Float64 roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) noexcept (true);






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) noexcept (true); extern _Float64 __getpayloadf64 (const _Float64 *__x) noexcept (true);


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) noexcept (true);


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) noexcept (true);
# 468 "/usr/include/math.h" 2 3 4
# 501 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32x acosf32x (_Float32x __x) noexcept (true); extern _Float32x __acosf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinf32x (_Float32x __x) noexcept (true); extern _Float32x __asinf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanf32x (_Float32x __x) noexcept (true); extern _Float32x __atanf32x (_Float32x __x) noexcept (true);

 extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) noexcept (true);


 extern _Float32x cosf32x (_Float32x __x) noexcept (true); extern _Float32x __cosf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinf32x (_Float32x __x) noexcept (true); extern _Float32x __sinf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanf32x (_Float32x __x) noexcept (true); extern _Float32x __tanf32x (_Float32x __x) noexcept (true);




 extern _Float32x coshf32x (_Float32x __x) noexcept (true); extern _Float32x __coshf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinhf32x (_Float32x __x) noexcept (true); extern _Float32x __sinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanhf32x (_Float32x __x) noexcept (true); extern _Float32x __tanhf32x (_Float32x __x) noexcept (true);



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true);





 extern _Float32x acoshf32x (_Float32x __x) noexcept (true); extern _Float32x __acoshf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinhf32x (_Float32x __x) noexcept (true); extern _Float32x __asinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanhf32x (_Float32x __x) noexcept (true); extern _Float32x __atanhf32x (_Float32x __x) noexcept (true);





 extern _Float32x expf32x (_Float32x __x) noexcept (true); extern _Float32x __expf32x (_Float32x __x) noexcept (true);


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) noexcept (true); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) noexcept (true);


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) noexcept (true); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) noexcept (true);


 extern _Float32x logf32x (_Float32x __x) noexcept (true); extern _Float32x __logf32x (_Float32x __x) noexcept (true);


 extern _Float32x log10f32x (_Float32x __x) noexcept (true); extern _Float32x __log10f32x (_Float32x __x) noexcept (true);


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32x exp10f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10f32x (_Float32x __x) noexcept (true);




 extern _Float32x expm1f32x (_Float32x __x) noexcept (true); extern _Float32x __expm1f32x (_Float32x __x) noexcept (true);


 extern _Float32x log1pf32x (_Float32x __x) noexcept (true); extern _Float32x __log1pf32x (_Float32x __x) noexcept (true);


extern _Float32x logbf32x (_Float32x __x) noexcept (true); extern _Float32x __logbf32x (_Float32x __x) noexcept (true);




 extern _Float32x exp2f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2f32x (_Float32x __x) noexcept (true);


 extern _Float32x log2f32x (_Float32x __x) noexcept (true); extern _Float32x __log2f32x (_Float32x __x) noexcept (true);






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x sqrtf32x (_Float32x __x) noexcept (true); extern _Float32x __sqrtf32x (_Float32x __x) noexcept (true);



 extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) noexcept (true);




 extern _Float32x cbrtf32x (_Float32x __x) noexcept (true); extern _Float32x __cbrtf32x (_Float32x __x) noexcept (true);






extern _Float32x ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) noexcept (true); extern _Float32x __nanf32x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) noexcept (true); extern _Float32x __j0f32x (_Float32x) noexcept (true);
extern _Float32x j1f32x (_Float32x) noexcept (true); extern _Float32x __j1f32x (_Float32x) noexcept (true);
extern _Float32x jnf32x (int, _Float32x) noexcept (true); extern _Float32x __jnf32x (int, _Float32x) noexcept (true);
extern _Float32x y0f32x (_Float32x) noexcept (true); extern _Float32x __y0f32x (_Float32x) noexcept (true);
extern _Float32x y1f32x (_Float32x) noexcept (true); extern _Float32x __y1f32x (_Float32x) noexcept (true);
extern _Float32x ynf32x (int, _Float32x) noexcept (true); extern _Float32x __ynf32x (int, _Float32x) noexcept (true);





 extern _Float32x erff32x (_Float32x) noexcept (true); extern _Float32x __erff32x (_Float32x) noexcept (true);
 extern _Float32x erfcf32x (_Float32x) noexcept (true); extern _Float32x __erfcf32x (_Float32x) noexcept (true);
extern _Float32x lgammaf32x (_Float32x) noexcept (true); extern _Float32x __lgammaf32x (_Float32x) noexcept (true);




extern _Float32x tgammaf32x (_Float32x) noexcept (true); extern _Float32x __tgammaf32x (_Float32x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true);






extern _Float32x rintf32x (_Float32x __x) noexcept (true); extern _Float32x __rintf32x (_Float32x __x) noexcept (true);


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true);






extern _Float32x nextdownf32x (_Float32x __x) noexcept (true); extern _Float32x __nextdownf32x (_Float32x __x) noexcept (true);

extern _Float32x nextupf32x (_Float32x __x) noexcept (true); extern _Float32x __nextupf32x (_Float32x __x) noexcept (true);



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x scalbnf32x (_Float32x __x, int __n) noexcept (true); extern _Float32x __scalbnf32x (_Float32x __x, int __n) noexcept (true);



extern int ilogbf32x (_Float32x __x) noexcept (true); extern int __ilogbf32x (_Float32x __x) noexcept (true);




extern long int llogbf32x (_Float32x __x) noexcept (true); extern long int __llogbf32x (_Float32x __x) noexcept (true);




extern _Float32x scalblnf32x (_Float32x __x, long int __n) noexcept (true); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) noexcept (true);



extern _Float32x nearbyintf32x (_Float32x __x) noexcept (true); extern _Float32x __nearbyintf32x (_Float32x __x) noexcept (true);



extern _Float32x roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true);






extern long int lrintf32x (_Float32x __x) noexcept (true); extern long int __lrintf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llrintf32x (_Float32x __x) noexcept (true); extern long long int __llrintf32x (_Float32x __x) noexcept (true);



extern long int lroundf32x (_Float32x __x) noexcept (true); extern long int __lroundf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llroundf32x (_Float32x __x) noexcept (true); extern long long int __llroundf32x (_Float32x __x) noexcept (true);



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));



extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);




extern _Float32x roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) noexcept (true);






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) noexcept (true); extern _Float32x __getpayloadf32x (const _Float32x *__x) noexcept (true);


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) noexcept (true);


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) noexcept (true);
# 502 "/usr/include/math.h" 2 3 4
# 518 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64x acosf64x (_Float64x __x) noexcept (true); extern _Float64x __acosf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinf64x (_Float64x __x) noexcept (true); extern _Float64x __asinf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanf64x (_Float64x __x) noexcept (true); extern _Float64x __atanf64x (_Float64x __x) noexcept (true);

 extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) noexcept (true);


 extern _Float64x cosf64x (_Float64x __x) noexcept (true); extern _Float64x __cosf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinf64x (_Float64x __x) noexcept (true); extern _Float64x __sinf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanf64x (_Float64x __x) noexcept (true); extern _Float64x __tanf64x (_Float64x __x) noexcept (true);




 extern _Float64x coshf64x (_Float64x __x) noexcept (true); extern _Float64x __coshf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinhf64x (_Float64x __x) noexcept (true); extern _Float64x __sinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanhf64x (_Float64x __x) noexcept (true); extern _Float64x __tanhf64x (_Float64x __x) noexcept (true);



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true);





 extern _Float64x acoshf64x (_Float64x __x) noexcept (true); extern _Float64x __acoshf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinhf64x (_Float64x __x) noexcept (true); extern _Float64x __asinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanhf64x (_Float64x __x) noexcept (true); extern _Float64x __atanhf64x (_Float64x __x) noexcept (true);





 extern _Float64x expf64x (_Float64x __x) noexcept (true); extern _Float64x __expf64x (_Float64x __x) noexcept (true);


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) noexcept (true); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) noexcept (true);


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) noexcept (true); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) noexcept (true);


 extern _Float64x logf64x (_Float64x __x) noexcept (true); extern _Float64x __logf64x (_Float64x __x) noexcept (true);


 extern _Float64x log10f64x (_Float64x __x) noexcept (true); extern _Float64x __log10f64x (_Float64x __x) noexcept (true);


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64x exp10f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10f64x (_Float64x __x) noexcept (true);




 extern _Float64x expm1f64x (_Float64x __x) noexcept (true); extern _Float64x __expm1f64x (_Float64x __x) noexcept (true);


 extern _Float64x log1pf64x (_Float64x __x) noexcept (true); extern _Float64x __log1pf64x (_Float64x __x) noexcept (true);


extern _Float64x logbf64x (_Float64x __x) noexcept (true); extern _Float64x __logbf64x (_Float64x __x) noexcept (true);




 extern _Float64x exp2f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2f64x (_Float64x __x) noexcept (true);


 extern _Float64x log2f64x (_Float64x __x) noexcept (true); extern _Float64x __log2f64x (_Float64x __x) noexcept (true);






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x sqrtf64x (_Float64x __x) noexcept (true); extern _Float64x __sqrtf64x (_Float64x __x) noexcept (true);



 extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) noexcept (true);




 extern _Float64x cbrtf64x (_Float64x __x) noexcept (true); extern _Float64x __cbrtf64x (_Float64x __x) noexcept (true);






extern _Float64x ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) noexcept (true); extern _Float64x __nanf64x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) noexcept (true); extern _Float64x __j0f64x (_Float64x) noexcept (true);
extern _Float64x j1f64x (_Float64x) noexcept (true); extern _Float64x __j1f64x (_Float64x) noexcept (true);
extern _Float64x jnf64x (int, _Float64x) noexcept (true); extern _Float64x __jnf64x (int, _Float64x) noexcept (true);
extern _Float64x y0f64x (_Float64x) noexcept (true); extern _Float64x __y0f64x (_Float64x) noexcept (true);
extern _Float64x y1f64x (_Float64x) noexcept (true); extern _Float64x __y1f64x (_Float64x) noexcept (true);
extern _Float64x ynf64x (int, _Float64x) noexcept (true); extern _Float64x __ynf64x (int, _Float64x) noexcept (true);





 extern _Float64x erff64x (_Float64x) noexcept (true); extern _Float64x __erff64x (_Float64x) noexcept (true);
 extern _Float64x erfcf64x (_Float64x) noexcept (true); extern _Float64x __erfcf64x (_Float64x) noexcept (true);
extern _Float64x lgammaf64x (_Float64x) noexcept (true); extern _Float64x __lgammaf64x (_Float64x) noexcept (true);




extern _Float64x tgammaf64x (_Float64x) noexcept (true); extern _Float64x __tgammaf64x (_Float64x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true);






extern _Float64x rintf64x (_Float64x __x) noexcept (true); extern _Float64x __rintf64x (_Float64x __x) noexcept (true);


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true);






extern _Float64x nextdownf64x (_Float64x __x) noexcept (true); extern _Float64x __nextdownf64x (_Float64x __x) noexcept (true);

extern _Float64x nextupf64x (_Float64x __x) noexcept (true); extern _Float64x __nextupf64x (_Float64x __x) noexcept (true);



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x scalbnf64x (_Float64x __x, int __n) noexcept (true); extern _Float64x __scalbnf64x (_Float64x __x, int __n) noexcept (true);



extern int ilogbf64x (_Float64x __x) noexcept (true); extern int __ilogbf64x (_Float64x __x) noexcept (true);




extern long int llogbf64x (_Float64x __x) noexcept (true); extern long int __llogbf64x (_Float64x __x) noexcept (true);




extern _Float64x scalblnf64x (_Float64x __x, long int __n) noexcept (true); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) noexcept (true);



extern _Float64x nearbyintf64x (_Float64x __x) noexcept (true); extern _Float64x __nearbyintf64x (_Float64x __x) noexcept (true);



extern _Float64x roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true);






extern long int lrintf64x (_Float64x __x) noexcept (true); extern long int __lrintf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llrintf64x (_Float64x __x) noexcept (true); extern long long int __llrintf64x (_Float64x __x) noexcept (true);



extern long int lroundf64x (_Float64x __x) noexcept (true); extern long int __lroundf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llroundf64x (_Float64x __x) noexcept (true); extern long long int __llroundf64x (_Float64x __x) noexcept (true);



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));



extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);




extern _Float64x roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) noexcept (true);






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) noexcept (true); extern _Float64x __getpayloadf64x (const _Float64x *__x) noexcept (true);


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) noexcept (true);


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) noexcept (true);
# 519 "/usr/include/math.h" 2 3 4
# 566 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) noexcept (true);


extern float fdiv (double __x, double __y) noexcept (true);


extern float ffma (double __x, double __y, double __z) noexcept (true);


extern float fmul (double __x, double __y) noexcept (true);


extern float fsqrt (double __x) noexcept (true);


extern float fsub (double __x, double __y) noexcept (true);
# 567 "/usr/include/math.h" 2 3 4
# 587 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) noexcept (true);


extern float fdivl (long double __x, long double __y) noexcept (true);


extern float ffmal (long double __x, long double __y, long double __z) noexcept (true);


extern float fmull (long double __x, long double __y) noexcept (true);


extern float fsqrtl (long double __x) noexcept (true);


extern float fsubl (long double __x, long double __y) noexcept (true);
# 588 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) noexcept (true);


extern double ddivl (long double __x, long double __y) noexcept (true);


extern double dfmal (long double __x, long double __y, long double __z) noexcept (true);


extern double dmull (long double __x, long double __y) noexcept (true);


extern double dsqrtl (long double __x) noexcept (true);


extern double dsubl (long double __x, long double __y) noexcept (true);
# 617 "/usr/include/math.h" 2 3 4
# 697 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32sqrtf32x (_Float32x __x) noexcept (true);


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 698 "/usr/include/math.h" 2 3 4
# 707 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32sqrtf64 (_Float64 __x) noexcept (true);


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 708 "/usr/include/math.h" 2 3 4
# 717 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32sqrtf64x (_Float64x __x) noexcept (true);


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 718 "/usr/include/math.h" 2 3 4
# 747 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xfmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xsqrtf64 (_Float64 __x) noexcept (true);


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 748 "/usr/include/math.h" 2 3 4
# 757 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xfmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xsqrtf64x (_Float64x __x) noexcept (true);


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 758 "/usr/include/math.h" 2 3 4
# 787 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64sqrtf64x (_Float64x __x) noexcept (true);


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 788 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1055 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     noexcept (true) __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 1056 "/usr/include/math.h" 2 3 4
# 1067 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1098 "/usr/include/math.h" 3 4
extern "C++" {
# 1129 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1364 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1455 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 1 3
# 34 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3




# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 62 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 159 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern long int strtol (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtol")


     __attribute__ ((__nonnull__ (1)));
extern unsigned long int strtoul (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoul")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoll (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));
# 278 "/usr/include/stdlib.h" 3 4
extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 298 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 316 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 338 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 339 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));





extern long int strtol_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtol_l")



     __attribute__ ((__nonnull__ (1, 4)));
extern unsigned long int strtoul_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoul_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern long long int strtoll_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoll_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoull_l")




     __attribute__ ((__nonnull__ (1, 4)));
# 415 "/usr/include/stdlib.h" 3 4
extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 436 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 457 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;





# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 515 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern __uint32_t arc4random (void)
     noexcept (true) ;


extern void arc4random_buf (void *__buf, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __uint32_t arc4random_uniform (__uint32_t __upper_bound)
     noexcept (true) ;




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) ;


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))

                       ;


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) ;




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 707 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
                                         ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 749 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 827 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 837 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 849 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 859 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 881 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 891 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 901 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 913 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 923 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
                              ;
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
                                      ;

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)

                                    ;






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1156 "/usr/include/stdlib.h" 2 3 4
# 1167 "/usr/include/stdlib.h" 3 4
}
# 39 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 2 3







extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 48 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 77 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "/media/reza/_dev_sda1/Vitis_HLS/2023.2/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
}





}
# 4 "CNN_Non_Optimal/src/dense.cpp" 2



void dense_layer_soft_max(hls::stream<float> dense_to_softmax_streams[4], float prediction[10])
{
  float sum;
  float exp_sum = 0.0;

  dense_soft_max_for_dense_size:
  for(int d = 0; d < 10; ++d)
  {
    sum = dense_biases[d];

    dense_soft_max_for_filters:
    for(int f = 0; f < 4; ++f)
    {
      sum += dense_to_softmax_streams[f].read();
    }

    exp_sum += prediction[d] = expf(sum);
  }

  dense_soft_max_for_digits:
  for(int p = 0; p < 10; ++p)
  {
    prediction[p] = prediction[p] / exp_sum;
  }
}

void dense(hls::stream<float> & flat_to_dense_stream, int filter, hls::stream<float> & dense_to_softmax_stream)
{
  float flat_value;
  float dense_array[10] = { 0 };

  dense_for_flat:
  for (int i = 0; i < (4 * (28 / 2) * (28 / 2)) / 4; ++i)
  {
    flat_value = flat_to_dense_stream.read();

    VITIS_LOOP_43_1: for (int d = 0; d < 10; ++d)
    {
      int index = filter * ((4 * (28 / 2) * (28 / 2)) / 4) + i;
        dense_array[d] += dense_weights[index][d] * flat_value;
    }
  }

  VITIS_LOOP_50_2: for (int j = 0; j < 10; ++j)
  {
    dense_to_softmax_stream.write(dense_array[j]);
  }
}

void dense_layer(hls::stream<float> flat_to_dense_streams[4], hls::stream<float> dense_to_softmax_streams[4])
{
  dense(flat_to_dense_streams[0], 0, dense_to_softmax_streams[0]);
  dense(flat_to_dense_streams[1], 1, dense_to_softmax_streams[1]);
  dense(flat_to_dense_streams[2], 2, dense_to_softmax_streams[2]);
  dense(flat_to_dense_streams[3], 3, dense_to_softmax_streams[3]);
}
